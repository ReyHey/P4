
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import java.io.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\172\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\005\003\000" +
    "\002\005\003\000\002\005\003\000\002\006\003\000\002" +
    "\006\006\000\002\070\003\000\002\070\002\000\002\007" +
    "\005\000\002\007\003\000\002\016\004\000\002\016\003" +
    "\000\002\017\005\000\002\017\003\000\002\010\005\000" +
    "\002\010\005\000\002\010\003\000\002\011\005\000\002" +
    "\011\005\000\002\011\005\000\002\011\003\000\002\012" +
    "\005\000\002\012\003\000\002\013\004\000\002\013\003" +
    "\000\002\014\005\000\002\014\003\000\002\014\003\000" +
    "\002\014\003\000\002\014\003\000\002\014\003\000\002" +
    "\014\004\000\002\014\003\000\002\014\006\000\002\020" +
    "\003\000\002\020\003\000\002\020\003\000\002\020\003" +
    "\000\002\020\003\000\002\020\003\000\002\021\003\000" +
    "\002\021\003\000\002\022\005\000\002\071\005\000\002" +
    "\071\005\000\002\071\002\000\002\023\006\000\002\023" +
    "\002\000\002\024\004\000\002\024\002\000\002\025\005" +
    "\000\002\025\002\000\002\026\010\000\002\030\003\000" +
    "\002\030\004\000\002\027\005\000\002\031\010\000\002" +
    "\032\003\000\002\032\004\000\002\033\004\000\002\033" +
    "\006\000\002\034\004\000\002\035\011\000\002\036\003" +
    "\000\002\036\003\000\002\037\004\000\002\037\002\000" +
    "\002\040\005\000\002\040\002\000\002\041\004\000\002" +
    "\044\005\000\002\044\004\000\002\045\003\000\002\045" +
    "\003\000\002\045\003\000\002\045\003\000\002\045\003" +
    "\000\002\045\003\000\002\045\003\000\002\045\003\000" +
    "\002\045\003\000\002\045\003\000\002\045\003\000\002" +
    "\045\003\000\002\042\003\000\002\042\003\000\002\042" +
    "\003\000\002\043\003\000\002\043\004\000\002\050\012" +
    "\000\002\051\004\000\002\051\002\000\002\052\006\000" +
    "\002\046\007\000\002\047\004\000\002\047\002\000\002" +
    "\053\006\000\002\054\010\000\002\055\004\000\002\055" +
    "\007\000\002\056\005\000\002\057\012\000\002\065\005" +
    "\000\002\066\003\000\002\066\003\000\002\066\003\000" +
    "\002\066\003\000\002\060\006\000\002\061\004\000\002" +
    "\062\004\000\002\062\002\000\002\063\005\000\002\063" +
    "\002\000\002\064\003\000\002\067\007" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\332\000\012\064\004\065\015\073\005\074\011\001" +
    "\002\000\012\067\023\070\020\071\025\072\017\001\002" +
    "\000\004\014\314\001\002\000\014\002\ufffa\064\ufffa\065" +
    "\ufffa\073\ufffa\074\ufffa\001\002\000\014\002\ufffe\064\004" +
    "\065\015\073\005\074\011\001\002\000\014\002\ufffd\064" +
    "\ufffd\065\ufffd\073\ufffd\074\ufffd\001\002\000\004\014\301" +
    "\001\002\000\004\002\300\001\002\000\014\002\ufffb\064" +
    "\ufffb\065\ufffb\073\ufffb\074\ufffb\001\002\000\014\002\ufffc" +
    "\064\ufffc\065\ufffc\073\ufffc\074\ufffc\001\002\000\014\066" +
    "\026\067\023\070\020\071\025\072\017\001\002\000\004" +
    "\002\000\001\002\000\004\041\275\001\002\000\006\014" +
    "\ufff8\040\ufff8\001\002\000\006\014\ufff6\040\ufff6\001\002" +
    "\000\004\014\uffbb\001\002\000\006\014\ufff9\040\ufff9\001" +
    "\002\000\004\014\027\001\002\000\006\014\ufff7\040\ufff7" +
    "\001\002\000\004\014\uffba\001\002\000\004\032\030\001" +
    "\002\000\014\033\uffb8\067\023\070\020\071\025\072\017" +
    "\001\002\000\004\033\041\001\002\000\004\014\040\001" +
    "\002\000\006\033\uffb6\061\034\001\002\000\012\067\023" +
    "\070\020\071\025\072\017\001\002\000\004\033\uffb9\001" +
    "\002\000\006\033\uffb6\061\034\001\002\000\004\033\uffb7" +
    "\001\002\000\006\033\uffb5\061\uffb5\001\002\000\006\034" +
    "\042\063\044\001\002\000\004\063\271\001\002\000\014" +
    "\002\uffbc\064\uffbc\065\uffbc\073\uffbc\074\uffbc\001\002\000" +
    "\054\004\107\005\075\006\055\007\072\011\065\012\045" +
    "\013\051\014\113\032\054\042\061\047\102\050\101\051" +
    "\100\054\067\056\052\057\050\064\004\067\023\070\020" +
    "\071\025\072\017\001\002\000\070\002\uffdd\016\uffdd\017" +
    "\uffdd\020\uffdd\021\uffdd\022\uffdd\023\uffdd\024\uffdd\025\uffdd" +
    "\032\uffdd\033\uffdd\034\uffdd\035\uffdd\040\uffdd\041\uffdd\043" +
    "\uffdd\044\uffdd\045\uffdd\046\uffdd\054\uffdd\055\uffdd\061\uffdd" +
    "\063\uffdd\064\uffdd\065\uffdd\073\uffdd\074\uffdd\001\002\000" +
    "\020\002\uffaa\055\uffaa\063\uffaa\064\uffaa\065\uffaa\073\uffaa" +
    "\074\uffaa\001\002\000\020\002\uffab\055\uffab\063\uffab\064" +
    "\uffab\065\uffab\073\uffab\074\uffab\001\002\000\004\014\265" +
    "\001\002\000\070\002\uffde\016\uffde\017\uffde\020\uffde\021" +
    "\uffde\022\uffde\023\uffde\024\uffde\025\uffde\032\uffde\033\uffde" +
    "\034\uffde\035\uffde\040\uffde\041\uffde\043\uffde\044\uffde\045" +
    "\uffde\046\uffde\054\uffde\055\uffde\061\uffde\063\uffde\064\uffde" +
    "\065\uffde\073\uffde\074\uffde\001\002\000\016\004\107\011" +
    "\065\012\045\013\051\014\126\032\054\001\002\000\060" +
    "\002\uffed\016\254\017\256\020\262\021\261\022\177\023" +
    "\200\032\uffed\033\uffed\034\uffed\035\uffed\040\255\041\257" +
    "\044\uffed\045\uffed\054\uffed\055\uffed\061\uffed\063\uffed\064" +
    "\uffed\065\uffed\073\uffed\074\uffed\001\002\000\022\004\107" +
    "\011\065\012\045\013\051\014\126\032\054\042\061\056" +
    "\052\001\002\000\020\002\uffa4\055\uffa4\063\uffa4\064\uffa4" +
    "\065\uffa4\073\uffa4\074\uffa4\001\002\000\040\002\ufff1\032" +
    "\ufff1\033\ufff1\034\ufff1\035\ufff1\044\ufff1\045\ufff1\054\ufff1" +
    "\055\ufff1\061\ufff1\063\ufff1\064\ufff1\065\ufff1\073\ufff1\074" +
    "\ufff1\001\002\000\020\002\uffa7\055\uffa7\063\uffa7\064\uffa7" +
    "\065\uffa7\073\uffa7\074\uffa7\001\002\000\040\002\uffef\032" +
    "\uffef\033\uffef\034\uffef\035\uffef\044\uffef\045\uffef\054\uffef" +
    "\055\uffef\061\uffef\063\uffef\064\uffef\065\uffef\073\uffef\074" +
    "\uffef\001\002\000\020\004\107\011\065\012\045\013\051" +
    "\014\126\032\054\056\052\001\002\000\020\002\uffa9\055" +
    "\uffa9\063\uffa9\064\uffa9\065\uffa9\073\uffa9\074\uffa9\001\002" +
    "\000\020\002\uffa6\055\uffa6\063\uffa6\064\uffa6\065\uffa6\073" +
    "\uffa6\074\uffa6\001\002\000\070\002\uffe4\016\uffe4\017\uffe4" +
    "\020\uffe4\021\uffe4\022\uffe4\023\uffe4\024\uffe4\025\uffe4\032" +
    "\uffe4\033\uffe4\034\uffe4\035\uffe4\040\uffe4\041\uffe4\043\uffe4" +
    "\044\uffe4\045\uffe4\046\uffe4\054\uffe4\055\uffe4\061\uffe4\063" +
    "\uffe4\064\uffe4\065\uffe4\073\uffe4\074\uffe4\001\002\000\070" +
    "\002\uffdf\016\uffdf\017\uffdf\020\uffdf\021\uffdf\022\uffdf\023" +
    "\uffdf\024\uffdf\025\uffdf\032\uffdf\033\uffdf\034\uffdf\035\uffdf" +
    "\040\uffdf\041\uffdf\043\uffdf\044\uffdf\045\uffdf\046\uffdf\054" +
    "\uffdf\055\uffdf\061\uffdf\063\uffdf\064\uffdf\065\uffdf\073\uffdf" +
    "\074\uffdf\001\002\000\020\002\uffad\055\uffad\063\uffad\064" +
    "\uffad\065\uffad\073\uffad\074\uffad\001\002\000\022\004\107" +
    "\011\065\012\045\013\051\014\126\032\054\042\061\056" +
    "\052\001\002\000\020\002\uffae\055\uffae\063\uffae\064\uffae" +
    "\065\uffae\073\uffae\074\uffae\001\002\000\024\002\uffa8\044" +
    "\135\045\133\055\uffa8\063\uffa8\064\uffa8\065\uffa8\073\uffa8" +
    "\074\uffa8\001\002\000\040\002\uffa3\004\107\011\065\012" +
    "\045\013\051\014\126\032\054\042\061\055\uffa3\056\052" +
    "\063\uffa3\064\uffa3\065\uffa3\073\uffa3\074\uffa3\001\002\000" +
    "\070\002\uffea\016\uffea\017\uffea\020\uffea\021\uffea\022\uffea" +
    "\023\uffea\024\204\025\203\032\uffea\033\uffea\034\uffea\035" +
    "\uffea\040\uffea\041\uffea\043\202\044\uffea\045\uffea\046\uffea" +
    "\054\uffea\055\uffea\061\uffea\063\uffea\064\uffea\065\uffea\073" +
    "\uffea\074\uffea\001\002\000\020\002\uffb0\055\uffb0\063\uffb0" +
    "\064\uffb0\065\uffb0\073\uffb0\074\uffb0\001\002\000\020\002" +
    "\uffa5\055\uffa5\063\uffa5\064\uffa5\065\uffa5\073\uffa5\074\uffa5" +
    "\001\002\000\020\002\uffaf\055\uffaf\063\uffaf\064\uffaf\065" +
    "\uffaf\073\uffaf\074\uffaf\001\002\000\020\002\uffb1\055\uffb1" +
    "\063\uffb1\064\uffb1\065\uffb1\073\uffb1\074\uffb1\001\002\000" +
    "\022\004\107\011\065\012\045\013\051\014\126\032\054" +
    "\042\061\056\052\001\002\000\012\067\023\070\020\071" +
    "\025\072\017\001\002\000\022\004\107\011\065\012\045" +
    "\013\051\014\126\032\054\042\061\056\052\001\002\000" +
    "\070\002\uffe2\016\uffe2\017\uffe2\020\uffe2\021\uffe2\022\uffe2" +
    "\023\uffe2\024\uffe2\025\uffe2\032\uffe2\033\uffe2\034\uffe2\035" +
    "\uffe2\040\uffe2\041\uffe2\043\uffe2\044\uffe2\045\uffe2\046\uffe2" +
    "\054\uffe2\055\uffe2\061\uffe2\063\uffe2\064\uffe2\065\uffe2\073" +
    "\uffe2\074\uffe2\001\002\000\020\002\uffac\055\uffac\063\uffac" +
    "\064\uffac\065\uffac\073\uffac\074\uffac\001\002\000\020\002" +
    "\uffb2\055\uffb2\063\uffb2\064\uffb2\065\uffb2\073\uffb2\074\uffb2" +
    "\001\002\000\070\002\uffe6\016\uffe6\017\uffe6\020\uffe6\021" +
    "\uffe6\022\uffe6\023\uffe6\024\uffe6\025\uffe6\032\uffe6\033\uffe6" +
    "\034\uffe6\035\uffe6\040\uffe6\041\uffe6\043\uffe6\044\uffe6\045" +
    "\uffe6\046\175\054\uffe6\055\uffe6\061\uffe6\063\uffe6\064\uffe6" +
    "\065\uffe6\073\uffe6\074\uffe6\001\002\000\070\002\uffe0\016" +
    "\uffe0\017\uffe0\020\uffe0\021\uffe0\022\uffe0\023\uffe0\024\uffe0" +
    "\025\uffe0\032\uffe0\033\uffe0\034\uffe0\035\uffe0\040\uffe0\041" +
    "\uffe0\043\uffe0\044\uffe0\045\uffe0\046\uffe0\054\uffe0\055\uffe0" +
    "\061\uffe0\063\uffe0\064\uffe0\065\uffe0\073\uffe0\074\uffe0\001" +
    "\002\000\020\002\uff98\055\uff98\063\uff98\064\uff98\065\uff98" +
    "\073\uff98\074\uff98\001\002\000\004\014\151\001\002\000" +
    "\070\002\uffda\016\uffda\017\uffda\020\uffda\021\uffda\022\uffda" +
    "\023\uffda\024\uffda\025\uffda\032\uffda\033\uffda\034\uffda\035" +
    "\uffda\040\uffda\041\uffda\043\uffda\044\uffda\045\uffda\046\uffda" +
    "\054\uffda\055\uffda\061\uffda\063\uffda\064\uffda\065\uffda\073" +
    "\uffda\074\uffda\001\002\000\074\002\uffdc\015\120\016\uffdc" +
    "\017\uffdc\020\uffdc\021\uffdc\022\uffdc\023\uffdc\024\uffdc\025" +
    "\uffdc\026\115\027\122\030\124\031\121\032\125\036\114" +
    "\040\uffdc\041\uffdc\043\uffdc\044\uffdc\045\uffdc\046\uffdc\055" +
    "\uffdc\062\123\063\uffdc\064\uffdc\065\uffdc\073\uffdc\074\uffdc" +
    "\001\002\000\002\001\002\000\022\004\uff93\011\uff93\012" +
    "\uff93\013\uff93\014\uff93\032\uff93\042\uff93\056\uff93\001\002" +
    "\000\070\002\uffdb\016\uffdb\017\uffdb\020\uffdb\021\uffdb\022" +
    "\uffdb\023\uffdb\024\uffdb\025\uffdb\032\uffdb\033\uffdb\034\uffdb" +
    "\035\uffdb\040\uffdb\041\uffdb\043\uffdb\044\uffdb\045\uffdb\046" +
    "\uffdb\054\uffdb\055\uffdb\061\uffdb\063\uffdb\064\uffdb\065\uffdb" +
    "\073\uffdb\074\uffdb\001\002\000\022\004\107\011\065\012" +
    "\045\013\051\014\126\032\054\042\061\056\052\001\002" +
    "\000\022\004\107\011\065\012\045\013\051\014\126\032" +
    "\054\042\061\056\052\001\002\000\022\004\uff90\011\uff90" +
    "\012\uff90\013\uff90\014\uff90\032\uff90\042\uff90\056\uff90\001" +
    "\002\000\022\004\uff92\011\uff92\012\uff92\013\uff92\014\uff92" +
    "\032\uff92\042\uff92\056\uff92\001\002\000\004\014\144\001" +
    "\002\000\022\004\uff91\011\uff91\012\uff91\013\uff91\014\uff91" +
    "\032\uff91\042\uff91\056\uff91\001\002\000\024\004\107\011" +
    "\065\012\045\013\051\014\126\032\054\033\uff8c\042\061" +
    "\056\052\001\002\000\074\002\uffdc\016\uffdc\017\uffdc\020" +
    "\uffdc\021\uffdc\022\uffdc\023\uffdc\024\uffdc\025\uffdc\032\125" +
    "\033\uffdc\034\uffdc\035\uffdc\036\114\040\uffdc\041\uffdc\043" +
    "\uffdc\044\uffdc\045\uffdc\046\uffdc\054\uffdc\055\uffdc\061\uffdc" +
    "\062\123\063\uffdc\064\uffdc\065\uffdc\073\uffdc\074\uffdc\001" +
    "\002\000\006\033\uff8a\061\137\001\002\000\012\033\uff89" +
    "\044\135\045\133\061\uff89\001\002\000\004\033\132\001" +
    "\002\000\070\002\uff8f\016\uff8f\017\uff8f\020\uff8f\021\uff8f" +
    "\022\uff8f\023\uff8f\024\uff8f\025\uff8f\032\uff8f\033\uff8f\034" +
    "\uff8f\035\uff8f\040\uff8f\041\uff8f\043\uff8f\044\uff8f\045\uff8f" +
    "\046\uff8f\054\uff8f\055\uff8f\061\uff8f\063\uff8f\064\uff8f\065" +
    "\uff8f\073\uff8f\074\uff8f\001\002\000\022\004\uffd2\011\uffd2" +
    "\012\uffd2\013\uffd2\014\uffd2\032\uffd2\042\uffd2\056\uffd2\001" +
    "\002\000\022\004\107\011\065\012\045\013\051\014\126" +
    "\032\054\042\061\056\052\001\002\000\022\004\uffd1\011" +
    "\uffd1\012\uffd1\013\uffd1\014\uffd1\032\uffd1\042\uffd1\056\uffd1" +
    "\001\002\000\040\002\ufff2\032\ufff2\033\ufff2\034\ufff2\035" +
    "\ufff2\044\ufff2\045\ufff2\054\ufff2\055\ufff2\061\ufff2\063\ufff2" +
    "\064\ufff2\065\ufff2\073\ufff2\074\ufff2\001\002\000\022\004" +
    "\107\011\065\012\045\013\051\014\126\032\054\042\061" +
    "\056\052\001\002\000\004\033\uff8d\001\002\000\006\033" +
    "\uff8a\061\137\001\002\000\004\033\uff8b\001\002\000\070" +
    "\002\uff8e\016\uff8e\017\uff8e\020\uff8e\021\uff8e\022\uff8e\023" +
    "\uff8e\024\uff8e\025\uff8e\032\uff8e\033\uff8e\034\uff8e\035\uff8e" +
    "\040\uff8e\041\uff8e\043\uff8e\044\uff8e\045\uff8e\046\uff8e\054" +
    "\uff8e\055\uff8e\061\uff8e\063\uff8e\064\uff8e\065\uff8e\073\uff8e" +
    "\074\uff8e\001\002\000\004\032\125\001\002\000\024\002" +
    "\uff96\044\135\045\133\055\uff96\063\uff96\064\uff96\065\uff96" +
    "\073\uff96\074\uff96\001\002\000\024\002\uff94\044\135\045" +
    "\133\055\uff94\063\uff94\064\uff94\065\uff94\073\uff94\074\uff94" +
    "\001\002\000\004\037\150\001\002\000\070\002\uffd9\016" +
    "\uffd9\017\uffd9\020\uffd9\021\uffd9\022\uffd9\023\uffd9\024\uffd9" +
    "\025\uffd9\032\uffd9\033\uffd9\034\uffd9\035\uffd9\040\uffd9\041" +
    "\uffd9\043\uffd9\044\uffd9\045\uffd9\046\uffd9\054\uffd9\055\uffd9" +
    "\061\uffd9\063\uffd9\064\uffd9\065\uffd9\073\uffd9\074\uffd9\001" +
    "\002\000\022\002\uffcd\015\152\055\uffcd\063\uffcd\064\uffcd" +
    "\065\uffcd\073\uffcd\074\uffcd\001\002\000\026\004\107\011" +
    "\065\012\045\013\051\014\126\015\156\032\054\042\061" +
    "\056\052\063\uffcb\001\002\000\020\002\uffd0\055\uffd0\063" +
    "\uffd0\064\uffd0\065\uffd0\073\uffd0\074\uffd0\001\002\000\004" +
    "\063\174\001\002\000\012\044\135\045\133\054\167\063" +
    "\170\001\002\000\004\034\157\001\002\000\024\004\107" +
    "\011\065\012\045\013\051\014\126\032\054\035\uffc9\042" +
    "\061\056\052\001\002\000\004\035\166\001\002\000\012" +
    "\035\uffc7\044\135\045\133\061\162\001\002\000\022\004" +
    "\107\011\065\012\045\013\051\014\126\032\054\042\061" +
    "\056\052\001\002\000\004\035\uffca\001\002\000\012\035" +
    "\uffc7\044\135\045\133\061\162\001\002\000\004\035\uffc8" +
    "\001\002\000\004\063\uffcc\001\002\000\022\004\107\011" +
    "\065\012\045\013\051\014\126\032\054\042\061\056\052" +
    "\001\002\000\020\002\uffcf\055\uffcf\063\uffcf\064\uffcf\065" +
    "\uffcf\073\uffcf\074\uffcf\001\002\000\010\044\135\045\133" +
    "\055\172\001\002\000\022\004\107\011\065\012\045\013" +
    "\051\014\126\032\054\042\061\056\052\001\002\000\024" +
    "\002\uff95\044\135\045\133\055\uff95\063\uff95\064\uff95\065" +
    "\uff95\073\uff95\074\uff95\001\002\000\020\002\uffce\055\uffce" +
    "\063\uffce\064\uffce\065\uffce\073\uffce\074\uffce\001\002\000" +
    "\020\004\107\011\065\012\045\013\051\014\126\032\054" +
    "\056\052\001\002\000\070\002\uffe5\016\uffe5\017\uffe5\020" +
    "\uffe5\021\uffe5\022\uffe5\023\uffe5\024\uffe5\025\uffe5\032\uffe5" +
    "\033\uffe5\034\uffe5\035\uffe5\040\uffe5\041\uffe5\043\uffe5\044" +
    "\uffe5\045\uffe5\046\uffe5\054\uffe5\055\uffe5\061\uffe5\063\uffe5" +
    "\064\uffe5\065\uffe5\073\uffe5\074\uffe5\001\002\000\020\004" +
    "\107\011\065\012\045\013\051\014\126\032\054\056\052" +
    "\001\002\000\020\004\107\011\065\012\045\013\051\014" +
    "\126\032\054\056\052\001\002\000\070\002\uffeb\016\uffeb" +
    "\017\uffeb\020\uffeb\021\uffeb\022\uffeb\023\uffeb\024\204\025" +
    "\203\032\uffeb\033\uffeb\034\uffeb\035\uffeb\040\uffeb\041\uffeb" +
    "\043\202\044\uffeb\045\uffeb\046\uffeb\054\uffeb\055\uffeb\061" +
    "\uffeb\063\uffeb\064\uffeb\065\uffeb\073\uffeb\074\uffeb\001\002" +
    "\000\020\004\107\011\065\012\045\013\051\014\126\032" +
    "\054\056\052\001\002\000\020\004\107\011\065\012\045" +
    "\013\051\014\126\032\054\056\052\001\002\000\020\004" +
    "\107\011\065\012\045\013\051\014\126\032\054\056\052" +
    "\001\002\000\070\002\uffe9\016\uffe9\017\uffe9\020\uffe9\021" +
    "\uffe9\022\uffe9\023\uffe9\024\uffe9\025\uffe9\032\uffe9\033\uffe9" +
    "\034\uffe9\035\uffe9\040\uffe9\041\uffe9\043\uffe9\044\uffe9\045" +
    "\uffe9\046\175\054\uffe9\055\uffe9\061\uffe9\063\uffe9\064\uffe9" +
    "\065\uffe9\073\uffe9\074\uffe9\001\002\000\070\002\uffe8\016" +
    "\uffe8\017\uffe8\020\uffe8\021\uffe8\022\uffe8\023\uffe8\024\uffe8" +
    "\025\uffe8\032\uffe8\033\uffe8\034\uffe8\035\uffe8\040\uffe8\041" +
    "\uffe8\043\uffe8\044\uffe8\045\uffe8\046\175\054\uffe8\055\uffe8" +
    "\061\uffe8\063\uffe8\064\uffe8\065\uffe8\073\uffe8\074\uffe8\001" +
    "\002\000\070\002\uffe7\016\uffe7\017\uffe7\020\uffe7\021\uffe7" +
    "\022\uffe7\023\uffe7\024\uffe7\025\uffe7\032\uffe7\033\uffe7\034" +
    "\uffe7\035\uffe7\040\uffe7\041\uffe7\043\uffe7\044\uffe7\045\uffe7" +
    "\046\175\054\uffe7\055\uffe7\061\uffe7\063\uffe7\064\uffe7\065" +
    "\uffe7\073\uffe7\074\uffe7\001\002\000\070\002\uffec\016\uffec" +
    "\017\uffec\020\uffec\021\uffec\022\uffec\023\uffec\024\204\025" +
    "\203\032\uffec\033\uffec\034\uffec\035\uffec\040\uffec\041\uffec" +
    "\043\202\044\uffec\045\uffec\046\uffec\054\uffec\055\uffec\061" +
    "\uffec\063\uffec\064\uffec\065\uffec\073\uffec\074\uffec\001\002" +
    "\000\012\034\042\044\135\045\133\063\044\001\002\000" +
    "\004\063\213\001\002\000\020\002\uff9a\055\uff9a\063\uff9a" +
    "\064\uff9a\065\uff9a\073\uff9a\074\uff9a\001\002\000\004\014" +
    "\215\001\002\000\004\010\216\001\002\000\004\014\217" +
    "\001\002\000\006\034\042\063\044\001\002\000\020\002" +
    "\uff99\055\uff99\063\uff99\064\uff99\065\uff99\073\uff99\074\uff99" +
    "\001\002\000\010\032\222\044\135\045\133\001\002\000" +
    "\006\052\224\053\uff9f\001\002\000\006\052\224\053\uff9f" +
    "\001\002\000\004\014\236\001\002\000\004\053\226\001" +
    "\002\000\004\060\227\001\002\000\054\004\107\005\075" +
    "\006\055\007\072\011\065\012\045\013\051\014\113\032" +
    "\054\042\061\047\102\050\101\051\100\054\067\056\052" +
    "\057\050\064\004\067\023\070\020\071\025\072\017\001" +
    "\002\000\056\004\107\005\075\006\055\007\072\011\065" +
    "\012\045\013\051\014\113\032\054\033\233\042\061\047" +
    "\102\050\101\051\100\054\067\056\052\057\050\064\004" +
    "\067\023\070\020\071\025\072\017\001\002\000\004\063" +
    "\232\001\002\000\064\004\uffb3\005\uffb3\006\uffb3\007\uffb3" +
    "\011\uffb3\012\uffb3\013\uffb3\014\uffb3\032\uffb3\033\uffb3\035" +
    "\uffb3\042\uffb3\047\uffb3\050\uffb3\051\uffb3\052\uffb3\053\uffb3" +
    "\054\uffb3\056\uffb3\057\uffb3\064\uffb3\067\uffb3\070\uffb3\071" +
    "\uffb3\072\uffb3\001\002\000\020\002\uffa1\055\uffa1\063\uffa1" +
    "\064\uffa1\065\uffa1\073\uffa1\074\uffa1\001\002\000\004\063" +
    "\235\001\002\000\064\004\uffb4\005\uffb4\006\uffb4\007\uffb4" +
    "\011\uffb4\012\uffb4\013\uffb4\014\uffb4\032\uffb4\033\uffb4\035" +
    "\uffb4\042\uffb4\047\uffb4\050\uffb4\051\uffb4\052\uffb4\053\uffb4" +
    "\054\uffb4\056\uffb4\057\uffb4\064\uffb4\067\uffb4\070\uffb4\071" +
    "\uffb4\072\uffb4\001\002\000\004\060\237\001\002\000\054" +
    "\004\107\005\075\006\055\007\072\011\065\012\045\013" +
    "\051\014\113\032\054\042\061\047\102\050\101\051\100" +
    "\054\067\056\052\057\050\064\004\067\023\070\020\071" +
    "\025\072\017\001\002\000\060\004\107\005\075\006\055" +
    "\007\072\011\065\012\045\013\051\014\113\032\054\042" +
    "\061\047\102\050\101\051\100\052\uff9e\053\uff9e\054\067" +
    "\056\052\057\050\064\004\067\023\070\020\071\025\072" +
    "\017\001\002\000\004\053\uffa0\001\002\000\024\002\uffa2" +
    "\044\135\045\133\055\uffa2\063\uffa2\064\uffa2\065\uffa2\073" +
    "\uffa2\074\uffa2\001\002\000\012\034\042\044\135\045\133" +
    "\063\044\001\002\000\006\055\246\063\uff9b\001\002\000" +
    "\004\063\250\001\002\000\006\034\042\063\044\001\002" +
    "\000\004\063\uff9c\001\002\000\020\002\uff9d\055\uff9d\063" +
    "\uff9d\064\uff9d\065\uff9d\073\uff9d\074\uff9d\001\002\000\040" +
    "\002\ufff0\032\ufff0\033\ufff0\034\ufff0\035\ufff0\044\ufff0\045" +
    "\ufff0\054\ufff0\055\ufff0\061\ufff0\063\ufff0\064\ufff0\065\ufff0" +
    "\073\ufff0\074\ufff0\001\002\000\010\033\253\044\135\045" +
    "\133\001\002\000\070\002\uffe1\016\uffe1\017\uffe1\020\uffe1" +
    "\021\uffe1\022\uffe1\023\uffe1\024\uffe1\025\uffe1\032\uffe1\033" +
    "\uffe1\034\uffe1\035\uffe1\040\uffe1\041\uffe1\043\uffe1\044\uffe1" +
    "\045\uffe1\046\uffe1\054\uffe1\055\uffe1\061\uffe1\063\uffe1\064" +
    "\uffe1\065\uffe1\073\uffe1\074\uffe1\001\002\000\020\004\uffd8" +
    "\011\uffd8\012\uffd8\013\uffd8\014\uffd8\032\uffd8\056\uffd8\001" +
    "\002\000\020\004\uffd3\011\uffd3\012\uffd3\013\uffd3\014\uffd3" +
    "\032\uffd3\056\uffd3\001\002\000\020\004\uffd7\011\uffd7\012" +
    "\uffd7\013\uffd7\014\uffd7\032\uffd7\056\uffd7\001\002\000\020" +
    "\004\uffd4\011\uffd4\012\uffd4\013\uffd4\014\uffd4\032\uffd4\056" +
    "\uffd4\001\002\000\020\004\107\011\065\012\045\013\051" +
    "\014\126\032\054\056\052\001\002\000\020\004\uffd5\011" +
    "\uffd5\012\uffd5\013\uffd5\014\uffd5\032\uffd5\056\uffd5\001\002" +
    "\000\020\004\uffd6\011\uffd6\012\uffd6\013\uffd6\014\uffd6\032" +
    "\uffd6\056\uffd6\001\002\000\044\002\uffee\022\177\023\200" +
    "\032\uffee\033\uffee\034\uffee\035\uffee\044\uffee\045\uffee\054" +
    "\uffee\055\uffee\061\uffee\063\uffee\064\uffee\065\uffee\073\uffee" +
    "\074\uffee\001\002\000\070\002\uffe3\016\uffe3\017\uffe3\020" +
    "\uffe3\021\uffe3\022\uffe3\023\uffe3\024\uffe3\025\uffe3\032\uffe3" +
    "\033\uffe3\034\uffe3\035\uffe3\040\uffe3\041\uffe3\043\uffe3\044" +
    "\uffe3\045\uffe3\046\uffe3\054\uffe3\055\uffe3\061\uffe3\063\uffe3" +
    "\064\uffe3\065\uffe3\073\uffe3\074\uffe3\001\002\000\004\015" +
    "\266\001\002\000\004\057\267\001\002\000\004\062\123" +
    "\001\002\000\020\002\uff88\055\uff88\063\uff88\064\uff88\065" +
    "\uff88\073\uff88\074\uff88\001\002\000\054\004\107\005\075" +
    "\006\055\007\072\011\065\012\045\013\051\014\113\032" +
    "\054\042\061\047\102\050\101\051\100\054\067\056\052" +
    "\057\050\064\004\067\023\070\020\071\025\072\017\001" +
    "\002\000\056\004\107\005\075\006\055\007\072\011\065" +
    "\012\045\013\051\014\113\032\054\035\273\042\061\047" +
    "\102\050\101\051\100\054\067\056\052\057\050\064\004" +
    "\067\023\070\020\071\025\072\017\001\002\000\004\063" +
    "\274\001\002\000\020\002\uff97\055\uff97\063\uff97\064\uff97" +
    "\065\uff97\073\uff97\074\uff97\001\002\000\012\067\023\070" +
    "\020\071\025\072\017\001\002\000\004\040\277\001\002" +
    "\000\006\014\ufff5\040\ufff5\001\002\000\004\002\001\001" +
    "\002\000\004\034\302\001\002\000\012\067\023\070\020" +
    "\071\025\072\017\001\002\000\004\035\311\001\002\000" +
    "\014\035\uffc5\067\023\070\020\071\025\072\017\001\002" +
    "\000\004\014\306\001\002\000\004\063\307\001\002\000" +
    "\014\035\uffc3\067\uffc3\070\uffc3\071\uffc3\072\uffc3\001\002" +
    "\000\004\035\uffc4\001\002\000\004\063\312\001\002\000" +
    "\014\002\uffc6\064\uffc6\065\uffc6\073\uffc6\074\uffc6\001\002" +
    "\000\004\002\uffff\001\002\000\004\034\315\001\002\000" +
    "\004\014\320\001\002\000\004\035\326\001\002\000\006" +
    "\014\320\035\uffc1\001\002\000\006\015\321\063\322\001" +
    "\002\000\004\067\323\001\002\000\006\014\uffbf\035\uffbf" +
    "\001\002\000\004\063\324\001\002\000\006\014\uffbe\035" +
    "\uffbe\001\002\000\004\035\uffc0\001\002\000\004\063\327" +
    "\001\002\000\014\002\uffc2\064\uffc2\065\uffc2\073\uffc2\074" +
    "\uffc2\001\002\000\020\002\uffbd\055\uffbd\063\uffbd\064\uffbd" +
    "\065\uffbd\073\uffbd\074\uffbd\001\002\000\004\014\332\001" +
    "\002\000\022\002\uffcd\015\333\055\uffcd\063\uffcd\064\uffcd" +
    "\065\uffcd\073\uffcd\074\uffcd\001\002\000\026\004\107\011" +
    "\065\012\045\013\051\014\126\015\156\032\054\042\061" +
    "\056\052\063\uffcb\001\002\000\010\044\135\045\133\063" +
    "\170\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\332\000\020\002\011\003\015\004\006\026\013\031" +
    "\012\034\005\035\007\001\001\000\010\005\020\006\330" +
    "\022\327\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\003\312\004\006\026\013\031\012\034\005\035\007" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\005\020" +
    "\006\021\036\023\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\005\020\006\031" +
    "\037\030\041\032\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\040\034\001\001\000\010\005\020\006\031" +
    "\041\035\001\001\000\002\001\001\000\004\040\036\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\055\042" +
    "\001\001\000\002\001\001\000\002\001\001\000\062\005" +
    "\020\006\110\007\070\010\052\011\072\012\105\013\063" +
    "\014\102\016\055\017\057\022\103\034\046\042\061\043" +
    "\062\045\107\046\104\050\076\053\073\054\075\056\067" +
    "\057\065\060\111\065\056\067\045\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\014\263\060\111\001\001\000" +
    "\004\020\257\001\001\000\024\007\251\010\052\011\072" +
    "\012\105\013\063\014\102\016\055\017\057\060\111\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\010\052\011\072\012\105\013" +
    "\063\014\102\017\250\060\111\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\007\242\010\052\011\072\012\105" +
    "\013\063\014\102\016\055\017\057\060\111\001\001\000" +
    "\002\001\001\000\004\021\133\001\001\000\024\007\241" +
    "\010\052\011\072\012\105\013\063\014\102\016\055\017" +
    "\057\060\111\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\007\220\010\052\011\072\012\105\013\063\014\102" +
    "\016\055\017\057\060\111\001\001\000\006\005\020\006" +
    "\213\001\001\000\024\007\210\010\052\011\072\012\105" +
    "\013\063\014\102\016\055\017\057\060\111\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\061\115\066\116\001\001" +
    "\000\004\015\146\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\007\145\010\052\011\072\012\105\013\063" +
    "\014\102\016\055\017\057\060\111\001\001\000\024\007" +
    "\144\010\052\011\072\012\105\013\063\014\102\016\055" +
    "\017\057\060\111\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\060\142\001\001\000\002\001\001\000\030" +
    "\007\127\010\052\011\072\012\105\013\063\014\102\016" +
    "\055\017\057\060\111\062\130\064\126\001\001\000\004" +
    "\061\115\001\001\000\004\063\137\001\001\000\004\021" +
    "\133\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\010\052\011\072\012\105\013\063\014" +
    "\102\016\135\017\057\060\111\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\007\127\010\052\011\072\012" +
    "\105\013\063\014\102\016\055\017\057\060\111\064\140" +
    "\001\001\000\002\001\001\000\004\063\141\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\021\133\001\001\000\004\021\133\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\071\152\001\001\000\026" +
    "\007\154\010\052\011\072\012\105\013\063\014\102\016" +
    "\055\017\057\023\153\060\111\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\021\133\001\001\000\002\001" +
    "\001\000\026\007\160\010\052\011\072\012\105\013\063" +
    "\014\102\016\055\017\057\024\157\060\111\001\001\000" +
    "\002\001\001\000\006\021\133\025\162\001\001\000\024" +
    "\007\163\010\052\011\072\012\105\013\063\014\102\016" +
    "\055\017\057\060\111\001\001\000\002\001\001\000\006" +
    "\021\133\025\164\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\007\170\010\052\011\072\012\105\013\063" +
    "\014\102\016\055\017\057\060\111\001\001\000\002\001" +
    "\001\000\004\021\133\001\001\000\024\007\172\010\052" +
    "\011\072\012\105\013\063\014\102\016\055\017\057\060" +
    "\111\001\001\000\004\021\133\001\001\000\002\001\001" +
    "\000\016\010\175\011\072\012\105\013\063\014\102\060" +
    "\111\001\001\000\002\001\001\000\014\011\207\012\105" +
    "\013\063\014\102\060\111\001\001\000\014\011\200\012" +
    "\105\013\063\014\102\060\111\001\001\000\002\001\001" +
    "\000\012\012\206\013\063\014\102\060\111\001\001\000" +
    "\012\012\205\013\063\014\102\060\111\001\001\000\012" +
    "\012\204\013\063\014\102\060\111\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\021\133\055\211\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\055\217\001\001\000\002\001\001\000" +
    "\004\021\133\001\001\000\006\051\224\052\222\001\001" +
    "\000\006\051\240\052\222\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\064\005\020\006\110" +
    "\007\070\010\052\011\072\012\105\013\063\014\102\016" +
    "\055\017\057\022\103\034\046\042\061\043\062\044\227" +
    "\045\230\046\104\050\076\053\073\054\075\056\067\057" +
    "\065\060\111\065\056\067\045\001\001\000\062\005\020" +
    "\006\110\007\070\010\052\011\072\012\105\013\063\014" +
    "\102\016\055\017\057\022\103\034\046\042\061\043\062" +
    "\045\233\046\104\050\076\053\073\054\075\056\067\057" +
    "\065\060\111\065\056\067\045\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\064\005\020\006\110" +
    "\007\070\010\052\011\072\012\105\013\063\014\102\016" +
    "\055\017\057\022\103\034\046\042\061\043\062\044\237" +
    "\045\230\046\104\050\076\053\073\054\075\056\067\057" +
    "\065\060\111\065\056\067\045\001\001\000\062\005\020" +
    "\006\110\007\070\010\052\011\072\012\105\013\063\014" +
    "\102\016\055\017\057\022\103\034\046\042\061\043\062" +
    "\045\233\046\104\050\076\053\073\054\075\056\067\057" +
    "\065\060\111\065\056\067\045\001\001\000\002\001\001" +
    "\000\004\021\133\001\001\000\006\021\133\055\243\001" +
    "\001\000\004\047\244\001\001\000\002\001\001\000\004" +
    "\055\246\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\021\133\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\010\262\011\072\012\105\013\063" +
    "\014\102\060\111\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\061\267\001\001\000\002\001" +
    "\001\000\064\005\020\006\110\007\070\010\052\011\072" +
    "\012\105\013\063\014\102\016\055\017\057\022\103\034" +
    "\046\042\061\043\062\044\271\045\230\046\104\050\076" +
    "\053\073\054\075\056\067\057\065\060\111\065\056\067" +
    "\045\001\001\000\062\005\020\006\110\007\070\010\052" +
    "\011\072\012\105\013\063\014\102\016\055\017\057\022" +
    "\103\034\046\042\061\043\062\045\233\046\104\050\076" +
    "\053\073\054\075\056\067\057\065\060\111\065\056\067" +
    "\045\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\005\020\006\275\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\005\020" +
    "\006\304\027\303\030\302\001\001\000\002\001\001\000" +
    "\012\005\020\006\304\027\303\030\307\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\032\315\033\316\001\001\000" +
    "\002\001\001\000\006\032\324\033\316\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\071\152\001\001\000\026\007\333\010\052\011\072" +
    "\012\105\013\063\014\102\016\055\017\057\023\153\060" +
    "\111\001\001\000\004\021\133\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= declarations 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // declarations ::= declaration declarations 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarations",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // declarations ::= declaration 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarations",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // declaration ::= function_decl 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // declaration ::= struct_decl 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // declaration ::= enum_decl 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // declaration ::= const_variable_decl 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // primitiv_type ::= NUMBER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primitiv_type",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // primitiv_type ::= STRING 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primitiv_type",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // primitiv_type ::= BOOLEAN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primitiv_type",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // type ::= primitiv_type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // type ::= LIST LANGLE type RANGLE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // optional_newline ::= NEWLINE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optional_newline",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // optional_newline ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optional_newline",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // expression ::= expression logical_symbol deep 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // expression ::= deep 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // deep ::= NOT deeper 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("deep",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // deep ::= deeper 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("deep",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // deeper ::= arithmetic_expression eval_symbol arithmetic_expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("deeper",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // deeper ::= arithmetic_expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("deeper",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // arithmetic_expression ::= arithmetic_expression PLUS term 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arithmetic_expression",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // arithmetic_expression ::= arithmetic_expression MINUS term 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arithmetic_expression",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // arithmetic_expression ::= term 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arithmetic_expression",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // term ::= term TIMES factor 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // term ::= term DIVISION factor 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // term ::= term MOD factor 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // term ::= factor 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // factor ::= factor POW arithmetic_expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // factor ::= base 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // base ::= UMINUS value 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("base",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // base ::= value 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("base",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // value ::= LPAREN expression RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("value",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // value ::= NAN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("value",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // value ::= NUMBERLIT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("value",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // value ::= STRINGLIT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("value",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // value ::= BOOLEANLIT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("value",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // value ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("value",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // value ::= IDENTIFIER func_call_type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("value",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // value ::= func_call 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("value",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // value ::= IDENTIFIER LSQUARE index RSQUARE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("value",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // eval_symbol ::= EQEQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("eval_symbol",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // eval_symbol ::= NOTEQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("eval_symbol",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // eval_symbol ::= LEQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("eval_symbol",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // eval_symbol ::= GEQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("eval_symbol",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // eval_symbol ::= LANGLE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("eval_symbol",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // eval_symbol ::= RANGLE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("eval_symbol",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // logical_symbol ::= AND 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logical_symbol",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // logical_symbol ::= OR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logical_symbol",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // variable_decl ::= type IDENTIFIER initialization 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_decl",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // initialization ::= EQ expression NEWLINE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("initialization",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // initialization ::= EQ list_initialize NEWLINE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("initialization",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // initialization ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("initialization",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // list_initialize ::= EQ LCURLY element_list RCURLY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_initialize",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // list_initialize ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_initialize",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // element_list ::= expression elements 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("element_list",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // element_list ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("element_list",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // elements ::= COMMA expression elements 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elements",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // elements ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elements",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // struct_decl ::= STRUCT IDENTIFIER LCURLY struct_members RCURLY NEWLINE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("struct_decl",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // struct_members ::= struct_member 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("struct_members",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // struct_members ::= struct_member struct_members 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("struct_members",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // struct_member ::= type IDENTIFIER NEWLINE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("struct_member",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // enum_decl ::= ENUM IDENTIFIER LCURLY enum_members RCURLY NEWLINE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("enum_decl",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // enum_members ::= enum_member 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("enum_members",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // enum_members ::= enum_member enum_members 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("enum_members",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // enum_member ::= IDENTIFIER NEWLINE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("enum_member",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // enum_member ::= IDENTIFIER EQ NUMBER NEWLINE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("enum_member",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // const_variable_decl ::= CONSTANT variable_decl 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("const_variable_decl",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // function_decl ::= FUNCTION return_type IDENTIFIER LPAREN formal_parameter_list RPAREN block 
            {
              Object RESULT =null;
		 System.out.println("function_decl");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_decl",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // return_type ::= type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("return_type",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // return_type ::= VOID 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("return_type",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // formal_parameter_list ::= formal_parameter multiple_formal_parameters 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("formal_parameter_list",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // formal_parameter_list ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("formal_parameter_list",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // multiple_formal_parameters ::= COMMA formal_parameter multiple_formal_parameters 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("multiple_formal_parameters",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // multiple_formal_parameters ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("multiple_formal_parameters",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // formal_parameter ::= type IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("formal_parameter",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // stmt_list ::= stmt_list stmt NEWLINE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt_list",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // stmt_list ::= stmt NEWLINE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt_list",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // stmt ::= if_stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // stmt ::= switch_stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // stmt ::= while_stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // stmt ::= foreach_stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // stmt ::= assign_stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // stmt ::= ternary_stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // stmt ::= variable_decl 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // stmt ::= const_variable_decl 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // stmt ::= random_decl 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // stmt ::= jump_stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // stmt ::= expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // stmt ::= compound_assign_stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // jump_stmt ::= return_stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jump_stmt",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // jump_stmt ::= BREAK 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jump_stmt",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // jump_stmt ::= CONTINUE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jump_stmt",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // return_stmt ::= RETURN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("return_stmt",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // return_stmt ::= RETURN expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("return_stmt",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // switch_stmt ::= SWITCH expression LPAREN case_stmts DEFAULT COLON stmt_list RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("switch_stmt",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // case_stmts ::= case_stmt case_stmts 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_stmts",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // case_stmts ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_stmts",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // case_stmt ::= CASE IDENTIFIER COLON stmt_list 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_stmt",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // if_stmt ::= IF expression block else_stmt NEWLINE 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_stmt",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // else_stmt ::= ELSE block 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("else_stmt",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // else_stmt ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("else_stmt",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // while_stmt ::= WHILE expression block NEWLINE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("while_stmt",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // foreach_stmt ::= FOREACH type IDENTIFIER IN IDENTIFIER block 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("foreach_stmt",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // block ::= NEWLINE stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // block ::= LCURLY NEWLINE stmt_list RCURLY NEWLINE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // assign_stmt ::= IDENTIFIER EQ expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assign_stmt",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // ternary_stmt ::= type IDENTIFIER EQ expression IF expression ELSE expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ternary_stmt",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // compound_assign_stmt ::= IDENTIFIER compound_operation expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("compound_assign_stmt",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // compound_operation ::= PLUSEQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("compound_operation",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // compound_operation ::= MINUSEQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("compound_operation",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // compound_operation ::= TIMESEQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("compound_operation",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // compound_operation ::= DIVISIONEQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("compound_operation",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // func_call ::= IDENTIFIER LPAREN actual_parameter_list RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("func_call",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // func_call_type ::= DOT func_call 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("func_call_type",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // actual_parameter_list ::= actual_parameter multiple_actual_parameters 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("actual_parameter_list",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // actual_parameter_list ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("actual_parameter_list",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // multiple_actual_parameters ::= COMMA actual_parameter multiple_actual_parameters 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("multiple_actual_parameters",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // multiple_actual_parameters ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("multiple_actual_parameters",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // actual_parameter ::= expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("actual_parameter",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // random_decl ::= RANDOM IDENTIFIER EQ RANDOM func_call_type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("random_decl",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
