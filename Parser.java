
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import java.io.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\170\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\005\003\000" +
    "\002\005\003\000\002\005\003\000\002\006\003\000\002" +
    "\006\006\000\002\070\004\000\002\070\003\000\002\007" +
    "\005\000\002\007\003\000\002\016\004\000\002\016\003" +
    "\000\002\017\005\000\002\017\003\000\002\010\005\000" +
    "\002\010\005\000\002\010\003\000\002\011\005\000\002" +
    "\011\005\000\002\011\005\000\002\011\003\000\002\012" +
    "\005\000\002\012\003\000\002\013\004\000\002\013\003" +
    "\000\002\014\005\000\002\014\003\000\002\014\003\000" +
    "\002\014\003\000\002\014\003\000\002\014\004\000\002" +
    "\014\004\000\002\014\006\000\002\020\003\000\002\020" +
    "\003\000\002\020\003\000\002\020\003\000\002\020\003" +
    "\000\002\020\003\000\002\021\003\000\002\021\003\000" +
    "\002\022\005\000\002\071\004\000\002\071\004\000\002" +
    "\071\002\000\002\023\006\000\002\023\002\000\002\024" +
    "\004\000\002\024\002\000\002\025\005\000\002\025\002" +
    "\000\002\026\010\000\002\030\003\000\002\030\004\000" +
    "\002\027\005\000\002\031\010\000\002\032\003\000\002" +
    "\032\004\000\002\033\004\000\002\033\006\000\002\034" +
    "\004\000\002\035\012\000\002\036\003\000\002\036\003" +
    "\000\002\037\004\000\002\037\002\000\002\040\005\000" +
    "\002\040\002\000\002\041\004\000\002\044\005\000\002" +
    "\044\004\000\002\045\003\000\002\045\003\000\002\045" +
    "\003\000\002\045\003\000\002\045\003\000\002\045\003" +
    "\000\002\045\003\000\002\045\003\000\002\045\003\000" +
    "\002\045\003\000\002\045\003\000\002\045\003\000\002" +
    "\042\003\000\002\042\003\000\002\042\003\000\002\043" +
    "\003\000\002\043\004\000\002\050\012\000\002\051\004" +
    "\000\002\051\002\000\002\052\006\000\002\046\006\000" +
    "\002\047\004\000\002\047\002\000\002\053\005\000\002" +
    "\054\010\000\002\055\006\000\002\056\005\000\002\057" +
    "\012\000\002\065\005\000\002\066\003\000\002\066\003" +
    "\000\002\066\003\000\002\066\003\000\002\060\005\000" +
    "\002\061\005\000\002\062\004\000\002\062\002\000\002" +
    "\063\005\000\002\063\002\000\002\064\003\000\002\067" +
    "\007" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\326\000\012\064\004\065\015\073\005\074\011\001" +
    "\002\000\012\067\023\070\020\071\026\072\017\001\002" +
    "\000\004\014\310\001\002\000\014\002\ufffa\064\ufffa\065" +
    "\ufffa\073\ufffa\074\ufffa\001\002\000\014\002\ufffe\064\004" +
    "\065\015\073\005\074\011\001\002\000\014\002\ufffd\064" +
    "\ufffd\065\ufffd\073\ufffd\074\ufffd\001\002\000\004\014\275" +
    "\001\002\000\004\002\274\001\002\000\014\002\ufffb\064" +
    "\ufffb\065\ufffb\073\ufffb\074\ufffb\001\002\000\014\002\ufffc" +
    "\064\ufffc\065\ufffc\073\ufffc\074\ufffc\001\002\000\014\066" +
    "\025\067\023\070\020\071\026\072\017\001\002\000\004" +
    "\002\000\001\002\000\004\041\271\001\002\000\006\014" +
    "\ufff8\040\ufff8\001\002\000\006\014\ufff6\040\ufff6\001\002" +
    "\000\004\014\uffbc\001\002\000\006\014\ufff9\040\ufff9\001" +
    "\002\000\004\014\027\001\002\000\004\014\uffbb\001\002" +
    "\000\006\014\ufff7\040\ufff7\001\002\000\004\032\030\001" +
    "\002\000\014\033\uffb9\067\023\070\020\071\026\072\017" +
    "\001\002\000\004\033\041\001\002\000\004\014\040\001" +
    "\002\000\006\033\uffb7\061\034\001\002\000\012\067\023" +
    "\070\020\071\026\072\017\001\002\000\004\033\uffba\001" +
    "\002\000\006\033\uffb7\061\034\001\002\000\004\033\uffb8" +
    "\001\002\000\006\033\uffb6\061\uffb6\001\002\000\004\034" +
    "\042\001\002\000\004\063\045\001\002\000\004\063\045" +
    "\001\002\000\016\002\uffbd\063\046\064\uffbd\065\uffbd\073" +
    "\uffbd\074\uffbd\001\002\000\076\002\ufff3\004\ufff3\005\ufff3" +
    "\006\ufff3\007\ufff3\011\ufff3\012\ufff3\013\ufff3\014\ufff3\032" +
    "\ufff3\033\ufff3\035\ufff3\042\ufff3\047\ufff3\050\ufff3\051\ufff3" +
    "\052\ufff3\053\ufff3\054\ufff3\056\ufff3\057\ufff3\063\ufff3\064" +
    "\ufff3\065\ufff3\067\ufff3\070\ufff3\071\ufff3\072\ufff3\073\ufff3" +
    "\074\ufff3\001\002\000\076\002\ufff4\004\ufff4\005\ufff4\006" +
    "\ufff4\007\ufff4\011\ufff4\012\ufff4\013\ufff4\014\ufff4\032\ufff4" +
    "\033\ufff4\035\ufff4\042\ufff4\047\ufff4\050\ufff4\051\ufff4\052" +
    "\ufff4\053\ufff4\054\ufff4\056\ufff4\057\ufff4\063\ufff4\064\ufff4" +
    "\065\ufff4\067\ufff4\070\ufff4\071\ufff4\072\ufff4\073\ufff4\074" +
    "\ufff4\001\002\000\056\004\113\005\077\006\060\007\075" +
    "\011\070\012\050\013\054\014\115\032\057\042\064\047" +
    "\106\050\105\051\104\054\071\056\055\057\053\063\046" +
    "\064\004\067\023\070\020\071\026\072\017\001\002\000" +
    "\070\002\uffdd\016\uffdd\017\uffdd\020\uffdd\021\uffdd\022\uffdd" +
    "\023\uffdd\024\uffdd\025\uffdd\032\uffdd\033\uffdd\034\uffdd\035" +
    "\uffdd\040\uffdd\041\uffdd\043\uffdd\044\uffdd\045\uffdd\046\uffdd" +
    "\054\uffdd\055\uffdd\061\uffdd\063\uffdd\064\uffdd\065\uffdd\073" +
    "\uffdd\074\uffdd\001\002\000\004\063\uffab\001\002\000\004" +
    "\063\uffac\001\002\000\004\014\265\001\002\000\070\002" +
    "\uffde\016\uffde\017\uffde\020\uffde\021\uffde\022\uffde\023\uffde" +
    "\024\uffde\025\uffde\032\uffde\033\uffde\034\uffde\035\uffde\040" +
    "\uffde\041\uffde\043\uffde\044\uffde\045\uffde\046\uffde\054\uffde" +
    "\055\uffde\061\uffde\063\uffde\064\uffde\065\uffde\073\uffde\074" +
    "\uffde\001\002\000\016\004\113\011\070\012\050\013\054" +
    "\014\123\032\057\001\002\000\060\002\uffed\016\254\017" +
    "\256\020\262\021\261\022\202\023\203\032\uffed\033\uffed" +
    "\034\uffed\035\uffed\040\255\041\257\044\uffed\045\uffed\054" +
    "\uffed\055\uffed\061\uffed\063\uffed\064\uffed\065\uffed\073\uffed" +
    "\074\uffed\001\002\000\022\004\113\011\070\012\050\013" +
    "\054\014\123\032\057\042\064\056\055\001\002\000\004" +
    "\063\uffa5\001\002\000\040\002\ufff1\032\ufff1\033\ufff1\034" +
    "\ufff1\035\ufff1\044\ufff1\045\ufff1\054\ufff1\055\ufff1\061\ufff1" +
    "\063\ufff1\064\ufff1\065\ufff1\073\ufff1\074\ufff1\001\002\000" +
    "\004\063\uffa8\001\002\000\040\002\uffef\032\uffef\033\uffef" +
    "\034\uffef\035\uffef\044\uffef\045\uffef\054\uffef\055\uffef\061" +
    "\uffef\063\uffef\064\uffef\065\uffef\073\uffef\074\uffef\001\002" +
    "\000\020\004\113\011\070\012\050\013\054\014\123\032" +
    "\057\056\055\001\002\000\004\063\uffa7\001\002\000\004" +
    "\063\uffaa\001\002\000\070\002\uffe4\016\uffe4\017\uffe4\020" +
    "\uffe4\021\uffe4\022\uffe4\023\uffe4\024\uffe4\025\uffe4\032\uffe4" +
    "\033\uffe4\034\uffe4\035\uffe4\040\uffe4\041\uffe4\043\uffe4\044" +
    "\uffe4\045\uffe4\046\uffe4\054\uffe4\055\uffe4\061\uffe4\063\uffe4" +
    "\064\uffe4\065\uffe4\073\uffe4\074\uffe4\001\002\000\070\002" +
    "\uffdf\016\uffdf\017\uffdf\020\uffdf\021\uffdf\022\uffdf\023\uffdf" +
    "\024\uffdf\025\uffdf\032\uffdf\033\uffdf\034\uffdf\035\uffdf\040" +
    "\uffdf\041\uffdf\043\uffdf\044\uffdf\045\uffdf\046\uffdf\054\uffdf" +
    "\055\uffdf\061\uffdf\063\uffdf\064\uffdf\065\uffdf\073\uffdf\074" +
    "\uffdf\001\002\000\022\004\113\011\070\012\050\013\054" +
    "\014\123\032\057\042\064\056\055\001\002\000\004\063" +
    "\uffae\001\002\000\004\063\uffaf\001\002\000\010\044\135" +
    "\045\133\063\uffa9\001\002\000\024\004\113\011\070\012" +
    "\050\013\054\014\123\032\057\042\064\056\055\063\uffa4" +
    "\001\002\000\070\002\uffea\016\uffea\017\uffea\020\uffea\021" +
    "\uffea\022\uffea\023\uffea\024\207\025\206\032\uffea\033\uffea" +
    "\034\uffea\035\uffea\040\uffea\041\uffea\043\205\044\uffea\045" +
    "\uffea\046\uffea\054\uffea\055\uffea\061\uffea\063\uffea\064\uffea" +
    "\065\uffea\073\uffea\074\uffea\001\002\000\004\063\uffa6\001" +
    "\002\000\004\063\uffb1\001\002\000\004\063\uffb0\001\002" +
    "\000\056\004\113\005\077\006\060\007\075\011\070\012" +
    "\050\013\054\014\115\032\057\035\242\042\064\047\106" +
    "\050\105\051\104\054\071\056\055\057\053\064\004\067" +
    "\023\070\020\071\026\072\017\001\002\000\004\063\uffb2" +
    "\001\002\000\022\004\113\011\070\012\050\013\054\014" +
    "\123\032\057\042\064\056\055\001\002\000\012\067\023" +
    "\070\020\071\026\072\017\001\002\000\022\004\113\011" +
    "\070\012\050\013\054\014\123\032\057\042\064\056\055" +
    "\001\002\000\070\002\uffe2\016\uffe2\017\uffe2\020\uffe2\021" +
    "\uffe2\022\uffe2\023\uffe2\024\uffe2\025\uffe2\032\uffe2\033\uffe2" +
    "\034\uffe2\035\uffe2\040\uffe2\041\uffe2\043\uffe2\044\uffe2\045" +
    "\uffe2\046\uffe2\054\uffe2\055\uffe2\061\uffe2\063\uffe2\064\uffe2" +
    "\065\uffe2\073\uffe2\074\uffe2\001\002\000\004\063\uffad\001" +
    "\002\000\004\063\uffb3\001\002\000\070\002\uffe6\016\uffe6" +
    "\017\uffe6\020\uffe6\021\uffe6\022\uffe6\023\uffe6\024\uffe6\025" +
    "\uffe6\032\uffe6\033\uffe6\034\uffe6\035\uffe6\040\uffe6\041\uffe6" +
    "\043\uffe6\044\uffe6\045\uffe6\046\200\054\uffe6\055\uffe6\061" +
    "\uffe6\063\uffe6\064\uffe6\065\uffe6\073\uffe6\074\uffe6\001\002" +
    "\000\070\002\uffe0\016\uffe0\017\uffe0\020\uffe0\021\uffe0\022" +
    "\uffe0\023\uffe0\024\uffe0\025\uffe0\032\uffe0\033\uffe0\034\uffe0" +
    "\035\uffe0\040\uffe0\041\uffe0\043\uffe0\044\uffe0\045\uffe0\046" +
    "\uffe0\054\uffe0\055\uffe0\061\uffe0\063\uffe0\064\uffe0\065\uffe0" +
    "\073\uffe0\074\uffe0\001\002\000\004\063\045\001\002\000" +
    "\022\015\171\026\167\027\173\030\174\031\172\032\151" +
    "\036\146\062\152\001\002\000\004\014\117\001\002\000" +
    "\006\015\120\063\uffce\001\002\000\026\004\113\011\070" +
    "\012\050\013\054\014\123\015\125\032\057\042\064\056" +
    "\055\063\uffcc\001\002\000\016\002\uffd1\063\uffd1\064\uffd1" +
    "\065\uffd1\073\uffd1\074\uffd1\001\002\000\016\002\uffcf\063" +
    "\uffcf\064\uffcf\065\uffcf\073\uffcf\074\uffcf\001\002\000\010" +
    "\032\151\036\146\062\152\001\002\000\012\044\135\045" +
    "\133\054\142\063\uffd0\001\002\000\004\034\126\001\002" +
    "\000\024\004\113\011\070\012\050\013\054\014\123\032" +
    "\057\035\uffca\042\064\056\055\001\002\000\004\035\141" +
    "\001\002\000\012\035\uffc8\044\135\045\133\061\131\001" +
    "\002\000\022\004\113\011\070\012\050\013\054\014\123" +
    "\032\057\042\064\056\055\001\002\000\022\004\113\011" +
    "\070\012\050\013\054\014\123\032\057\042\064\056\055" +
    "\001\002\000\022\004\uffd3\011\uffd3\012\uffd3\013\uffd3\014" +
    "\uffd3\032\uffd3\042\uffd3\056\uffd3\001\002\000\004\035\uffcb" +
    "\001\002\000\022\004\uffd2\011\uffd2\012\uffd2\013\uffd2\014" +
    "\uffd2\032\uffd2\042\uffd2\056\uffd2\001\002\000\040\002\ufff2" +
    "\032\ufff2\033\ufff2\034\ufff2\035\ufff2\044\ufff2\045\ufff2\054" +
    "\ufff2\055\ufff2\061\ufff2\063\ufff2\064\ufff2\065\ufff2\073\ufff2" +
    "\074\ufff2\001\002\000\012\035\uffc8\044\135\045\133\061" +
    "\131\001\002\000\004\035\uffc9\001\002\000\016\002\uffcd" +
    "\063\uffcd\064\uffcd\065\uffcd\073\uffcd\074\uffcd\001\002\000" +
    "\022\004\113\011\070\012\050\013\054\014\123\032\057" +
    "\042\064\056\055\001\002\000\010\044\135\045\133\055" +
    "\144\001\002\000\022\004\113\011\070\012\050\013\054" +
    "\014\123\032\057\042\064\056\055\001\002\000\010\044" +
    "\135\045\133\063\uff97\001\002\000\002\001\002\000\070" +
    "\002\uffdc\016\uffdc\017\uffdc\020\uffdc\021\uffdc\022\uffdc\023" +
    "\uffdc\024\uffdc\025\uffdc\032\uffdc\033\uffdc\034\uffdc\035\uffdc" +
    "\040\uffdc\041\uffdc\043\uffdc\044\uffdc\045\uffdc\046\uffdc\054" +
    "\uffdc\055\uffdc\061\uffdc\063\uffdc\064\uffdc\065\uffdc\073\uffdc" +
    "\074\uffdc\001\002\000\070\002\uffdb\016\uffdb\017\uffdb\020" +
    "\uffdb\021\uffdb\022\uffdb\023\uffdb\024\uffdb\025\uffdb\032\uffdb" +
    "\033\uffdb\034\uffdb\035\uffdb\040\uffdb\041\uffdb\043\uffdb\044" +
    "\uffdb\045\uffdb\046\uffdb\054\uffdb\055\uffdb\061\uffdb\063\uffdb" +
    "\064\uffdb\065\uffdb\073\uffdb\074\uffdb\001\002\000\024\004" +
    "\113\011\070\012\050\013\054\014\123\032\057\033\uff8e" +
    "\042\064\056\055\001\002\000\004\014\153\001\002\000" +
    "\004\032\151\001\002\000\070\002\uff90\016\uff90\017\uff90" +
    "\020\uff90\021\uff90\022\uff90\023\uff90\024\uff90\025\uff90\032" +
    "\uff90\033\uff90\034\uff90\035\uff90\040\uff90\041\uff90\043\uff90" +
    "\044\uff90\045\uff90\046\uff90\054\uff90\055\uff90\061\uff90\063" +
    "\uff90\064\uff90\065\uff90\073\uff90\074\uff90\001\002\000\006" +
    "\033\uff8c\061\161\001\002\000\012\033\uff8b\044\135\045" +
    "\133\061\uff8b\001\002\000\004\033\160\001\002\000\070" +
    "\002\uff91\016\uff91\017\uff91\020\uff91\021\uff91\022\uff91\023" +
    "\uff91\024\uff91\025\uff91\032\uff91\033\uff91\034\uff91\035\uff91" +
    "\040\uff91\041\uff91\043\uff91\044\uff91\045\uff91\046\uff91\054" +
    "\uff91\055\uff91\061\uff91\063\uff91\064\uff91\065\uff91\073\uff91" +
    "\074\uff91\001\002\000\022\004\113\011\070\012\050\013" +
    "\054\014\123\032\057\042\064\056\055\001\002\000\004" +
    "\033\uff8f\001\002\000\006\033\uff8c\061\161\001\002\000" +
    "\004\033\uff8d\001\002\000\004\037\166\001\002\000\070" +
    "\002\uffda\016\uffda\017\uffda\020\uffda\021\uffda\022\uffda\023" +
    "\uffda\024\uffda\025\uffda\032\uffda\033\uffda\034\uffda\035\uffda" +
    "\040\uffda\041\uffda\043\uffda\044\uffda\045\uffda\046\uffda\054" +
    "\uffda\055\uffda\061\uffda\063\uffda\064\uffda\065\uffda\073\uffda" +
    "\074\uffda\001\002\000\022\004\uff95\011\uff95\012\uff95\013" +
    "\uff95\014\uff95\032\uff95\042\uff95\056\uff95\001\002\000\022" +
    "\004\113\011\070\012\050\013\054\014\123\032\057\042" +
    "\064\056\055\001\002\000\022\004\113\011\070\012\050" +
    "\013\054\014\123\032\057\042\064\056\055\001\002\000" +
    "\022\004\uff92\011\uff92\012\uff92\013\uff92\014\uff92\032\uff92" +
    "\042\uff92\056\uff92\001\002\000\022\004\uff94\011\uff94\012" +
    "\uff94\013\uff94\014\uff94\032\uff94\042\uff94\056\uff94\001\002" +
    "\000\022\004\uff93\011\uff93\012\uff93\013\uff93\014\uff93\032" +
    "\uff93\042\uff93\056\uff93\001\002\000\010\044\135\045\133" +
    "\063\uff98\001\002\000\010\044\135\045\133\063\uff96\001" +
    "\002\000\066\004\uffb4\005\uffb4\006\uffb4\007\uffb4\011\uffb4" +
    "\012\uffb4\013\uffb4\014\uffb4\032\uffb4\033\uffb4\035\uffb4\042" +
    "\uffb4\047\uffb4\050\uffb4\051\uffb4\052\uffb4\053\uffb4\054\uffb4" +
    "\056\uffb4\057\uffb4\063\046\064\uffb4\067\uffb4\070\uffb4\071" +
    "\uffb4\072\uffb4\001\002\000\020\004\113\011\070\012\050" +
    "\013\054\014\123\032\057\056\055\001\002\000\070\002" +
    "\uffe5\016\uffe5\017\uffe5\020\uffe5\021\uffe5\022\uffe5\023\uffe5" +
    "\024\uffe5\025\uffe5\032\uffe5\033\uffe5\034\uffe5\035\uffe5\040" +
    "\uffe5\041\uffe5\043\uffe5\044\uffe5\045\uffe5\046\uffe5\054\uffe5" +
    "\055\uffe5\061\uffe5\063\uffe5\064\uffe5\065\uffe5\073\uffe5\074" +
    "\uffe5\001\002\000\020\004\113\011\070\012\050\013\054" +
    "\014\123\032\057\056\055\001\002\000\020\004\113\011" +
    "\070\012\050\013\054\014\123\032\057\056\055\001\002" +
    "\000\070\002\uffeb\016\uffeb\017\uffeb\020\uffeb\021\uffeb\022" +
    "\uffeb\023\uffeb\024\207\025\206\032\uffeb\033\uffeb\034\uffeb" +
    "\035\uffeb\040\uffeb\041\uffeb\043\205\044\uffeb\045\uffeb\046" +
    "\uffeb\054\uffeb\055\uffeb\061\uffeb\063\uffeb\064\uffeb\065\uffeb" +
    "\073\uffeb\074\uffeb\001\002\000\020\004\113\011\070\012" +
    "\050\013\054\014\123\032\057\056\055\001\002\000\020" +
    "\004\113\011\070\012\050\013\054\014\123\032\057\056" +
    "\055\001\002\000\020\004\113\011\070\012\050\013\054" +
    "\014\123\032\057\056\055\001\002\000\070\002\uffe9\016" +
    "\uffe9\017\uffe9\020\uffe9\021\uffe9\022\uffe9\023\uffe9\024\uffe9" +
    "\025\uffe9\032\uffe9\033\uffe9\034\uffe9\035\uffe9\040\uffe9\041" +
    "\uffe9\043\uffe9\044\uffe9\045\uffe9\046\200\054\uffe9\055\uffe9" +
    "\061\uffe9\063\uffe9\064\uffe9\065\uffe9\073\uffe9\074\uffe9\001" +
    "\002\000\070\002\uffe8\016\uffe8\017\uffe8\020\uffe8\021\uffe8" +
    "\022\uffe8\023\uffe8\024\uffe8\025\uffe8\032\uffe8\033\uffe8\034" +
    "\uffe8\035\uffe8\040\uffe8\041\uffe8\043\uffe8\044\uffe8\045\uffe8" +
    "\046\200\054\uffe8\055\uffe8\061\uffe8\063\uffe8\064\uffe8\065" +
    "\uffe8\073\uffe8\074\uffe8\001\002\000\070\002\uffe7\016\uffe7" +
    "\017\uffe7\020\uffe7\021\uffe7\022\uffe7\023\uffe7\024\uffe7\025" +
    "\uffe7\032\uffe7\033\uffe7\034\uffe7\035\uffe7\040\uffe7\041\uffe7" +
    "\043\uffe7\044\uffe7\045\uffe7\046\200\054\uffe7\055\uffe7\061" +
    "\uffe7\063\uffe7\064\uffe7\065\uffe7\073\uffe7\074\uffe7\001\002" +
    "\000\070\002\uffec\016\uffec\017\uffec\020\uffec\021\uffec\022" +
    "\uffec\023\uffec\024\207\025\206\032\uffec\033\uffec\034\uffec" +
    "\035\uffec\040\uffec\041\uffec\043\205\044\uffec\045\uffec\046" +
    "\uffec\054\uffec\055\uffec\061\uffec\063\uffec\064\uffec\065\uffec" +
    "\073\uffec\074\uffec\001\002\000\010\034\042\044\135\045" +
    "\133\001\002\000\004\063\uff9b\001\002\000\004\014\217" +
    "\001\002\000\004\010\220\001\002\000\004\014\221\001" +
    "\002\000\004\034\042\001\002\000\004\063\uff9a\001\002" +
    "\000\010\032\224\044\135\045\133\001\002\000\006\052" +
    "\226\053\uffa0\001\002\000\006\052\226\053\uffa0\001\002" +
    "\000\004\014\236\001\002\000\004\053\230\001\002\000" +
    "\004\060\231\001\002\000\054\004\113\005\077\006\060" +
    "\007\075\011\070\012\050\013\054\014\115\032\057\042" +
    "\064\047\106\050\105\051\104\054\071\056\055\057\053" +
    "\064\004\067\023\070\020\071\026\072\017\001\002\000" +
    "\056\004\113\005\077\006\060\007\075\011\070\012\050" +
    "\013\054\014\115\032\057\033\233\042\064\047\106\050" +
    "\105\051\104\054\071\056\055\057\053\064\004\067\023" +
    "\070\020\071\026\072\017\001\002\000\004\063\uffa2\001" +
    "\002\000\004\063\045\001\002\000\066\004\uffb5\005\uffb5" +
    "\006\uffb5\007\uffb5\011\uffb5\012\uffb5\013\uffb5\014\uffb5\032" +
    "\uffb5\033\uffb5\035\uffb5\042\uffb5\047\uffb5\050\uffb5\051\uffb5" +
    "\052\uffb5\053\uffb5\054\uffb5\056\uffb5\057\uffb5\063\046\064" +
    "\uffb5\067\uffb5\070\uffb5\071\uffb5\072\uffb5\001\002\000\004" +
    "\060\237\001\002\000\054\004\113\005\077\006\060\007" +
    "\075\011\070\012\050\013\054\014\115\032\057\042\064" +
    "\047\106\050\105\051\104\054\071\056\055\057\053\064" +
    "\004\067\023\070\020\071\026\072\017\001\002\000\060" +
    "\004\113\005\077\006\060\007\075\011\070\012\050\013" +
    "\054\014\115\032\057\042\064\047\106\050\105\051\104" +
    "\052\uff9f\053\uff9f\054\071\056\055\057\053\064\004\067" +
    "\023\070\020\071\026\072\017\001\002\000\004\053\uffa1" +
    "\001\002\000\006\055\uff99\063\uff99\001\002\000\010\044" +
    "\135\045\133\063\uffa3\001\002\000\010\034\042\044\135" +
    "\045\133\001\002\000\006\055\247\063\uff9c\001\002\000" +
    "\004\063\uff9e\001\002\000\004\034\042\001\002\000\004" +
    "\063\uff9d\001\002\000\040\002\ufff0\032\ufff0\033\ufff0\034" +
    "\ufff0\035\ufff0\044\ufff0\045\ufff0\054\ufff0\055\ufff0\061\ufff0" +
    "\063\ufff0\064\ufff0\065\ufff0\073\ufff0\074\ufff0\001\002\000" +
    "\010\033\253\044\135\045\133\001\002\000\070\002\uffe1" +
    "\016\uffe1\017\uffe1\020\uffe1\021\uffe1\022\uffe1\023\uffe1\024" +
    "\uffe1\025\uffe1\032\uffe1\033\uffe1\034\uffe1\035\uffe1\040\uffe1" +
    "\041\uffe1\043\uffe1\044\uffe1\045\uffe1\046\uffe1\054\uffe1\055" +
    "\uffe1\061\uffe1\063\uffe1\064\uffe1\065\uffe1\073\uffe1\074\uffe1" +
    "\001\002\000\020\004\uffd9\011\uffd9\012\uffd9\013\uffd9\014" +
    "\uffd9\032\uffd9\056\uffd9\001\002\000\020\004\uffd4\011\uffd4" +
    "\012\uffd4\013\uffd4\014\uffd4\032\uffd4\056\uffd4\001\002\000" +
    "\020\004\uffd8\011\uffd8\012\uffd8\013\uffd8\014\uffd8\032\uffd8" +
    "\056\uffd8\001\002\000\020\004\uffd5\011\uffd5\012\uffd5\013" +
    "\uffd5\014\uffd5\032\uffd5\056\uffd5\001\002\000\020\004\113" +
    "\011\070\012\050\013\054\014\123\032\057\056\055\001" +
    "\002\000\020\004\uffd6\011\uffd6\012\uffd6\013\uffd6\014\uffd6" +
    "\032\uffd6\056\uffd6\001\002\000\020\004\uffd7\011\uffd7\012" +
    "\uffd7\013\uffd7\014\uffd7\032\uffd7\056\uffd7\001\002\000\044" +
    "\002\uffee\022\202\023\203\032\uffee\033\uffee\034\uffee\035" +
    "\uffee\044\uffee\045\uffee\054\uffee\055\uffee\061\uffee\063\uffee" +
    "\064\uffee\065\uffee\073\uffee\074\uffee\001\002\000\070\002" +
    "\uffe3\016\uffe3\017\uffe3\020\uffe3\021\uffe3\022\uffe3\023\uffe3" +
    "\024\uffe3\025\uffe3\032\uffe3\033\uffe3\034\uffe3\035\uffe3\040" +
    "\uffe3\041\uffe3\043\uffe3\044\uffe3\045\uffe3\046\uffe3\054\uffe3" +
    "\055\uffe3\061\uffe3\063\uffe3\064\uffe3\065\uffe3\073\uffe3\074" +
    "\uffe3\001\002\000\004\015\266\001\002\000\004\057\267" +
    "\001\002\000\004\062\152\001\002\000\004\063\uff8a\001" +
    "\002\000\012\067\023\070\020\071\026\072\017\001\002" +
    "\000\004\040\273\001\002\000\006\014\ufff5\040\ufff5\001" +
    "\002\000\004\002\001\001\002\000\004\034\276\001\002" +
    "\000\012\067\023\070\020\071\026\072\017\001\002\000" +
    "\004\035\305\001\002\000\014\035\uffc6\067\023\070\020" +
    "\071\026\072\017\001\002\000\004\014\302\001\002\000" +
    "\004\063\045\001\002\000\016\035\uffc4\063\046\067\uffc4" +
    "\070\uffc4\071\uffc4\072\uffc4\001\002\000\004\035\uffc5\001" +
    "\002\000\004\063\045\001\002\000\016\002\uffc7\063\046" +
    "\064\uffc7\065\uffc7\073\uffc7\074\uffc7\001\002\000\004\002" +
    "\uffff\001\002\000\004\034\311\001\002\000\004\014\314" +
    "\001\002\000\004\035\322\001\002\000\006\014\314\035" +
    "\uffc2\001\002\000\006\015\315\063\045\001\002\000\004" +
    "\067\317\001\002\000\010\014\uffc0\035\uffc0\063\046\001" +
    "\002\000\004\063\045\001\002\000\010\014\uffbf\035\uffbf" +
    "\063\046\001\002\000\004\035\uffc1\001\002\000\004\063" +
    "\045\001\002\000\016\002\uffc3\063\046\064\uffc3\065\uffc3" +
    "\073\uffc3\074\uffc3\001\002\000\016\002\uffbe\063\uffbe\064" +
    "\uffbe\065\uffbe\073\uffbe\074\uffbe\001\002\000\004\014\326" +
    "\001\002\000\020\002\uffce\015\327\063\uffce\064\uffce\065" +
    "\uffce\073\uffce\074\uffce\001\002\000\040\002\uffcc\004\113" +
    "\011\070\012\050\013\054\014\123\015\125\032\057\042" +
    "\064\056\055\063\uffcc\064\uffcc\065\uffcc\073\uffcc\074\uffcc" +
    "\001\002\000\022\002\uffd0\044\135\045\133\063\uffd0\064" +
    "\uffd0\065\uffd0\073\uffd0\074\uffd0\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\326\000\020\002\011\003\015\004\006\026\013\031" +
    "\012\034\005\035\007\001\001\000\010\005\020\006\324" +
    "\022\323\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\003\306\004\006\026\013\031\012\034\005\035\007" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\005\020" +
    "\006\021\036\023\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\005\020\006\031" +
    "\037\030\041\032\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\040\034\001\001\000\010\005\020\006\031" +
    "\041\035\001\001\000\002\001\001\000\004\040\036\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\055\042" +
    "\001\001\000\004\070\046\001\001\000\004\070\043\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\062\005\020\006\115\007\073\010\055\011\075\012" +
    "\111\013\066\014\106\016\060\017\062\022\107\034\051" +
    "\042\065\043\064\044\101\045\113\046\110\050\102\053" +
    "\077\054\100\056\072\057\071\065\061\067\050\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\014\263\001\001" +
    "\000\004\020\257\001\001\000\022\007\251\010\055\011" +
    "\075\012\111\013\066\014\106\016\060\017\062\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\010\055\011\075\012\111\013\066" +
    "\014\106\017\250\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\007\243" +
    "\010\055\011\075\012\111\013\066\014\106\016\060\017" +
    "\062\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\021\131\001\001\000\022\007\242\010\055\011\075\012" +
    "\111\013\066\014\106\016\060\017\062\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\060\005\020\006\115\007\073\010\055\011\075" +
    "\012\111\013\066\014\106\016\060\017\062\022\107\034" +
    "\051\042\065\043\064\045\233\046\110\050\102\053\077" +
    "\054\100\056\072\057\071\065\061\067\050\001\001\000" +
    "\002\001\001\000\022\007\222\010\055\011\075\012\111" +
    "\013\066\014\106\016\060\017\062\001\001\000\006\005" +
    "\020\006\215\001\001\000\022\007\213\010\055\011\075" +
    "\012\111\013\066\014\106\016\060\017\062\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\070\176\001\001\000" +
    "\010\060\146\061\147\066\167\001\001\000\002\001\001" +
    "\000\004\071\120\001\001\000\024\007\123\010\055\011" +
    "\075\012\111\013\066\014\106\016\060\017\062\023\121" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\060" +
    "\146\061\147\001\001\000\004\021\131\001\001\000\002" +
    "\001\001\000\024\007\127\010\055\011\075\012\111\013" +
    "\066\014\106\016\060\017\062\024\126\001\001\000\002" +
    "\001\001\000\006\021\131\025\133\001\001\000\022\007" +
    "\136\010\055\011\075\012\111\013\066\014\106\016\060" +
    "\017\062\001\001\000\020\010\055\011\075\012\111\013" +
    "\066\014\106\016\135\017\062\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\021\131\025\137\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\007\142\010\055\011\075\012\111\013" +
    "\066\014\106\016\060\017\062\001\001\000\004\021\131" +
    "\001\001\000\022\007\144\010\055\011\075\012\111\013" +
    "\066\014\106\016\060\017\062\001\001\000\004\021\131" +
    "\001\001\000\004\015\164\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\007\155\010\055\011\075\012\111" +
    "\013\066\014\106\016\060\017\062\062\156\064\154\001" +
    "\001\000\002\001\001\000\004\060\153\001\001\000\002" +
    "\001\001\000\004\063\161\001\001\000\004\021\131\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\007\155" +
    "\010\055\011\075\012\111\013\066\014\106\016\060\017" +
    "\062\064\162\001\001\000\002\001\001\000\004\063\163" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\007\175\010\055\011\075" +
    "\012\111\013\066\014\106\016\060\017\062\001\001\000" +
    "\022\007\174\010\055\011\075\012\111\013\066\014\106" +
    "\016\060\017\062\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\021\131\001\001\000\004" +
    "\021\131\001\001\000\002\001\001\000\014\010\200\011" +
    "\075\012\111\013\066\014\106\001\001\000\002\001\001" +
    "\000\012\011\212\012\111\013\066\014\106\001\001\000" +
    "\012\011\203\012\111\013\066\014\106\001\001\000\002" +
    "\001\001\000\010\012\211\013\066\014\106\001\001\000" +
    "\010\012\210\013\066\014\106\001\001\000\010\012\207" +
    "\013\066\014\106\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\021\131" +
    "\055\214\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\055\221\001\001" +
    "\000\002\001\001\000\004\021\131\001\001\000\006\051" +
    "\226\052\224\001\001\000\006\051\240\052\224\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\062\005\020\006\115\007\073\010\055\011\075\012\111" +
    "\013\066\014\106\016\060\017\062\022\107\034\051\042" +
    "\065\043\064\044\231\045\113\046\110\050\102\053\077" +
    "\054\100\056\072\057\071\065\061\067\050\001\001\000" +
    "\060\005\020\006\115\007\073\010\055\011\075\012\111" +
    "\013\066\014\106\016\060\017\062\022\107\034\051\042" +
    "\065\043\064\045\233\046\110\050\102\053\077\054\100" +
    "\056\072\057\071\065\061\067\050\001\001\000\002\001" +
    "\001\000\004\070\234\001\001\000\002\001\001\000\002" +
    "\001\001\000\062\005\020\006\115\007\073\010\055\011" +
    "\075\012\111\013\066\014\106\016\060\017\062\022\107" +
    "\034\051\042\065\043\064\044\237\045\113\046\110\050" +
    "\102\053\077\054\100\056\072\057\071\065\061\067\050" +
    "\001\001\000\060\005\020\006\115\007\073\010\055\011" +
    "\075\012\111\013\066\014\106\016\060\017\062\022\107" +
    "\034\051\042\065\043\064\045\233\046\110\050\102\053" +
    "\077\054\100\056\072\057\071\065\061\067\050\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\021\131\001" +
    "\001\000\006\021\131\055\244\001\001\000\004\047\245" +
    "\001\001\000\002\001\001\000\004\055\247\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\021\131\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\010\262\011\075" +
    "\012\111\013\066\014\106\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\061\267\001\001\000" +
    "\002\001\001\000\006\005\020\006\271\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\005\020\006\300\027\277\030\276\001\001" +
    "\000\002\001\001\000\012\005\020\006\300\027\277\030" +
    "\303\001\001\000\002\001\001\000\004\070\302\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\070\305\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\032\311\033\312\001\001\000\002\001\001\000" +
    "\006\032\320\033\312\001\001\000\004\070\315\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\070\317\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\070\322" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\071\120\001\001\000\024\007\327\010\055" +
    "\011\075\012\111\013\066\014\106\016\060\017\062\023" +
    "\121\001\001\000\004\021\131\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= declarations 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // declarations ::= declaration declarations 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarations",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // declarations ::= declaration 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarations",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // declaration ::= function_decl 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // declaration ::= struct_decl 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // declaration ::= enum_decl 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // declaration ::= const_variable_decl 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // primitiv_type ::= NUMBER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primitiv_type",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // primitiv_type ::= STRING 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primitiv_type",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // primitiv_type ::= BOOLEAN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primitiv_type",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // type ::= primitiv_type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // type ::= LIST LANGLE type RANGLE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // optional_newline ::= optional_newline NEWLINE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optional_newline",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // optional_newline ::= NEWLINE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optional_newline",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // expression ::= expression logical_symbol deep 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // expression ::= deep 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // deep ::= NOT deeper 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("deep",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // deep ::= deeper 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("deep",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // deeper ::= arithmetic_expression eval_symbol arithmetic_expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("deeper",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // deeper ::= arithmetic_expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("deeper",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // arithmetic_expression ::= arithmetic_expression PLUS term 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arithmetic_expression",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // arithmetic_expression ::= arithmetic_expression MINUS term 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arithmetic_expression",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // arithmetic_expression ::= term 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arithmetic_expression",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // term ::= term TIMES factor 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // term ::= term DIVISION factor 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // term ::= term MOD factor 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // term ::= factor 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // factor ::= factor POW arithmetic_expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // factor ::= base 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // base ::= UMINUS value 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("base",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // base ::= value 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("base",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // value ::= LPAREN expression RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("value",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // value ::= NAN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("value",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // value ::= NUMBERLIT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("value",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // value ::= STRINGLIT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("value",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // value ::= BOOLEANLIT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("value",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // value ::= IDENTIFIER func_call 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("value",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // value ::= IDENTIFIER func_call_type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("value",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // value ::= IDENTIFIER LSQUARE index RSQUARE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("value",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // eval_symbol ::= EQEQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("eval_symbol",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // eval_symbol ::= NOTEQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("eval_symbol",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // eval_symbol ::= LEQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("eval_symbol",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // eval_symbol ::= GEQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("eval_symbol",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // eval_symbol ::= LANGLE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("eval_symbol",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // eval_symbol ::= RANGLE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("eval_symbol",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // logical_symbol ::= AND 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logical_symbol",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // logical_symbol ::= OR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logical_symbol",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // variable_decl ::= type IDENTIFIER initialization 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_decl",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // initialization ::= EQ expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("initialization",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // initialization ::= EQ list_initialize 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("initialization",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // initialization ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("initialization",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // list_initialize ::= EQ LCURLY element_list RCURLY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_initialize",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // list_initialize ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_initialize",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // element_list ::= expression elements 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("element_list",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // element_list ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("element_list",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // elements ::= COMMA expression elements 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elements",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // elements ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elements",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // struct_decl ::= STRUCT IDENTIFIER LCURLY struct_members RCURLY optional_newline 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("struct_decl",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // struct_members ::= struct_member 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("struct_members",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // struct_members ::= struct_member struct_members 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("struct_members",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // struct_member ::= type IDENTIFIER optional_newline 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("struct_member",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // enum_decl ::= ENUM IDENTIFIER LCURLY enum_members RCURLY optional_newline 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("enum_decl",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // enum_members ::= enum_member 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("enum_members",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // enum_members ::= enum_member enum_members 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("enum_members",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // enum_member ::= IDENTIFIER optional_newline 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("enum_member",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // enum_member ::= IDENTIFIER EQ NUMBER optional_newline 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("enum_member",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // const_variable_decl ::= CONSTANT variable_decl 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("const_variable_decl",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // function_decl ::= FUNCTION return_type IDENTIFIER LPAREN formal_parameter_list RPAREN block optional_newline 
            {
              Object RESULT =null;
		 System.out.println("function_decl");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_decl",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // return_type ::= type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("return_type",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // return_type ::= VOID 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("return_type",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // formal_parameter_list ::= formal_parameter multiple_formal_parameters 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("formal_parameter_list",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // formal_parameter_list ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("formal_parameter_list",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // multiple_formal_parameters ::= COMMA formal_parameter multiple_formal_parameters 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("multiple_formal_parameters",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // multiple_formal_parameters ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("multiple_formal_parameters",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // formal_parameter ::= type IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("formal_parameter",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // stmt_list ::= stmt_list stmt optional_newline 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt_list",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // stmt_list ::= stmt optional_newline 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt_list",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // stmt ::= if_stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // stmt ::= switch_stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // stmt ::= while_stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // stmt ::= foreach_stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // stmt ::= assign_stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // stmt ::= ternary_stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // stmt ::= variable_decl 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // stmt ::= const_variable_decl 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // stmt ::= random_decl 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // stmt ::= jump_stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // stmt ::= expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // stmt ::= compound_assign_stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // jump_stmt ::= return_stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jump_stmt",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // jump_stmt ::= BREAK 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jump_stmt",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // jump_stmt ::= CONTINUE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jump_stmt",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // return_stmt ::= RETURN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("return_stmt",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // return_stmt ::= RETURN expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("return_stmt",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // switch_stmt ::= SWITCH expression LPAREN case_stmts DEFAULT COLON stmt_list RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("switch_stmt",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // case_stmts ::= case_stmt case_stmts 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_stmts",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // case_stmts ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_stmts",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // case_stmt ::= CASE IDENTIFIER COLON stmt_list 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_stmt",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // if_stmt ::= IF expression block else_stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_stmt",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // else_stmt ::= ELSE block 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("else_stmt",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // else_stmt ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("else_stmt",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // while_stmt ::= WHILE expression block 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("while_stmt",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // foreach_stmt ::= FOREACH type IDENTIFIER IN IDENTIFIER block 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("foreach_stmt",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // block ::= LCURLY optional_newline stmt_list RCURLY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // assign_stmt ::= IDENTIFIER EQ expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assign_stmt",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // ternary_stmt ::= type IDENTIFIER EQ expression IF expression ELSE expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ternary_stmt",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // compound_assign_stmt ::= IDENTIFIER compound_operation expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("compound_assign_stmt",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // compound_operation ::= PLUSEQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("compound_operation",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // compound_operation ::= MINUSEQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("compound_operation",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // compound_operation ::= TIMESEQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("compound_operation",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // compound_operation ::= DIVISIONEQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("compound_operation",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // func_call ::= LPAREN actual_parameter_list RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("func_call",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // func_call_type ::= DOT IDENTIFIER func_call 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("func_call_type",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // actual_parameter_list ::= actual_parameter multiple_actual_parameters 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("actual_parameter_list",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // actual_parameter_list ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("actual_parameter_list",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // multiple_actual_parameters ::= COMMA actual_parameter multiple_actual_parameters 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("multiple_actual_parameters",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // multiple_actual_parameters ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("multiple_actual_parameters",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // actual_parameter ::= expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("actual_parameter",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // random_decl ::= RANDOM IDENTIFIER EQ RANDOM func_call_type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("random_decl",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
