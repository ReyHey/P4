// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: Lexer.flex

/*Puvikaran*/

import java_cup.runtime.*;


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\12\u1f00\1\u2000\1\u2100\1\u2200\1\u1f00\1\u2300"+
    "\1\u2400\2\u1f00\31\u0100\1\u2500\121\u0100\1\u2600\4\u0100\1\u2700"+
    "\1\u0100\1\u2800\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00\53\u0100"+
    "\1\u2e00\10\u2f00\31\u1f00\1\u0100\1\u3000\1\u3100\1\u0100\1\u3200"+
    "\1\u3300\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900\1\u3a00"+
    "\1\u0100\1\u3b00\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000\1\u4100"+
    "\1\u4200\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700\1\u4800\1\u4900"+
    "\1\u4a00\1\u4b00\1\u4c00\1\u4d00\1\u4e00\1\u1f00\1\u4f00\1\u5000"+
    "\1\u5100\1\u5200\3\u0100\1\u5300\1\u5400\1\u5500\12\u1f00\4\u0100"+
    "\1\u5600\17\u1f00\2\u0100\1\u5700\41\u1f00\2\u0100\1\u5800\1\u5900"+
    "\2\u1f00\1\u5a00\1\u5b00\27\u0100\1\u5c00\4\u0100\1\u5d00\1\u5e00"+
    "\42\u1f00\1\u0100\1\u5f00\1\u6000\11\u1f00\1\u6100\24\u1f00\1\u6200"+
    "\1\u6300\1\u1f00\1\u6400\1\u6500\1\u6600\1\u6700\2\u1f00\1\u6800"+
    "\5\u1f00\1\u6900\1\u6a00\1\u6b00\5\u1f00\1\u6c00\1\u6d00\2\u1f00"+
    "\1\u6e00\1\u1f00\1\u6f00\14\u1f00\1\u7000\4\u1f00\246\u0100\1\u7100"+
    "\20\u0100\1\u7200\1\u7300\25\u0100\1\u7400\34\u0100\1\u7500\14\u1f00"+
    "\2\u0100\1\u7600\5\u1f00\23\u0100\1\u7700\u0aec\u1f00\1\u7800\1\u7900"+
    "\u02fe\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\1\1\2\16\0\4\3\1\1"+
    "\1\4\1\5\1\3\1\6\3\3\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\11\20\1\21"+
    "\1\3\1\22\1\23\1\24\2\3\15\6\1\25\14\6"+
    "\1\26\1\27\1\30\1\31\1\6\1\3\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\6"+
    "\1\43\1\44\1\45\1\46\1\47\2\6\1\50\1\51"+
    "\1\52\1\53\1\54\1\55\3\6\1\56\1\3\1\57"+
    "\1\3\6\0\1\60\32\0\1\1\1\3\4\6\4\3"+
    "\1\6\2\3\1\0\7\3\1\6\4\3\1\6\5\3"+
    "\27\6\1\3\37\6\1\3\u01ca\6\4\3\14\6\16\3"+
    "\5\6\7\3\1\6\1\3\1\6\21\3\160\0\5\6"+
    "\1\3\2\6\2\3\4\6\1\3\1\6\6\3\1\6"+
    "\1\3\3\6\1\3\1\6\1\3\24\6\1\3\123\6"+
    "\1\3\213\6\1\3\5\0\2\3\246\6\1\3\46\6"+
    "\2\3\1\6\6\3\51\6\6\3\1\6\1\3\55\0"+
    "\1\3\1\0\1\3\2\0\1\3\2\0\1\3\1\0"+
    "\10\3\33\6\4\3\4\6\15\3\6\0\5\3\1\6"+
    "\4\3\13\0\1\3\1\0\3\3\53\6\37\0\4\3"+
    "\2\6\1\0\143\6\1\3\1\6\10\0\1\3\6\0"+
    "\2\6\2\0\1\3\4\0\2\6\12\0\3\6\2\3"+
    "\1\6\17\3\1\0\1\6\1\0\36\6\33\0\2\3"+
    "\131\6\13\0\1\6\16\3\12\0\41\6\11\0\2\6"+
    "\4\3\1\6\2\3\1\0\30\6\4\0\1\6\11\0"+
    "\1\6\3\0\1\6\5\0\22\3\31\6\3\0\4\3"+
    "\13\6\65\3\25\6\1\3\22\6\13\3\61\0\66\6"+
    "\3\0\1\6\22\0\1\6\7\0\12\6\2\0\2\3"+
    "\12\0\1\3\20\6\3\0\1\3\10\6\2\3\2\6"+
    "\2\3\26\6\1\3\7\6\1\3\1\6\3\3\4\6"+
    "\2\3\1\0\1\6\7\0\2\3\2\0\2\3\3\0"+
    "\1\6\10\3\1\0\4\3\2\6\1\3\3\6\2\0"+
    "\2\3\12\0\4\6\7\3\2\6\1\3\1\0\2\3"+
    "\3\0\1\3\6\6\4\3\2\6\2\3\26\6\1\3"+
    "\7\6\1\3\2\6\1\3\2\6\1\3\2\6\2\3"+
    "\1\0\1\3\5\0\4\3\2\0\2\3\3\0\3\3"+
    "\1\0\7\3\4\6\1\3\1\6\7\3\14\0\3\6"+
    "\1\0\13\3\3\0\1\3\11\6\1\3\3\6\1\3"+
    "\26\6\1\3\7\6\1\3\2\6\1\3\5\6\2\3"+
    "\1\0\1\6\10\0\1\3\3\0\1\3\3\0\2\3"+
    "\1\6\17\3\2\6\2\0\2\3\12\0\1\3\1\6"+
    "\7\3\1\6\6\0\1\3\3\0\1\3\10\6\2\3"+
    "\2\6\2\3\26\6\1\3\7\6\1\3\2\6\1\3"+
    "\5\6\2\3\1\0\1\6\7\0\2\3\2\0\2\3"+
    "\3\0\7\3\3\0\4\3\2\6\1\3\3\6\2\0"+
    "\2\3\12\0\1\3\1\6\20\3\1\0\1\6\1\3"+
    "\6\6\3\3\3\6\1\3\4\6\3\3\2\6\1\3"+
    "\1\6\1\3\2\6\3\3\2\6\3\3\3\6\3\3"+
    "\14\6\4\3\5\0\3\3\3\0\1\3\4\0\2\3"+
    "\1\6\6\3\1\0\16\3\12\0\11\3\1\6\6\3"+
    "\5\0\10\6\1\3\3\6\1\3\27\6\1\3\20\6"+
    "\3\3\1\6\7\0\1\3\3\0\1\3\4\0\7\3"+
    "\2\0\1\3\3\6\5\3\2\6\2\0\2\3\12\0"+
    "\20\3\1\6\3\0\1\3\10\6\1\3\3\6\1\3"+
    "\27\6\1\3\12\6\1\3\5\6\2\3\1\0\1\6"+
    "\7\0\1\3\3\0\1\3\4\0\7\3\2\0\7\3"+
    "\1\6\1\3\2\6\2\0\2\3\12\0\1\3\2\6"+
    "\15\3\4\0\11\6\1\3\3\6\1\3\51\6\2\0"+
    "\1\6\7\0\1\3\3\0\1\3\4\0\1\6\5\3"+
    "\3\6\1\0\7\3\3\6\2\0\2\3\12\0\12\3"+
    "\6\6\1\3\3\0\1\3\22\6\3\3\30\6\1\3"+
    "\11\6\1\3\1\6\2\3\7\6\3\3\1\0\4\3"+
    "\6\0\1\3\1\0\1\3\10\0\6\3\12\0\2\3"+
    "\2\0\15\3\60\6\1\0\2\6\7\0\4\3\10\6"+
    "\10\0\1\3\12\0\47\3\2\6\1\3\1\6\1\3"+
    "\5\6\1\3\30\6\1\3\1\6\1\3\12\6\1\0"+
    "\2\6\11\0\1\6\2\3\5\6\1\3\1\6\1\3"+
    "\6\0\2\3\12\0\2\3\4\6\40\3\1\6\27\3"+
    "\2\0\6\3\12\0\13\3\1\0\1\3\1\0\1\3"+
    "\1\0\4\3\2\0\10\6\1\3\44\6\4\3\24\0"+
    "\1\3\2\0\5\6\13\0\1\3\44\0\11\3\1\0"+
    "\71\3\53\6\24\0\1\6\12\0\6\3\6\6\4\0"+
    "\4\6\3\0\1\6\3\0\2\6\7\0\3\6\4\0"+
    "\15\6\14\0\1\6\17\0\2\3\46\6\1\3\1\6"+
    "\5\3\1\6\2\3\53\6\1\3\115\6\1\3\4\6"+
    "\2\3\7\6\1\3\1\6\1\3\4\6\2\3\51\6"+
    "\1\3\4\6\2\3\41\6\1\3\4\6\2\3\7\6"+
    "\1\3\1\6\1\3\4\6\2\3\17\6\1\3\71\6"+
    "\1\3\4\6\2\3\103\6\2\3\3\0\40\3\20\6"+
    "\20\3\126\6\2\3\6\6\3\3\u016c\6\2\3\21\6"+
    "\1\1\32\6\5\3\113\6\3\3\13\6\7\3\15\6"+
    "\1\3\4\6\3\0\13\3\22\6\3\0\13\3\22\6"+
    "\2\0\14\3\15\6\1\3\3\6\1\3\2\0\14\3"+
    "\64\6\40\0\3\3\1\6\3\3\2\6\1\0\2\3"+
    "\12\0\41\3\4\0\1\3\12\0\6\3\131\6\7\3"+
    "\5\6\2\0\42\6\1\0\1\6\5\3\106\6\12\3"+
    "\37\6\1\3\14\0\4\3\14\0\12\3\12\0\36\6"+
    "\2\3\5\6\13\3\54\6\4\3\32\6\6\3\12\0"+
    "\46\3\27\6\5\0\4\3\65\6\12\0\1\3\35\0"+
    "\2\3\13\0\6\3\12\0\15\3\1\6\10\3\16\0"+
    "\1\3\2\0\77\3\5\0\57\6\21\0\7\6\4\3"+
    "\12\0\21\3\11\0\14\3\3\0\36\6\15\0\2\6"+
    "\12\0\54\6\16\0\14\3\44\6\24\0\10\3\12\0"+
    "\3\3\3\6\12\0\44\6\2\3\11\6\7\3\53\6"+
    "\2\3\3\6\20\3\3\0\1\3\25\0\4\6\1\0"+
    "\6\6\1\0\2\6\3\0\1\6\5\3\300\6\72\0"+
    "\1\3\5\0\26\6\2\3\6\6\2\3\46\6\2\3"+
    "\6\6\2\3\10\6\1\3\1\6\1\3\1\6\1\3"+
    "\1\6\1\3\37\6\2\3\65\6\1\3\7\6\1\3"+
    "\1\6\3\3\3\6\1\3\7\6\3\3\4\6\2\3"+
    "\6\6\4\3\15\6\5\3\3\6\1\3\7\6\3\3"+
    "\13\1\5\0\30\3\2\1\5\0\1\1\17\3\2\6"+
    "\23\3\1\6\12\3\1\1\5\0\1\3\12\0\1\3"+
    "\1\6\15\3\1\6\20\3\15\6\3\3\40\6\20\3"+
    "\15\0\4\3\1\0\3\3\14\0\21\3\1\6\4\3"+
    "\1\6\2\3\12\6\1\3\1\6\3\3\5\6\6\3"+
    "\1\6\1\3\1\6\1\3\1\6\1\3\4\6\1\3"+
    "\13\6\2\3\4\6\5\3\5\6\4\3\1\6\21\3"+
    "\51\6\u0177\3\57\6\1\3\57\6\1\3\205\6\6\3"+
    "\4\6\3\0\2\6\14\3\46\6\1\3\1\6\5\3"+
    "\1\6\2\3\70\6\7\3\1\6\17\3\1\0\27\6"+
    "\11\3\7\6\1\3\7\6\1\3\7\6\1\3\7\6"+
    "\1\3\7\6\1\3\7\6\1\3\7\6\1\3\7\6"+
    "\1\3\40\0\57\3\1\6\320\3\1\1\4\3\3\6"+
    "\31\3\11\6\6\0\1\3\5\6\2\3\5\6\4\3"+
    "\126\6\2\3\2\0\2\3\3\6\1\3\132\6\1\3"+
    "\4\6\5\3\53\6\1\3\136\6\21\3\40\6\60\3"+
    "\320\6\100\3\375\6\3\3\215\6\103\3\56\6\2\3"+
    "\15\6\3\3\20\6\12\0\2\6\24\3\57\6\1\0"+
    "\4\3\12\0\1\3\37\6\2\0\120\6\2\0\45\3"+
    "\11\6\2\3\147\6\2\3\65\6\2\3\11\6\52\3"+
    "\15\6\1\0\3\6\1\0\4\6\1\0\27\6\5\0"+
    "\4\3\1\0\13\3\1\6\7\3\64\6\14\3\2\0"+
    "\62\6\22\0\12\3\12\0\6\3\22\0\6\6\3\3"+
    "\1\6\1\3\2\6\13\0\34\6\10\0\2\3\27\6"+
    "\15\0\14\3\35\6\3\3\4\0\57\6\16\0\16\3"+
    "\1\6\12\0\6\3\5\6\1\0\12\6\12\0\5\6"+
    "\1\3\51\6\16\0\11\3\3\6\1\0\10\6\2\0"+
    "\2\3\12\0\6\3\27\6\3\3\1\6\3\0\62\6"+
    "\1\0\1\6\3\0\2\6\2\0\5\6\2\0\1\6"+
    "\1\0\1\6\30\3\3\6\2\3\13\6\5\0\2\3"+
    "\3\6\2\0\12\3\6\6\2\3\6\6\2\3\6\6"+
    "\11\3\7\6\1\3\7\6\1\3\53\6\1\3\16\6"+
    "\6\3\163\6\10\0\1\3\2\0\2\3\12\0\6\3"+
    "\244\6\14\3\27\6\4\3\61\6\u0104\3\156\6\2\3"+
    "\152\6\46\3\7\6\14\3\5\6\5\3\1\6\1\0"+
    "\12\6\1\3\15\6\1\3\5\6\1\3\1\6\1\3"+
    "\2\6\1\3\2\6\1\3\154\6\41\3\153\6\22\3"+
    "\100\6\2\3\66\6\50\3\15\6\3\3\20\0\20\3"+
    "\20\0\3\3\2\6\30\3\3\6\31\3\1\6\6\3"+
    "\5\6\1\3\207\6\2\3\1\0\4\3\1\6\13\3"+
    "\12\0\7\3\32\6\4\3\1\6\1\3\32\6\13\3"+
    "\131\6\3\3\6\6\2\3\6\6\2\3\6\6\2\3"+
    "\3\6\3\3\2\6\3\3\2\6\22\3\3\0\4\3"+
    "\14\6\1\3\32\6\1\3\23\6\1\3\2\6\1\3"+
    "\17\6\2\3\16\6\42\3\173\6\105\3\65\6\210\3"+
    "\1\0\202\3\35\6\3\3\61\6\17\3\1\0\37\3"+
    "\40\6\15\3\36\6\5\3\46\6\5\0\5\3\36\6"+
    "\2\3\44\6\4\3\10\6\1\3\5\6\52\3\236\6"+
    "\2\3\12\0\6\3\44\6\4\3\44\6\4\3\50\6"+
    "\10\3\64\6\234\3\67\6\11\3\26\6\12\3\10\6"+
    "\230\3\6\6\2\3\1\6\1\3\54\6\1\3\2\6"+
    "\3\3\1\6\2\3\27\6\12\3\27\6\11\3\37\6"+
    "\101\3\23\6\1\3\2\6\12\3\26\6\12\3\32\6"+
    "\106\3\70\6\6\3\2\6\100\3\1\6\3\0\1\3"+
    "\2\0\5\3\4\0\4\6\1\3\3\6\1\3\35\6"+
    "\2\3\3\0\4\3\1\0\40\3\35\6\3\3\35\6"+
    "\43\3\10\6\1\3\34\6\2\0\31\3\66\6\12\3"+
    "\26\6\12\3\23\6\15\3\22\6\156\3\111\6\67\3"+
    "\63\6\15\3\63\6\15\3\44\6\4\0\10\3\12\0"+
    "\u0146\3\52\6\1\3\2\0\3\3\2\6\116\3\35\6"+
    "\12\3\1\6\10\3\26\6\13\0\137\3\25\6\33\3"+
    "\27\6\11\3\3\0\65\6\17\0\37\3\12\0\17\3"+
    "\4\0\55\6\13\0\2\3\1\0\17\3\1\0\2\3"+
    "\31\6\7\3\12\0\6\3\3\0\44\6\16\0\1\3"+
    "\12\0\4\3\1\6\2\0\1\6\10\3\43\6\1\0"+
    "\2\3\1\6\11\3\3\0\60\6\16\0\4\6\4\3"+
    "\4\0\1\3\14\0\1\6\1\3\1\6\43\3\22\6"+
    "\1\3\31\6\14\0\6\3\1\0\101\3\7\6\1\3"+
    "\1\6\1\3\4\6\1\3\17\6\1\3\12\6\7\3"+
    "\57\6\14\0\5\3\12\0\6\3\4\0\1\3\10\6"+
    "\2\3\2\6\2\3\26\6\1\3\7\6\1\3\2\6"+
    "\1\3\5\6\1\3\2\0\1\6\7\0\2\3\2\0"+
    "\2\3\3\0\2\3\1\6\6\3\1\0\5\3\5\6"+
    "\2\0\2\3\7\0\3\3\5\0\213\3\65\6\22\0"+
    "\4\6\5\3\12\0\4\3\1\0\3\6\36\3\60\6"+
    "\24\0\2\6\1\3\1\6\10\3\12\0\246\3\57\6"+
    "\7\0\2\3\11\0\27\3\4\6\2\0\42\3\60\6"+
    "\21\0\3\3\1\6\13\3\12\0\46\3\53\6\15\0"+
    "\1\6\7\3\12\0\66\3\33\6\2\3\17\0\4\3"+
    "\12\0\306\3\54\6\17\0\145\3\100\6\12\0\25\3"+
    "\10\6\2\3\1\6\2\3\10\6\1\3\2\6\1\3"+
    "\30\6\6\0\1\3\2\0\2\3\4\0\1\6\1\0"+
    "\1\6\2\0\14\3\12\0\106\3\10\6\2\3\47\6"+
    "\7\0\2\3\7\0\1\6\1\3\1\6\1\0\33\3"+
    "\1\6\12\0\50\6\7\0\1\6\4\0\10\3\1\0"+
    "\10\3\1\6\13\0\56\6\20\0\3\3\1\6\42\3"+
    "\71\6\7\3\11\6\1\3\45\6\10\0\1\3\10\0"+
    "\1\6\17\3\12\0\30\3\36\6\2\3\26\0\1\3"+
    "\16\0\111\3\7\6\1\3\2\6\1\3\46\6\6\0"+
    "\3\3\1\0\1\3\2\0\1\3\7\0\1\6\1\0"+
    "\10\3\12\0\6\3\6\6\1\3\2\6\1\3\40\6"+
    "\5\0\1\3\2\0\1\3\5\0\1\6\7\3\12\0"+
    "\u0136\3\23\6\4\0\271\3\1\6\54\3\4\6\37\3"+
    "\232\6\146\3\157\6\21\3\304\6\274\3\57\6\1\3"+
    "\11\0\307\3\107\6\271\3\71\6\7\3\37\6\1\3"+
    "\12\0\146\3\36\6\2\3\5\0\13\3\60\6\7\0"+
    "\11\3\4\6\14\3\12\0\11\3\25\6\5\3\23\6"+
    "\260\3\100\6\200\3\113\6\4\3\1\0\1\6\67\0"+
    "\7\3\4\0\15\6\100\3\2\6\1\3\1\6\1\0"+
    "\13\3\2\0\16\3\370\6\10\3\326\6\52\3\11\6"+
    "\367\3\37\6\61\3\3\6\21\3\4\6\10\3\u018c\6"+
    "\4\3\153\6\5\3\15\6\3\3\11\6\7\3\12\6"+
    "\3\3\2\0\1\3\4\0\301\3\5\0\3\3\26\0"+
    "\2\3\7\0\36\3\4\0\224\3\3\0\273\3\125\6"+
    "\1\3\107\6\1\3\2\6\2\3\1\6\2\3\2\6"+
    "\2\3\4\6\1\3\14\6\1\3\1\6\1\3\7\6"+
    "\1\3\101\6\1\3\4\6\2\3\10\6\1\3\7\6"+
    "\1\3\34\6\1\3\4\6\1\3\5\6\1\3\1\6"+
    "\3\3\7\6\1\3\u0154\6\2\3\31\6\1\3\31\6"+
    "\1\3\37\6\1\3\31\6\1\3\37\6\1\3\31\6"+
    "\1\3\37\6\1\3\31\6\1\3\37\6\1\3\31\6"+
    "\1\3\10\6\2\3\151\0\4\3\62\0\10\3\1\0"+
    "\16\3\1\0\26\3\5\0\1\3\17\0\120\3\7\0"+
    "\1\3\21\0\2\3\7\0\1\3\2\0\1\3\5\0"+
    "\325\3\55\6\3\3\7\0\7\6\2\3\12\0\4\3"+
    "\1\6\u0171\3\54\6\16\0\5\3\306\6\13\3\7\0"+
    "\51\3\104\6\7\0\1\6\4\3\12\0\u0156\3\1\6"+
    "\117\3\4\6\1\3\33\6\1\3\2\6\1\3\1\6"+
    "\2\3\1\6\1\3\12\6\1\3\4\6\1\3\1\6"+
    "\1\3\1\6\6\3\1\6\4\3\1\6\1\3\1\6"+
    "\1\3\1\6\1\3\3\6\1\3\2\6\1\3\1\6"+
    "\2\3\1\6\1\3\1\6\1\3\1\6\1\3\1\6"+
    "\1\3\1\6\1\3\2\6\1\3\1\6\2\3\4\6"+
    "\1\3\7\6\1\3\4\6\1\3\4\6\1\3\1\6"+
    "\1\3\12\6\1\3\21\6\5\3\3\6\1\3\5\6"+
    "\1\3\21\6\u0134\3\12\0\6\3\336\6\42\3\65\6"+
    "\13\3\336\6\2\3\u0182\6\16\3\u0131\6\37\3\36\6"+
    "\342\3\113\6\266\3\1\0\36\3\140\0\200\3\360\0"+
    "\20\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[31232];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\0\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\2\15\1\16"+
    "\1\17\1\20\1\21\1\4\1\22\1\23\1\24\20\4"+
    "\1\25\1\26\1\0\1\27\1\30\1\0\1\31\1\32"+
    "\1\33\1\0\1\1\1\34\1\0\1\35\1\36\1\37"+
    "\14\4\1\40\1\41\3\4\1\42\7\4\1\30\2\0"+
    "\1\1\1\15\1\43\1\44\13\4\1\45\10\4\1\0"+
    "\1\1\2\4\1\46\3\4\1\47\1\50\2\4\1\51"+
    "\6\4\1\52\1\53\2\4\1\54\13\4\1\55\6\4"+
    "\1\56\1\57\1\60\1\61\1\62\1\63\1\64\2\4"+
    "\1\65\1\66\1\4\1\67\1\70\1\71";

  private static int [] zzUnpackAction() {
    int [] result = new int[165];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\61\0\142\0\223\0\304\0\365\0\61\0\61"+
    "\0\u0126\0\u0157\0\61\0\u0188\0\61\0\u01b9\0\u01ea\0\u021b"+
    "\0\61\0\u024c\0\u027d\0\u02ae\0\u02df\0\61\0\61\0\61"+
    "\0\u0310\0\u0341\0\u0372\0\u03a3\0\u03d4\0\u0405\0\u0436\0\u0467"+
    "\0\u0498\0\u04c9\0\u04fa\0\u052b\0\u055c\0\u058d\0\u05be\0\u05ef"+
    "\0\61\0\61\0\142\0\61\0\61\0\u0620\0\61\0\61"+
    "\0\61\0\u0651\0\u0682\0\61\0\u06b3\0\61\0\61\0\61"+
    "\0\u06e4\0\u0715\0\u0746\0\u0777\0\u07a8\0\u07d9\0\u080a\0\u083b"+
    "\0\u086c\0\u089d\0\u08ce\0\u08ff\0\365\0\365\0\u0930\0\u0961"+
    "\0\u0992\0\365\0\u09c3\0\u09f4\0\u0a25\0\u0a56\0\u0a87\0\u0ab8"+
    "\0\u0ae9\0\304\0\u0b1a\0\u0b4b\0\u0b7c\0\u06b3\0\365\0\365"+
    "\0\u0bad\0\u0bde\0\u0c0f\0\u0c40\0\u0c71\0\u0ca2\0\u0cd3\0\u0d04"+
    "\0\u0d35\0\u0d66\0\u0d97\0\365\0\u0dc8\0\u0df9\0\u0e2a\0\u0e5b"+
    "\0\u0e8c\0\u0ebd\0\u0eee\0\u0f1f\0\u0f50\0\u0b1a\0\u0f81\0\u0fb2"+
    "\0\365\0\u0fe3\0\u1014\0\u1045\0\365\0\365\0\u1076\0\u10a7"+
    "\0\365\0\u10d8\0\u1109\0\u113a\0\u116b\0\u119c\0\u11cd\0\365"+
    "\0\365\0\u11fe\0\u122f\0\365\0\u1260\0\u1291\0\u12c2\0\u12f3"+
    "\0\u1324\0\u1355\0\u1386\0\u13b7\0\u13e8\0\u1419\0\u144a\0\365"+
    "\0\u147b\0\u14ac\0\u14dd\0\u150e\0\u153f\0\u1570\0\365\0\365"+
    "\0\365\0\365\0\365\0\365\0\365\0\u15a1\0\u15d2\0\365"+
    "\0\365\0\u1603\0\365\0\365\0\365";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[165];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\0\1\2\1\3\1\0\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\0"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\2\6\1\37\1\6\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\1\6\1\47\1\50\1\51\1\52\1\2"+
    "\62\0\1\53\1\3\55\0\1\53\23\0\1\54\35\0"+
    "\5\5\1\55\21\5\1\56\31\5\1\6\5\0\1\6"+
    "\10\0\2\6\4\0\1\6\4\0\24\6\2\0\1\6"+
    "\23\0\1\57\60\0\1\60\60\0\1\61\46\0\1\62"+
    "\4\0\1\63\4\0\1\64\52\0\1\65\60\0\1\65"+
    "\1\0\2\20\63\0\1\66\60\0\1\67\60\0\1\70"+
    "\35\0\1\6\5\0\1\6\10\0\2\6\4\0\1\6"+
    "\4\0\1\71\23\6\2\0\2\6\5\0\1\6\10\0"+
    "\2\6\4\0\1\6\4\0\14\6\1\72\7\6\2\0"+
    "\2\6\5\0\1\6\10\0\2\6\4\0\1\6\4\0"+
    "\15\6\1\73\1\74\5\6\2\0\2\6\5\0\1\6"+
    "\10\0\2\6\4\0\1\6\4\0\1\75\14\6\1\76"+
    "\6\6\2\0\2\6\5\0\1\6\10\0\2\6\4\0"+
    "\1\6\4\0\4\6\1\77\17\6\2\0\2\6\5\0"+
    "\1\6\10\0\2\6\4\0\1\6\4\0\12\6\1\100"+
    "\1\6\1\101\7\6\2\0\2\6\5\0\1\6\10\0"+
    "\2\6\4\0\1\6\4\0\1\102\14\6\1\103\3\6"+
    "\1\104\2\6\2\0\2\6\5\0\1\6\10\0\2\6"+
    "\4\0\1\6\4\0\5\6\1\105\6\6\1\106\7\6"+
    "\2\0\2\6\5\0\1\6\10\0\2\6\4\0\1\6"+
    "\4\0\10\6\1\107\13\6\2\0\2\6\5\0\1\6"+
    "\10\0\2\6\4\0\1\6\4\0\15\6\1\110\6\6"+
    "\2\0\2\6\5\0\1\6\10\0\2\6\4\0\1\6"+
    "\4\0\21\6\1\111\2\6\2\0\2\6\5\0\1\6"+
    "\10\0\2\6\4\0\1\6\4\0\16\6\1\112\5\6"+
    "\2\0\2\6\5\0\1\6\10\0\2\6\4\0\1\6"+
    "\4\0\1\113\3\6\1\114\17\6\2\0\2\6\5\0"+
    "\1\6\10\0\2\6\4\0\1\6\4\0\20\6\1\115"+
    "\2\6\1\116\2\0\2\6\5\0\1\6\10\0\2\6"+
    "\4\0\1\6\4\0\16\6\1\117\5\6\2\0\2\6"+
    "\5\0\1\6\10\0\2\6\4\0\1\6\4\0\15\6"+
    "\1\120\6\6\2\0\2\6\5\0\1\6\10\0\2\6"+
    "\4\0\1\6\4\0\7\6\1\121\14\6\2\0\1\6"+
    "\5\5\1\122\21\5\1\56\31\5\11\123\1\124\47\123"+
    "\2\63\1\125\56\63\17\0\2\126\40\0\1\6\5\0"+
    "\1\6\10\0\2\6\4\0\1\127\4\0\24\6\2\0"+
    "\2\6\5\0\1\6\10\0\2\6\4\0\1\6\4\0"+
    "\3\6\1\130\20\6\2\0\2\6\5\0\1\6\10\0"+
    "\2\6\4\0\1\6\4\0\15\6\1\131\6\6\2\0"+
    "\2\6\5\0\1\6\10\0\2\6\4\0\1\6\4\0"+
    "\4\6\1\132\17\6\2\0\2\6\5\0\1\6\10\0"+
    "\2\6\4\0\1\6\4\0\17\6\1\133\4\6\2\0"+
    "\2\6\5\0\1\6\10\0\2\6\4\0\1\6\4\0"+
    "\14\6\1\134\7\6\2\0\2\6\5\0\1\6\10\0"+
    "\2\6\4\0\1\6\4\0\5\6\1\135\16\6\2\0"+
    "\2\6\5\0\1\6\10\0\2\6\4\0\1\6\4\0"+
    "\17\6\1\136\4\6\2\0\2\6\5\0\1\6\10\0"+
    "\2\6\4\0\1\6\4\0\21\6\1\137\2\6\2\0"+
    "\2\6\5\0\1\6\10\0\2\6\4\0\1\6\4\0"+
    "\12\6\1\140\11\6\2\0\2\6\5\0\1\6\10\0"+
    "\2\6\4\0\1\6\4\0\16\6\1\141\5\6\2\0"+
    "\2\6\5\0\1\6\10\0\2\6\4\0\1\6\4\0"+
    "\14\6\1\142\7\6\2\0\2\6\5\0\1\6\10\0"+
    "\2\6\4\0\1\6\4\0\17\6\1\143\4\6\2\0"+
    "\2\6\5\0\1\6\10\0\2\6\4\0\1\6\4\0"+
    "\3\6\1\144\20\6\2\0\2\6\5\0\1\6\10\0"+
    "\2\6\4\0\1\6\4\0\13\6\1\145\10\6\2\0"+
    "\2\6\5\0\1\6\10\0\2\6\4\0\1\6\4\0"+
    "\14\6\1\146\7\6\2\0\2\6\5\0\1\6\10\0"+
    "\2\6\4\0\1\6\4\0\20\6\1\147\3\6\2\0"+
    "\2\6\5\0\1\6\10\0\2\6\4\0\1\6\4\0"+
    "\16\6\1\150\5\6\2\0\2\6\5\0\1\6\10\0"+
    "\2\6\4\0\1\6\4\0\10\6\1\151\13\6\2\0"+
    "\2\6\5\0\1\6\10\0\2\6\4\0\1\6\4\0"+
    "\21\6\1\152\2\6\2\0\2\6\5\0\1\6\10\0"+
    "\2\6\4\0\1\6\4\0\10\6\1\153\13\6\2\0"+
    "\2\6\5\0\1\6\10\0\2\6\4\0\1\6\4\0"+
    "\10\6\1\154\13\6\2\0\1\6\11\123\1\155\60\123"+
    "\1\155\4\123\1\156\42\123\2\0\1\125\56\0\1\6"+
    "\5\0\1\6\10\0\2\6\4\0\1\6\4\0\12\6"+
    "\1\157\11\6\2\0\2\6\5\0\1\6\10\0\2\6"+
    "\4\0\1\6\4\0\1\160\23\6\2\0\2\6\5\0"+
    "\1\6\10\0\2\6\4\0\1\6\4\0\4\6\1\161"+
    "\17\6\2\0\2\6\5\0\1\6\10\0\2\6\4\0"+
    "\1\6\4\0\17\6\1\162\1\163\3\6\2\0\2\6"+
    "\5\0\1\6\10\0\2\6\4\0\1\6\4\0\1\164"+
    "\23\6\2\0\2\6\5\0\1\6\10\0\2\6\4\0"+
    "\1\6\4\0\4\6\1\165\17\6\2\0\2\6\5\0"+
    "\1\6\10\0\2\6\4\0\1\6\4\0\13\6\1\166"+
    "\10\6\2\0\2\6\5\0\1\6\10\0\2\6\4\0"+
    "\1\6\4\0\17\6\1\152\4\6\2\0\2\6\5\0"+
    "\1\6\10\0\2\6\4\0\1\6\4\0\4\6\1\167"+
    "\17\6\2\0\2\6\5\0\1\6\10\0\2\6\4\0"+
    "\1\6\4\0\2\6\1\170\21\6\2\0\2\6\5\0"+
    "\1\6\10\0\2\6\4\0\1\6\4\0\20\6\1\171"+
    "\3\6\2\0\2\6\5\0\1\6\10\0\2\6\4\0"+
    "\1\6\4\0\1\6\1\172\22\6\2\0\2\6\5\0"+
    "\1\6\10\0\2\6\4\0\1\6\4\0\3\6\1\173"+
    "\20\6\2\0\2\6\5\0\1\6\10\0\2\6\4\0"+
    "\1\6\4\0\21\6\1\174\2\6\2\0\2\6\5\0"+
    "\1\6\10\0\2\6\4\0\1\6\4\0\10\6\1\175"+
    "\10\6\1\176\2\6\2\0\2\6\5\0\1\6\10\0"+
    "\2\6\4\0\1\6\4\0\20\6\1\177\3\6\2\0"+
    "\2\6\5\0\1\6\10\0\2\6\4\0\1\6\4\0"+
    "\4\6\1\200\17\6\2\0\2\6\5\0\1\6\10\0"+
    "\2\6\4\0\1\6\4\0\3\6\1\201\20\6\2\0"+
    "\2\6\5\0\1\6\10\0\2\6\4\0\1\6\4\0"+
    "\12\6\1\202\11\6\2\0\1\6\11\123\1\155\4\123"+
    "\1\2\42\123\1\6\5\0\1\6\10\0\2\6\4\0"+
    "\1\6\4\0\4\6\1\203\17\6\2\0\2\6\5\0"+
    "\1\6\10\0\2\6\4\0\1\6\4\0\11\6\1\204"+
    "\12\6\2\0\2\6\5\0\1\6\10\0\2\6\4\0"+
    "\1\6\4\0\20\6\1\205\3\6\2\0\2\6\5\0"+
    "\1\6\10\0\2\6\4\0\1\6\4\0\10\6\1\206"+
    "\13\6\2\0\2\6\5\0\1\6\10\0\2\6\4\0"+
    "\1\6\4\0\21\6\1\207\2\6\2\0\2\6\5\0"+
    "\1\6\10\0\2\6\4\0\1\6\4\0\1\210\23\6"+
    "\2\0\2\6\5\0\1\6\10\0\2\6\4\0\1\6"+
    "\4\0\20\6\1\211\3\6\2\0\2\6\5\0\1\6"+
    "\10\0\2\6\4\0\1\6\4\0\4\6\1\212\17\6"+
    "\2\0\2\6\5\0\1\6\10\0\2\6\4\0\1\6"+
    "\4\0\15\6\1\213\6\6\2\0\2\6\5\0\1\6"+
    "\10\0\2\6\4\0\1\6\4\0\16\6\1\214\5\6"+
    "\2\0\2\6\5\0\1\6\10\0\2\6\4\0\1\6"+
    "\4\0\14\6\1\215\7\6\2\0\2\6\5\0\1\6"+
    "\10\0\2\6\4\0\1\6\4\0\2\6\1\216\21\6"+
    "\2\0\2\6\5\0\1\6\10\0\2\6\4\0\1\6"+
    "\4\0\2\6\1\217\21\6\2\0\2\6\5\0\1\6"+
    "\10\0\2\6\4\0\1\6\4\0\4\6\1\220\17\6"+
    "\2\0\2\6\5\0\1\6\10\0\2\6\4\0\1\6"+
    "\4\0\1\221\23\6\2\0\2\6\5\0\1\6\10\0"+
    "\2\6\4\0\1\6\4\0\1\222\23\6\2\0\2\6"+
    "\5\0\1\6\10\0\2\6\4\0\1\6\4\0\14\6"+
    "\1\223\7\6\2\0\2\6\5\0\1\6\10\0\2\6"+
    "\4\0\1\6\4\0\12\6\1\224\11\6\2\0\2\6"+
    "\5\0\1\6\10\0\2\6\4\0\1\6\4\0\2\6"+
    "\1\225\21\6\2\0\2\6\5\0\1\6\10\0\2\6"+
    "\4\0\1\6\4\0\10\6\1\226\13\6\2\0\2\6"+
    "\5\0\1\6\10\0\2\6\4\0\1\6\4\0\16\6"+
    "\1\227\5\6\2\0\2\6\5\0\1\6\10\0\2\6"+
    "\4\0\1\6\4\0\13\6\1\230\10\6\2\0\2\6"+
    "\5\0\1\6\10\0\2\6\4\0\1\6\4\0\14\6"+
    "\1\231\7\6\2\0\2\6\5\0\1\6\10\0\2\6"+
    "\4\0\1\6\4\0\6\6\1\232\15\6\2\0\2\6"+
    "\5\0\1\6\10\0\2\6\4\0\1\6\4\0\20\6"+
    "\1\233\3\6\2\0\2\6\5\0\1\6\10\0\2\6"+
    "\4\0\1\6\4\0\7\6\1\234\14\6\2\0\2\6"+
    "\5\0\1\6\10\0\2\6\4\0\1\6\4\0\14\6"+
    "\1\235\7\6\2\0\2\6\5\0\1\6\10\0\2\6"+
    "\4\0\1\6\4\0\14\6\1\236\7\6\2\0\2\6"+
    "\5\0\1\6\10\0\2\6\4\0\1\6\4\0\21\6"+
    "\1\237\2\6\2\0\2\6\5\0\1\6\10\0\2\6"+
    "\4\0\1\6\4\0\20\6\1\240\3\6\2\0\2\6"+
    "\5\0\1\6\10\0\2\6\4\0\1\6\4\0\7\6"+
    "\1\241\14\6\2\0\2\6\5\0\1\6\10\0\2\6"+
    "\4\0\1\6\4\0\15\6\1\242\6\6\2\0\2\6"+
    "\5\0\1\6\10\0\2\6\4\0\1\6\4\0\20\6"+
    "\1\243\3\6\2\0\2\6\5\0\1\6\10\0\2\6"+
    "\4\0\1\6\4\0\4\6\1\244\17\6\2\0\2\6"+
    "\5\0\1\6\10\0\2\6\4\0\1\6\4\0\14\6"+
    "\1\245\7\6\2\0\1\6";

  private static int [] zzUnpackTrans() {
    int [] result = new int[5684];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\2\1\1\0\1\1\2\11\2\1\1\11"+
    "\1\1\1\11\3\1\1\11\4\1\3\11\20\1\2\11"+
    "\1\0\2\11\1\0\3\11\1\0\1\1\1\11\1\0"+
    "\3\11\32\1\2\0\30\1\1\0\70\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[165];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
	StringBuffer string = new StringBuffer();

	private Symbol symbol(int type) {
		return new Symbol(type, yyline, yycolumn);
	}
	private Symbol symbol(int type, Object value) {
		return new Symbol(type, yyline, yycolumn, value);
	}


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { /* ignore */
            }
            // fall through
          case 58: break;
          case 2:
            { return symbol( sym.NEWLINE );
            }
            // fall through
          case 59: break;
          case 3:
            { return symbol( sym.NOT 		);
            }
            // fall through
          case 60: break;
          case 4:
            { return symbol( sym.IDENTIFIER	);
            }
            // fall through
          case 61: break;
          case 5:
            { return symbol( sym.LPAREN 	);
            }
            // fall through
          case 62: break;
          case 6:
            { return symbol( sym.RPAREN 	);
            }
            // fall through
          case 63: break;
          case 7:
            { return symbol( sym.TIMES	 	);
            }
            // fall through
          case 64: break;
          case 8:
            { return symbol( sym.PLUS		);
            }
            // fall through
          case 65: break;
          case 9:
            { return symbol( sym.COMMA   );
            }
            // fall through
          case 66: break;
          case 10:
            { return symbol( sym.MINUS	 	);
            }
            // fall through
          case 67: break;
          case 11:
            { return symbol( sym.DOT   	 );
            }
            // fall through
          case 68: break;
          case 12:
            { return symbol( sym.DIVISION 	);
            }
            // fall through
          case 69: break;
          case 13:
            { return symbol( sym.NUMBERLIT	);
            }
            // fall through
          case 70: break;
          case 14:
            { return symbol( sym.COLON   );
            }
            // fall through
          case 71: break;
          case 15:
            { return symbol( sym.LANGLE 	);
            }
            // fall through
          case 72: break;
          case 16:
            { return symbol( sym.EQ			);
            }
            // fall through
          case 73: break;
          case 17:
            { return symbol( sym.RANGLE 	);
            }
            // fall through
          case 74: break;
          case 18:
            { return symbol( sym.LSQUARE 	);
            }
            // fall through
          case 75: break;
          case 19:
            { return symbol( sym.RSQUARE 	);
            }
            // fall through
          case 76: break;
          case 20:
            { return symbol( sym.POW 		);
            }
            // fall through
          case 77: break;
          case 21:
            { return symbol( sym.LCURLY 	);
            }
            // fall through
          case 78: break;
          case 22:
            { return symbol( sym.RCURLY 	);
            }
            // fall through
          case 79: break;
          case 23:
            { return symbol( sym.NOTEQ		);
            }
            // fall through
          case 80: break;
          case 24:
            { return symbol( sym.STRINGLIT 	);
            }
            // fall through
          case 81: break;
          case 25:
            { return symbol( sym.TIMESEQ 	);
            }
            // fall through
          case 82: break;
          case 26:
            { return symbol( sym.PLUSEQ 	);
            }
            // fall through
          case 83: break;
          case 27:
            { return symbol( sym.MINUSEQ 	);
            }
            // fall through
          case 84: break;
          case 28:
            { return symbol( sym.DIVISIONEQ	);
            }
            // fall through
          case 85: break;
          case 29:
            { return symbol( sym.LEQ 		);
            }
            // fall through
          case 86: break;
          case 30:
            { return symbol( sym.EQEQ 		);
            }
            // fall through
          case 87: break;
          case 31:
            { return symbol( sym.GEQ 		);
            }
            // fall through
          case 88: break;
          case 32:
            { return symbol( sym.IF 		);
            }
            // fall through
          case 89: break;
          case 33:
            { return symbol( sym.IN			);
            }
            // fall through
          case 90: break;
          case 34:
            { return symbol( sym.OR 		);
            }
            // fall through
          case 91: break;
          case 35:
            { return symbol( sym.NAN		);
            }
            // fall through
          case 92: break;
          case 36:
            { return symbol( sym.AND 		);
            }
            // fall through
          case 93: break;
          case 37:
            { return symbol( sym.MOD 		);
            }
            // fall through
          case 94: break;
          case 38:
            { return symbol( sym.CASE 		);
            }
            // fall through
          case 95: break;
          case 39:
            { return symbol( sym.ELSE 		);
            }
            // fall through
          case 96: break;
          case 40:
            { return symbol( sym.ENUM 		);
            }
            // fall through
          case 97: break;
          case 41:
            { return symbol( sym.LIST		);
            }
            // fall through
          case 98: break;
          case 42:
            { return symbol( sym.BOOLEANLIT	);
            }
            // fall through
          case 99: break;
          case 43:
            { return symbol( sym.VOID		);
            }
            // fall through
          case 100: break;
          case 44:
            { return symbol(sym.BREAK);
            }
            // fall through
          case 101: break;
          case 45:
            { return symbol( sym.WHILE 		);
            }
            // fall through
          case 102: break;
          case 46:
            { return symbol( sym.NUMBER		);
            }
            // fall through
          case 103: break;
          case 47:
            { return symbol( sym.RANDOM		);
            }
            // fall through
          case 104: break;
          case 48:
            { return symbol(sym.RETURN);
            }
            // fall through
          case 105: break;
          case 49:
            { return symbol( sym.STRING		);
            }
            // fall through
          case 106: break;
          case 50:
            { return symbol( sym.STRUCT 	);
            }
            // fall through
          case 107: break;
          case 51:
            { return symbol( sym.SWITCH 	);
            }
            // fall through
          case 108: break;
          case 52:
            { return symbol( sym.BOOLEAN	);
            }
            // fall through
          case 109: break;
          case 53:
            { return symbol( sym.DEFAULT    );
            }
            // fall through
          case 110: break;
          case 54:
            { return symbol( sym.FOREACH 	);
            }
            // fall through
          case 111: break;
          case 55:
            { return symbol( sym.CONSTANT	);
            }
            // fall through
          case 112: break;
          case 56:
            { return symbol(sym.CONTINUE	);
            }
            // fall through
          case 113: break;
          case 57:
            { return symbol( sym.FUNCTION	);
            }
            // fall through
          case 114: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
