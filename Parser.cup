import java_cup.runtime.*;
import java.io.*;

/* Preliminaries to set up and use the scanner.  */

/* Terminals */
terminal            INCLUDE, FILENAME; 
terminal            NAN;
terminal			BREAK, CONTINUE, RETURN, IN;
terminal			NUMBERLIT, BOOLEANLIT, STRINGLIT, IDENTIFER;
terminal			EQ;
terminal            EQEQ, NOTEQ, LEQ, GEQ;
terminal			PLUS, MINUS, TIMES, DIVISION;
terminal			PLUSEQ, MINUSEQ, TIMESEQ, DIVISIONEQ;
terminal			LPAREN, RPAREN, LCURLY, RCURLY, LSQUARE, RSQUARE, RANGLE, LANGLE;
terminal			NOT;
terminal			MOD, OR, AND;
terminal			POW;
terminal			WHILE, FOREACH, SWITCH, CASE, DEFAULT;
terminal			IF, ELSE;
terminal			IDENTIFIER;
terminal			UMINUS;
terminal            RANDOM;
terminal            COLON, COMMA, DOT, NEWLINE;
terminal			CONSTANT;
terminal			FUNCTION;
terminal			VOID;
terminal Number	    NUMBER;
terminal String		STRING;
terminal Boolean	BOOLEAN;
terminal List		LIST;
terminal Enum		ENUM;
terminal Struct		STRUCT;

/* Non terminals */
non terminal         program;
non terminal         includes;
non terminal         declarations, declaration;
non terminal         primitiv_type;
non terminal         type;
non terminal         expression;
non terminal   arithmetic_expression;
non terminal   term, factor, base, value;
non terminal         index;
non terminal  deep, deeper, eval_symbol, logical_symbol;
non terminal         number_decl;
non terminal         string_decl;
non terminal         bool_decl;
non terminal         list_decl, list_initialize, element_list, elements;
non terminal         struct_decl, struct_member, struct_members;
non terminal         enum_decl, enum_members, enum_member;
non terminal         const_number_decl; 
non terminal         const_string_decl; 
non terminal         const_bool_decl;
non terminal         function_decl, return_type, formal_parameter_list, multiple_formal_parameters, formal_parameter;
non terminal         jump_stmt, return_stmt;
non terminal         stmt_list, stmt;
non terminal         if_stmt, else_stmt;
non terminal         switch_stmt, case_stmts, case_stmt;
non terminal         while_stmt;
non terminal         foreach_stmt;
non terminal         block;
non terminal         assign_stmt;
non terminal         ternary_stmt;
non terminal         func_call, func_call_type, actual_parameter_list, multiple_actual_parameters, actual_parameter;
non terminal         compound_assign_stmt, compound_operation;
non terminal         random_decl;

/* Precedences */
precedence left PLUS, MINUS;
precedence left TIMES, DIVISION, MOD;
precedence left POW;

/* Grammar */
program      ::= includes declarations;
includes     ::= INCLUDE FILENAME NEWLINE includes | ;
declarations ::= declaration declarations | ; 
declaration  ::= function_decl 
               | struct_decl
               | enum_decl
               | const_number_decl
               | const_string_decl
               | const_bool_decl;

primitiv_type ::= NUMBER | STRING | BOOLEAN;
type ::= primitiv_type | LIST LANGLE type RANGLE;


expression ::= expression logical_symbol deep 
             | deep;
deep       ::= NOT deeper 
             | deeper;
deeper     ::= arithmetic_expression eval_symbol arithmetic_expression
             | arithmetic_expression;
arithmetic_expression ::= arithmetic_expression PLUS term 
                        | arithmetic_expression MINUS term 
                        | term;
term                  ::= term TIMES factor 
                        | term DIVISION factor 
                        | term MOD factor 
                        | factor;
factor                ::= factor POW arithmetic_expression 
                        | base;
base                  ::= UMINUS value
                        | value;
value                 ::= LPAREN expression RPAREN 
                        | NAN
                        | NUMBERLIT
                        | STRINGLIT
                        | BOOLEANLIT
                        | IDENTIFIER 
                        | IDENTIFIER func_call_type 
                        | func_call
                        | IDENTIFIER LSQUARE index RSQUARE;                        

eval_symbol     ::= EQEQ | NOTEQ | LEQ | GEQ | LANGLE | RANGLE;
logical_symbol  ::= AND | OR;

number_decl     ::= NUMBER IDENTIFER EQ expression NEWLINE;
string_decl     ::= STRING IDENTIFER EQ expression NEWLINE;
bool_decl       ::= BOOLEAN IDENTIFER EQ expression NEWLINE;
list_decl       ::= LIST LANGLE type RANGLE IDENTIFER list_initialize NEWLINE;

list_initialize ::= EQ LCURLY element_list RCURLY | ;
element_list    ::= expression elements | ;
elements        ::= COMMA expression elements | ;

struct_decl     ::= STRUCT IDENTIFER LCURLY struct_members RCURLY NEWLINE;
struct_members  ::= struct_member 
                  | struct_member struct_members;
struct_member   ::= primitiv_type IDENTIFER NEWLINE 
                  | LIST LANGLE primitiv_type RANGLE IDENTIFER NEWLINE;


enum_decl    ::= ENUM IDENTIFER LCURLY enum_members RCURLY NEWLINE;
enum_members ::= enum_member 
               | enum_member enum_members;
enum_member  ::= IDENTIFER NEWLINE 
               | IDENTIFER EQ NUMBER NEWLINE;

const_number_decl ::= CONSTANT number_decl;
const_string_decl ::= CONSTANT string_decl;
const_bool_decl   ::= CONSTANT bool_decl;


function_decl               ::= FUNCTION return_type IDENTIFER LPAREN formal_parameter_list RPAREN LCURLY stmt_list RCURLY;
return_type                 ::= primitiv_type | VOID;
formal_parameter_list       ::= formal_parameter multiple_formal_parameters | ;
multiple_formal_parameters  ::= COMMA formal_parameter multiple_formal_parameters | ;
formal_parameter            ::= type IDENTIFER;

stmt_list ::= stmt_list stmt NEWLINE | stmt NEWLINE;
stmt    ::= if_stmt 
          | switch_stmt  
          | while_stmt 
          | foreach_stmt 
          | assign_stmt 
          | ternary_stmt 
          | number_decl 
          | string_decl 
          | bool_decl 
          | list_decl 
          | const_number_decl
          | const_string_decl
          | const_bool_decl
          | random_decl  
          | jump_stmt 
          | compound_assign_stmt;

jump_stmt   ::= return_stmt | BREAK | CONTINUE;
return_stmt ::= RETURN | RETURN expression;



switch_stmt     ::= SWITCH expression LPAREN case_stmts DEFAULT COLON stmt_list RPAREN; 
case_stmts      ::= case_stmt case_stmts | ;
case_stmt       ::= CASE IDENTIFIER COLON | CASE IDENTIFIER COLON stmt_list;

if_stmt         ::= IF expression block else_stmt NEWLINE;
else_stmt       ::= ELSE block | ;

while_stmt      ::= WHILE expression block NEWLINE;

foreach_stmt    ::= FOREACH type IDENTIFER IN IDENTIFER block;

block           ::= NEWLINE stmt | LCURLY stmt_list RCURLY;


assign_stmt          ::= IDENTIFER EQ expression NEWLINE;
ternary_stmt         ::= type IDENTIFIER EQ expression IF expression ELSE expression NEWLINE;
compound_assign_stmt ::= IDENTIFIER compound_operation expression;
compound_operation   ::= PLUSEQ | MINUSEQ | TIMESEQ | DIVISIONEQ;


func_call                   ::= IDENTIFIER LPAREN actual_parameter_list RPAREN; 
func_call_type              ::= DOT func_call;
actual_parameter_list       ::= actual_parameter multiple_actual_parameters | ;
multiple_actual_parameters  ::= COMMA actual_parameter multiple_actual_parameters | ; 
actual_parameter            ::= expression; //Ã†NDRING

random_decl ::= RANDOM IDENTIFIER EQ RANDOM func_call_type; 




