//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.3
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Simpleton.g4 by ANTLR 4.9.3

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using IToken = Antlr4.Runtime.IToken;
using ParserRuleContext = Antlr4.Runtime.ParserRuleContext;

/// <summary>
/// This class provides an empty implementation of <see cref="ISimpletonVisitor{Result}"/>,
/// which can be extended to create a visitor which only needs to handle a subset
/// of the available methods.
/// </summary>
/// <typeparam name="Result">The return type of the visit operation.</typeparam>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.3")]
[System.Diagnostics.DebuggerNonUserCode]
public partial class SimpletonBaseVisitor<Result> : AbstractParseTreeVisitor<Result>, ISimpletonVisitor<Result>
{
    /// <summary>
    /// Visit a parse tree produced by <see cref="SimpletonParser.program"/>.
    /// <para>
    /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
    /// on <paramref name="context"/>.
    /// </para>
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    public virtual Result VisitProgram([NotNull] SimpletonParser.ProgramContext context) { return VisitChildren(context); }
    /// <summary>
    /// Visit a parse tree produced by <see cref="SimpletonParser.declaration"/>.
    /// <para>
    /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
    /// on <paramref name="context"/>.
    /// </para>
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    public virtual Result VisitDeclaration([NotNull] SimpletonParser.DeclarationContext context) { return VisitChildren(context); }
    /// <summary>
    /// Visit a parse tree produced by <see cref="SimpletonParser.primitiv_type"/>.
    /// <para>
    /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
    /// on <paramref name="context"/>.
    /// </para>
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    public virtual Result VisitPrimitiv_type([NotNull] SimpletonParser.Primitiv_typeContext context) { return VisitChildren(context); }
    /// <summary>
    /// Visit a parse tree produced by <see cref="SimpletonParser.type"/>.
    /// <para>
    /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
    /// on <paramref name="context"/>.
    /// </para>
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    public virtual Result VisitType([NotNull] SimpletonParser.TypeContext context) { return VisitChildren(context); }
    /// <summary>
    /// Visit a parse tree produced by the <c>IdentifierCall</c>
    /// labeled alternative in <see cref="SimpletonParser.expr"/>.
    /// <para>
    /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
    /// on <paramref name="context"/>.
    /// </para>
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    public virtual Result VisitIdentifierCall([NotNull] SimpletonParser.IdentifierCallContext context) { return VisitChildren(context); }
    /// <summary>
    /// Visit a parse tree produced by the <c>FuncCall</c>
    /// labeled alternative in <see cref="SimpletonParser.expr"/>.
    /// <para>
    /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
    /// on <paramref name="context"/>.
    /// </para>
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    public virtual Result VisitFuncCall([NotNull] SimpletonParser.FuncCallContext context) { return VisitChildren(context); }
    /// <summary>
    /// Visit a parse tree produced by the <c>ConstantLiteral</c>
    /// labeled alternative in <see cref="SimpletonParser.expr"/>.
    /// <para>
    /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
    /// on <paramref name="context"/>.
    /// </para>
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    public virtual Result VisitConstantLiteral([NotNull] SimpletonParser.ConstantLiteralContext context) { return VisitChildren(context); }
    /// <summary>
    /// Visit a parse tree produced by the <c>NaNExpr</c>
    /// labeled alternative in <see cref="SimpletonParser.expr"/>.
    /// <para>
    /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
    /// on <paramref name="context"/>.
    /// </para>
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    public virtual Result VisitNaNExpr([NotNull] SimpletonParser.NaNExprContext context) { return VisitChildren(context); }
    /// <summary>
    /// Visit a parse tree produced by the <c>ParensExpr</c>
    /// labeled alternative in <see cref="SimpletonParser.expr"/>.
    /// <para>
    /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
    /// on <paramref name="context"/>.
    /// </para>
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    public virtual Result VisitParensExpr([NotNull] SimpletonParser.ParensExprContext context) { return VisitChildren(context); }
    /// <summary>
    /// Visit a parse tree produced by the <c>InfixExpr</c>
    /// labeled alternative in <see cref="SimpletonParser.expr"/>.
    /// <para>
    /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
    /// on <paramref name="context"/>.
    /// </para>
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    public virtual Result VisitInfixExpr([NotNull] SimpletonParser.InfixExprContext context) { return VisitChildren(context); }
    /// <summary>
    /// Visit a parse tree produced by the <c>UnaryExpr</c>
    /// labeled alternative in <see cref="SimpletonParser.expr"/>.
    /// <para>
    /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
    /// on <paramref name="context"/>.
    /// </para>
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    public virtual Result VisitUnaryExpr([NotNull] SimpletonParser.UnaryExprContext context) { return VisitChildren(context); }
    /// <summary>
    /// Visit a parse tree produced by <see cref="SimpletonParser.id"/>.
    /// <para>
    /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
    /// on <paramref name="context"/>.
    /// </para>
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    public virtual Result VisitId([NotNull] SimpletonParser.IdContext context) { return VisitChildren(context); }
    /// <summary>
    /// Visit a parse tree produced by <see cref="SimpletonParser.ids"/>.
    /// <para>
    /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
    /// on <paramref name="context"/>.
    /// </para>
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    public virtual Result VisitIds([NotNull] SimpletonParser.IdsContext context) { return VisitChildren(context); }
    /// <summary>
    /// Visit a parse tree produced by <see cref="SimpletonParser.subscript"/>.
    /// <para>
    /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
    /// on <paramref name="context"/>.
    /// </para>
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    public virtual Result VisitSubscript([NotNull] SimpletonParser.SubscriptContext context) { return VisitChildren(context); }
    /// <summary>
    /// Visit a parse tree produced by <see cref="SimpletonParser.func_call"/>.
    /// <para>
    /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
    /// on <paramref name="context"/>.
    /// </para>
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    public virtual Result VisitFunc_call([NotNull] SimpletonParser.Func_callContext context) { return VisitChildren(context); }
    /// <summary>
    /// Visit a parse tree produced by <see cref="SimpletonParser.actual_parameter_list"/>.
    /// <para>
    /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
    /// on <paramref name="context"/>.
    /// </para>
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    public virtual Result VisitActual_parameter_list([NotNull] SimpletonParser.Actual_parameter_listContext context) { return VisitChildren(context); }
    /// <summary>
    /// Visit a parse tree produced by <see cref="SimpletonParser.constant"/>.
    /// <para>
    /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
    /// on <paramref name="context"/>.
    /// </para>
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    public virtual Result VisitConstant([NotNull] SimpletonParser.ConstantContext context) { return VisitChildren(context); }
    /// <summary>
    /// Visit a parse tree produced by <see cref="SimpletonParser.variable_decl"/>.
    /// <para>
    /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
    /// on <paramref name="context"/>.
    /// </para>
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    public virtual Result VisitVariable_decl([NotNull] SimpletonParser.Variable_declContext context) { return VisitChildren(context); }
    /// <summary>
    /// Visit a parse tree produced by <see cref="SimpletonParser.const_variable_decl"/>.
    /// <para>
    /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
    /// on <paramref name="context"/>.
    /// </para>
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    public virtual Result VisitConst_variable_decl([NotNull] SimpletonParser.Const_variable_declContext context) { return VisitChildren(context); }
    /// <summary>
    /// Visit a parse tree produced by <see cref="SimpletonParser.list_decl"/>.
    /// <para>
    /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
    /// on <paramref name="context"/>.
    /// </para>
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    public virtual Result VisitList_decl([NotNull] SimpletonParser.List_declContext context) { return VisitChildren(context); }
    /// <summary>
    /// Visit a parse tree produced by <see cref="SimpletonParser.list_initialize"/>.
    /// <para>
    /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
    /// on <paramref name="context"/>.
    /// </para>
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    public virtual Result VisitList_initialize([NotNull] SimpletonParser.List_initializeContext context) { return VisitChildren(context); }
    /// <summary>
    /// Visit a parse tree produced by <see cref="SimpletonParser.struct_decl"/>.
    /// <para>
    /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
    /// on <paramref name="context"/>.
    /// </para>
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    public virtual Result VisitStruct_decl([NotNull] SimpletonParser.Struct_declContext context) { return VisitChildren(context); }
    /// <summary>
    /// Visit a parse tree produced by <see cref="SimpletonParser.struct_member"/>.
    /// <para>
    /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
    /// on <paramref name="context"/>.
    /// </para>
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    public virtual Result VisitStruct_member([NotNull] SimpletonParser.Struct_memberContext context) { return VisitChildren(context); }
    /// <summary>
    /// Visit a parse tree produced by <see cref="SimpletonParser.enum_decl"/>.
    /// <para>
    /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
    /// on <paramref name="context"/>.
    /// </para>
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    public virtual Result VisitEnum_decl([NotNull] SimpletonParser.Enum_declContext context) { return VisitChildren(context); }
    /// <summary>
    /// Visit a parse tree produced by <see cref="SimpletonParser.enum_member"/>.
    /// <para>
    /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
    /// on <paramref name="context"/>.
    /// </para>
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    public virtual Result VisitEnum_member([NotNull] SimpletonParser.Enum_memberContext context) { return VisitChildren(context); }
    /// <summary>
    /// Visit a parse tree produced by <see cref="SimpletonParser.function_decl"/>.
    /// <para>
    /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
    /// on <paramref name="context"/>.
    /// </para>
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    public virtual Result VisitFunction_decl([NotNull] SimpletonParser.Function_declContext context) { return VisitChildren(context); }
    /// <summary>
    /// Visit a parse tree produced by <see cref="SimpletonParser.return_type"/>.
    /// <para>
    /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
    /// on <paramref name="context"/>.
    /// </para>
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    public virtual Result VisitReturn_type([NotNull] SimpletonParser.Return_typeContext context) { return VisitChildren(context); }
    /// <summary>
    /// Visit a parse tree produced by <see cref="SimpletonParser.formal_parameter"/>.
    /// <para>
    /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
    /// on <paramref name="context"/>.
    /// </para>
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    public virtual Result VisitFormal_parameter([NotNull] SimpletonParser.Formal_parameterContext context) { return VisitChildren(context); }
    /// <summary>
    /// Visit a parse tree produced by <see cref="SimpletonParser.stmt"/>.
    /// <para>
    /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
    /// on <paramref name="context"/>.
    /// </para>
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    public virtual Result VisitStmt([NotNull] SimpletonParser.StmtContext context) { return VisitChildren(context); }
    /// <summary>
    /// Visit a parse tree produced by <see cref="SimpletonParser.jump_stmt"/>.
    /// <para>
    /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
    /// on <paramref name="context"/>.
    /// </para>
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    public virtual Result VisitJump_stmt([NotNull] SimpletonParser.Jump_stmtContext context) { return VisitChildren(context); }
    /// <summary>
    /// Visit a parse tree produced by <see cref="SimpletonParser.return_stmt"/>.
    /// <para>
    /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
    /// on <paramref name="context"/>.
    /// </para>
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    public virtual Result VisitReturn_stmt([NotNull] SimpletonParser.Return_stmtContext context) { return VisitChildren(context); }
    /// <summary>
    /// Visit a parse tree produced by <see cref="SimpletonParser.switch_stmt"/>.
    /// <para>
    /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
    /// on <paramref name="context"/>.
    /// </para>
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    public virtual Result VisitSwitch_stmt([NotNull] SimpletonParser.Switch_stmtContext context) { return VisitChildren(context); }
    /// <summary>
    /// Visit a parse tree produced by <see cref="SimpletonParser.switch_case"/>.
    /// <para>
    /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
    /// on <paramref name="context"/>.
    /// </para>
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    public virtual Result VisitSwitch_case([NotNull] SimpletonParser.Switch_caseContext context) { return VisitChildren(context); }
    /// <summary>
    /// Visit a parse tree produced by <see cref="SimpletonParser.switch_case_default"/>.
    /// <para>
    /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
    /// on <paramref name="context"/>.
    /// </para>
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    public virtual Result VisitSwitch_case_default([NotNull] SimpletonParser.Switch_case_defaultContext context) { return VisitChildren(context); }
    /// <summary>
    /// Visit a parse tree produced by <see cref="SimpletonParser.if_else_stmt"/>.
    /// <para>
    /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
    /// on <paramref name="context"/>.
    /// </para>
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    public virtual Result VisitIf_else_stmt([NotNull] SimpletonParser.If_else_stmtContext context) { return VisitChildren(context); }
    /// <summary>
    /// Visit a parse tree produced by <see cref="SimpletonParser.else_if_stmt"/>.
    /// <para>
    /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
    /// on <paramref name="context"/>.
    /// </para>
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    public virtual Result VisitElse_if_stmt([NotNull] SimpletonParser.Else_if_stmtContext context) { return VisitChildren(context); }
    /// <summary>
    /// Visit a parse tree produced by <see cref="SimpletonParser.else_stmt"/>.
    /// <para>
    /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
    /// on <paramref name="context"/>.
    /// </para>
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    public virtual Result VisitElse_stmt([NotNull] SimpletonParser.Else_stmtContext context) { return VisitChildren(context); }
    /// <summary>
    /// Visit a parse tree produced by <see cref="SimpletonParser.while_stmt"/>.
    /// <para>
    /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
    /// on <paramref name="context"/>.
    /// </para>
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    public virtual Result VisitWhile_stmt([NotNull] SimpletonParser.While_stmtContext context) { return VisitChildren(context); }
    /// <summary>
    /// Visit a parse tree produced by <see cref="SimpletonParser.foreach_stmt"/>.
    /// <para>
    /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
    /// on <paramref name="context"/>.
    /// </para>
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    public virtual Result VisitForeach_stmt([NotNull] SimpletonParser.Foreach_stmtContext context) { return VisitChildren(context); }
    /// <summary>
    /// Visit a parse tree produced by <see cref="SimpletonParser.block"/>.
    /// <para>
    /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
    /// on <paramref name="context"/>.
    /// </para>
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    public virtual Result VisitBlock([NotNull] SimpletonParser.BlockContext context) { return VisitChildren(context); }
    /// <summary>
    /// Visit a parse tree produced by <see cref="SimpletonParser.assign_stmt"/>.
    /// <para>
    /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
    /// on <paramref name="context"/>.
    /// </para>
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    public virtual Result VisitAssign_stmt([NotNull] SimpletonParser.Assign_stmtContext context) { return VisitChildren(context); }
    /// <summary>
    /// Visit a parse tree produced by <see cref="SimpletonParser.ternary_stmt"/>.
    /// <para>
    /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
    /// on <paramref name="context"/>.
    /// </para>
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    public virtual Result VisitTernary_stmt([NotNull] SimpletonParser.Ternary_stmtContext context) { return VisitChildren(context); }
    /// <summary>
    /// Visit a parse tree produced by <see cref="SimpletonParser.compound_assign_stmt"/>.
    /// <para>
    /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
    /// on <paramref name="context"/>.
    /// </para>
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    public virtual Result VisitCompound_assign_stmt([NotNull] SimpletonParser.Compound_assign_stmtContext context) { return VisitChildren(context); }
    /// <summary>
    /// Visit a parse tree produced by <see cref="SimpletonParser.id_assign"/>.
    /// <para>
    /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
    /// on <paramref name="context"/>.
    /// </para>
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    public virtual Result VisitId_assign([NotNull] SimpletonParser.Id_assignContext context) { return VisitChildren(context); }
    /// <summary>
    /// Visit a parse tree produced by <see cref="SimpletonParser.ids_assign"/>.
    /// <para>
    /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
    /// on <paramref name="context"/>.
    /// </para>
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    public virtual Result VisitIds_assign([NotNull] SimpletonParser.Ids_assignContext context) { return VisitChildren(context); }
}
