//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.3
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Simpleton.g4 by ANTLR 4.9.3

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.3")]
public partial class SimpletonParser : Parser
{
    protected static DFA[] decisionToDFA;
    protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
    public const int
        T__0 = 1, T__1 = 2, T__2 = 3, T__3 = 4, T__4 = 5, T__5 = 6, T__6 = 7, T__7 = 8, T__8 = 9,
        T__9 = 10, T__10 = 11, T__11 = 12, T__12 = 13, T__13 = 14, T__14 = 15, T__15 = 16, T__16 = 17,
        T__17 = 18, T__18 = 19, T__19 = 20, T__20 = 21, T__21 = 22, T__22 = 23, T__23 = 24,
        T__24 = 25, T__25 = 26, T__26 = 27, T__27 = 28, T__28 = 29, T__29 = 30, T__30 = 31,
        T__31 = 32, T__32 = 33, T__33 = 34, T__34 = 35, T__35 = 36, T__36 = 37, T__37 = 38,
        T__38 = 39, T__39 = 40, T__40 = 41, T__41 = 42, T__42 = 43, T__43 = 44, T__44 = 45,
        T__45 = 46, T__46 = 47, T__47 = 48, LIST = 49, VOID = 50, WS = 51, NEWLINE = 52, COMMENT = 53,
        MULTI_COMMENT = 54, LINE_COMMENT = 55, NUMBER = 56, TEXT = 57, BOOlEAN = 58, NAN = 59,
        IDENTIFIER = 60;
    public const int
        RULE_program = 0, RULE_declaration = 1, RULE_primitiv_type = 2, RULE_type = 3,
        RULE_expr = 4, RULE_id = 5, RULE_ids = 6, RULE_subscript = 7, RULE_func_call = 8,
        RULE_actual_parameter_list = 9, RULE_constant = 10, RULE_variable_decl = 11,
        RULE_const_variable_decl = 12, RULE_list_decl = 13, RULE_list_initialize = 14,
        RULE_struct_decl = 15, RULE_struct_member = 16, RULE_enum_decl = 17, RULE_enum_member = 18,
        RULE_function_decl = 19, RULE_return_type = 20, RULE_formal_parameter = 21,
        RULE_stmt = 22, RULE_jump_stmt = 23, RULE_return_stmt = 24, RULE_switch_stmt = 25,
        RULE_switch_case = 26, RULE_switch_case_default = 27, RULE_if_else_stmt = 28,
        RULE_else_if_stmt = 29, RULE_else_stmt = 30, RULE_while_stmt = 31, RULE_foreach_stmt = 32,
        RULE_block = 33, RULE_assign_stmt = 34, RULE_ternary_stmt = 35, RULE_compound_assign_stmt = 36,
        RULE_id_assign = 37, RULE_ids_assign = 38;
    public static readonly string[] ruleNames = {
        "program", "declaration", "primitiv_type", "type", "expr", "id", "ids",
        "subscript", "func_call", "actual_parameter_list", "constant", "variable_decl",
        "const_variable_decl", "list_decl", "list_initialize", "struct_decl",
        "struct_member", "enum_decl", "enum_member", "function_decl", "return_type",
        "formal_parameter", "stmt", "jump_stmt", "return_stmt", "switch_stmt",
        "switch_case", "switch_case_default", "if_else_stmt", "else_if_stmt",
        "else_stmt", "while_stmt", "foreach_stmt", "block", "assign_stmt", "ternary_stmt",
        "compound_assign_stmt", "id_assign", "ids_assign"
    };

    private static readonly string[] _LiteralNames = {
        null, "'number'", "'text'", "'boolean'", "'<'", "'>'", "'('", "')'", "'-'",
        "'^'", "'/'", "'mod'", "'*'", "'+'", "'=='", "'!='", "'>='", "'<='", "'!'",
        "'and'", "'or'", "'.'", "'['", "']'", "','", "'='", "'constant'", "'{'",
        "'}'", "'struct'", "'enum'", "'function'", "'break'", "'continue'", "'return'",
        "'switch'", "'case'", "':'", "'default:'", "'if'", "'else if'", "'else'",
        "'while'", "'foreach'", "'in'", "'+='", "'-='", "'*='", "'/='", "'list'",
        "'void'", null, null, null, null, null, null, null, null, "'NaN'"
    };
    private static readonly string[] _SymbolicNames = {
        null, null, null, null, null, null, null, null, null, null, null, null,
        null, null, null, null, null, null, null, null, null, null, null, null,
        null, null, null, null, null, null, null, null, null, null, null, null,
        null, null, null, null, null, null, null, null, null, null, null, null,
        null, "LIST", "VOID", "WS", "NEWLINE", "COMMENT", "MULTI_COMMENT", "LINE_COMMENT",
        "NUMBER", "TEXT", "BOOlEAN", "NAN", "IDENTIFIER"
    };
    public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

    [NotNull]
    public override IVocabulary Vocabulary
    {
        get
        {
            return DefaultVocabulary;
        }
    }

    public override string GrammarFileName { get { return "Simpleton.g4"; } }

    public override string[] RuleNames { get { return ruleNames; } }

    public override string SerializedAtn { get { return new string(_serializedATN); } }

    static SimpletonParser()
    {
        decisionToDFA = new DFA[_ATN.NumberOfDecisions];
        for (int i = 0; i < _ATN.NumberOfDecisions; i++)
        {
            decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
        }
    }

    public SimpletonParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

    public SimpletonParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
    : base(input, output, errorOutput)
    {
        Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
    }

    public partial class ProgramContext : ParserRuleContext
    {
        [System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(SimpletonParser.Eof, 0); }
        [System.Diagnostics.DebuggerNonUserCode]
        public DeclarationContext[] declaration()
        {
            return GetRuleContexts<DeclarationContext>();
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public DeclarationContext declaration(int i)
        {
            return GetRuleContext<DeclarationContext>(i);
        }
        public ProgramContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_program; } }
        [System.Diagnostics.DebuggerNonUserCode]
        public override void EnterRule(IParseTreeListener listener)
        {
            ISimpletonListener typedListener = listener as ISimpletonListener;
            if (typedListener != null) typedListener.EnterProgram(this);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public override void ExitRule(IParseTreeListener listener)
        {
            ISimpletonListener typedListener = listener as ISimpletonListener;
            if (typedListener != null) typedListener.ExitProgram(this);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
        {
            ISimpletonVisitor<TResult> typedVisitor = visitor as ISimpletonVisitor<TResult>;
            if (typedVisitor != null) return typedVisitor.VisitProgram(this);
            else return visitor.VisitChildren(this);
        }
    }

    [RuleVersion(0)]
    public ProgramContext program()
    {
        ProgramContext _localctx = new ProgramContext(Context, State);
        EnterRule(_localctx, 0, RULE_program);
        int _la;
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 81;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__25) | (1L << T__28) | (1L << T__29) | (1L << T__30))) != 0))
                {
                    {
                        {
                            State = 78;
                            declaration();
                        }
                    }
                    State = 83;
                    ErrorHandler.Sync(this);
                    _la = TokenStream.LA(1);
                }
                State = 84;
                Match(Eof);
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class DeclarationContext : ParserRuleContext
    {
        [System.Diagnostics.DebuggerNonUserCode]
        public Function_declContext function_decl()
        {
            return GetRuleContext<Function_declContext>(0);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public Struct_declContext struct_decl()
        {
            return GetRuleContext<Struct_declContext>(0);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public Enum_declContext enum_decl()
        {
            return GetRuleContext<Enum_declContext>(0);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public Const_variable_declContext const_variable_decl()
        {
            return GetRuleContext<Const_variable_declContext>(0);
        }
        public DeclarationContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_declaration; } }
        [System.Diagnostics.DebuggerNonUserCode]
        public override void EnterRule(IParseTreeListener listener)
        {
            ISimpletonListener typedListener = listener as ISimpletonListener;
            if (typedListener != null) typedListener.EnterDeclaration(this);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public override void ExitRule(IParseTreeListener listener)
        {
            ISimpletonListener typedListener = listener as ISimpletonListener;
            if (typedListener != null) typedListener.ExitDeclaration(this);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
        {
            ISimpletonVisitor<TResult> typedVisitor = visitor as ISimpletonVisitor<TResult>;
            if (typedVisitor != null) return typedVisitor.VisitDeclaration(this);
            else return visitor.VisitChildren(this);
        }
    }

    [RuleVersion(0)]
    public DeclarationContext declaration()
    {
        DeclarationContext _localctx = new DeclarationContext(Context, State);
        EnterRule(_localctx, 2, RULE_declaration);
        try
        {
            State = 90;
            ErrorHandler.Sync(this);
            switch (TokenStream.LA(1))
            {
                case T__30:
                    EnterOuterAlt(_localctx, 1);
                    {
                        State = 86;
                        function_decl();
                    }
                    break;
                case T__28:
                    EnterOuterAlt(_localctx, 2);
                    {
                        State = 87;
                        struct_decl();
                    }
                    break;
                case T__29:
                    EnterOuterAlt(_localctx, 3);
                    {
                        State = 88;
                        enum_decl();
                    }
                    break;
                case T__25:
                    EnterOuterAlt(_localctx, 4);
                    {
                        State = 89;
                        const_variable_decl();
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class Primitiv_typeContext : ParserRuleContext
    {
        public IToken primitivtType;
        public Primitiv_typeContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_primitiv_type; } }
        [System.Diagnostics.DebuggerNonUserCode]
        public override void EnterRule(IParseTreeListener listener)
        {
            ISimpletonListener typedListener = listener as ISimpletonListener;
            if (typedListener != null) typedListener.EnterPrimitiv_type(this);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public override void ExitRule(IParseTreeListener listener)
        {
            ISimpletonListener typedListener = listener as ISimpletonListener;
            if (typedListener != null) typedListener.ExitPrimitiv_type(this);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
        {
            ISimpletonVisitor<TResult> typedVisitor = visitor as ISimpletonVisitor<TResult>;
            if (typedVisitor != null) return typedVisitor.VisitPrimitiv_type(this);
            else return visitor.VisitChildren(this);
        }
    }

    [RuleVersion(0)]
    public Primitiv_typeContext primitiv_type()
    {
        Primitiv_typeContext _localctx = new Primitiv_typeContext(Context, State);
        EnterRule(_localctx, 4, RULE_primitiv_type);
        int _la;
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 92;
                _localctx.primitivtType = TokenStream.LT(1);
                _la = TokenStream.LA(1);
                if (!((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << T__2))) != 0)))
                {
                    _localctx.primitivtType = ErrorHandler.RecoverInline(this);
                }
                else
                {
                    ErrorHandler.ReportMatch(this);
                    Consume();
                }
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class TypeContext : ParserRuleContext
    {
        [System.Diagnostics.DebuggerNonUserCode]
        public Primitiv_typeContext primitiv_type()
        {
            return GetRuleContext<Primitiv_typeContext>(0);
        }
        [System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIST() { return GetToken(SimpletonParser.LIST, 0); }
        [System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(SimpletonParser.IDENTIFIER, 0); }
        public TypeContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_type; } }
        [System.Diagnostics.DebuggerNonUserCode]
        public override void EnterRule(IParseTreeListener listener)
        {
            ISimpletonListener typedListener = listener as ISimpletonListener;
            if (typedListener != null) typedListener.EnterType(this);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public override void ExitRule(IParseTreeListener listener)
        {
            ISimpletonListener typedListener = listener as ISimpletonListener;
            if (typedListener != null) typedListener.ExitType(this);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
        {
            ISimpletonVisitor<TResult> typedVisitor = visitor as ISimpletonVisitor<TResult>;
            if (typedVisitor != null) return typedVisitor.VisitType(this);
            else return visitor.VisitChildren(this);
        }
    }

    [RuleVersion(0)]
    public TypeContext type()
    {
        TypeContext _localctx = new TypeContext(Context, State);
        EnterRule(_localctx, 6, RULE_type);
        try
        {
            State = 104;
            ErrorHandler.Sync(this);
            switch (Interpreter.AdaptivePredict(TokenStream, 2, Context))
            {
                case 1:
                    EnterOuterAlt(_localctx, 1);
                    {
                        State = 94;
                        primitiv_type();
                    }
                    break;
                case 2:
                    EnterOuterAlt(_localctx, 2);
                    {
                        State = 95;
                        Match(LIST);
                        State = 96;
                        Match(T__3);
                        State = 97;
                        primitiv_type();
                        State = 98;
                        Match(T__4);
                    }
                    break;
                case 3:
                    EnterOuterAlt(_localctx, 3);
                    {
                        State = 100;
                        Match(LIST);
                        State = 101;
                        Match(T__3);
                        State = 102;
                        Match(IDENTIFIER);
                        State = 103;
                        Match(T__4);
                    }
                    break;
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class ExprContext : ParserRuleContext
    {
        public ExprContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_expr; } }

        public ExprContext() { }
        public virtual void CopyFrom(ExprContext context)
        {
            base.CopyFrom(context);
        }
    }
    public partial class IdentifierCallContext : ExprContext
    {
        [System.Diagnostics.DebuggerNonUserCode]
        public IdContext id()
        {
            return GetRuleContext<IdContext>(0);
        }
        public IdentifierCallContext(ExprContext context) { CopyFrom(context); }
        [System.Diagnostics.DebuggerNonUserCode]
        public override void EnterRule(IParseTreeListener listener)
        {
            ISimpletonListener typedListener = listener as ISimpletonListener;
            if (typedListener != null) typedListener.EnterIdentifierCall(this);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public override void ExitRule(IParseTreeListener listener)
        {
            ISimpletonListener typedListener = listener as ISimpletonListener;
            if (typedListener != null) typedListener.ExitIdentifierCall(this);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
        {
            ISimpletonVisitor<TResult> typedVisitor = visitor as ISimpletonVisitor<TResult>;
            if (typedVisitor != null) return typedVisitor.VisitIdentifierCall(this);
            else return visitor.VisitChildren(this);
        }
    }
    public partial class FuncCallContext : ExprContext
    {
        [System.Diagnostics.DebuggerNonUserCode]
        public Func_callContext func_call()
        {
            return GetRuleContext<Func_callContext>(0);
        }
        public FuncCallContext(ExprContext context) { CopyFrom(context); }
        [System.Diagnostics.DebuggerNonUserCode]
        public override void EnterRule(IParseTreeListener listener)
        {
            ISimpletonListener typedListener = listener as ISimpletonListener;
            if (typedListener != null) typedListener.EnterFuncCall(this);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public override void ExitRule(IParseTreeListener listener)
        {
            ISimpletonListener typedListener = listener as ISimpletonListener;
            if (typedListener != null) typedListener.ExitFuncCall(this);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
        {
            ISimpletonVisitor<TResult> typedVisitor = visitor as ISimpletonVisitor<TResult>;
            if (typedVisitor != null) return typedVisitor.VisitFuncCall(this);
            else return visitor.VisitChildren(this);
        }
    }
    public partial class ConstantLiteralContext : ExprContext
    {
        [System.Diagnostics.DebuggerNonUserCode]
        public ConstantContext constant()
        {
            return GetRuleContext<ConstantContext>(0);
        }
        public ConstantLiteralContext(ExprContext context) { CopyFrom(context); }
        [System.Diagnostics.DebuggerNonUserCode]
        public override void EnterRule(IParseTreeListener listener)
        {
            ISimpletonListener typedListener = listener as ISimpletonListener;
            if (typedListener != null) typedListener.EnterConstantLiteral(this);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public override void ExitRule(IParseTreeListener listener)
        {
            ISimpletonListener typedListener = listener as ISimpletonListener;
            if (typedListener != null) typedListener.ExitConstantLiteral(this);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
        {
            ISimpletonVisitor<TResult> typedVisitor = visitor as ISimpletonVisitor<TResult>;
            if (typedVisitor != null) return typedVisitor.VisitConstantLiteral(this);
            else return visitor.VisitChildren(this);
        }
    }
    public partial class NaNExprContext : ExprContext
    {
        public IToken NaN;
        [System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAN() { return GetToken(SimpletonParser.NAN, 0); }
        public NaNExprContext(ExprContext context) { CopyFrom(context); }
        [System.Diagnostics.DebuggerNonUserCode]
        public override void EnterRule(IParseTreeListener listener)
        {
            ISimpletonListener typedListener = listener as ISimpletonListener;
            if (typedListener != null) typedListener.EnterNaNExpr(this);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public override void ExitRule(IParseTreeListener listener)
        {
            ISimpletonListener typedListener = listener as ISimpletonListener;
            if (typedListener != null) typedListener.ExitNaNExpr(this);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
        {
            ISimpletonVisitor<TResult> typedVisitor = visitor as ISimpletonVisitor<TResult>;
            if (typedVisitor != null) return typedVisitor.VisitNaNExpr(this);
            else return visitor.VisitChildren(this);
        }
    }
    public partial class ParensExprContext : ExprContext
    {
        [System.Diagnostics.DebuggerNonUserCode]
        public ExprContext expr()
        {
            return GetRuleContext<ExprContext>(0);
        }
        public ParensExprContext(ExprContext context) { CopyFrom(context); }
        [System.Diagnostics.DebuggerNonUserCode]
        public override void EnterRule(IParseTreeListener listener)
        {
            ISimpletonListener typedListener = listener as ISimpletonListener;
            if (typedListener != null) typedListener.EnterParensExpr(this);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public override void ExitRule(IParseTreeListener listener)
        {
            ISimpletonListener typedListener = listener as ISimpletonListener;
            if (typedListener != null) typedListener.ExitParensExpr(this);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
        {
            ISimpletonVisitor<TResult> typedVisitor = visitor as ISimpletonVisitor<TResult>;
            if (typedVisitor != null) return typedVisitor.VisitParensExpr(this);
            else return visitor.VisitChildren(this);
        }
    }
    public partial class InfixExprContext : ExprContext
    {
        public ExprContext left;
        public IToken op;
        public ExprContext right;
        [System.Diagnostics.DebuggerNonUserCode]
        public ExprContext[] expr()
        {
            return GetRuleContexts<ExprContext>();
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public ExprContext expr(int i)
        {
            return GetRuleContext<ExprContext>(i);
        }
        public InfixExprContext(ExprContext context) { CopyFrom(context); }
        [System.Diagnostics.DebuggerNonUserCode]
        public override void EnterRule(IParseTreeListener listener)
        {
            ISimpletonListener typedListener = listener as ISimpletonListener;
            if (typedListener != null) typedListener.EnterInfixExpr(this);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public override void ExitRule(IParseTreeListener listener)
        {
            ISimpletonListener typedListener = listener as ISimpletonListener;
            if (typedListener != null) typedListener.ExitInfixExpr(this);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
        {
            ISimpletonVisitor<TResult> typedVisitor = visitor as ISimpletonVisitor<TResult>;
            if (typedVisitor != null) return typedVisitor.VisitInfixExpr(this);
            else return visitor.VisitChildren(this);
        }
    }
    public partial class UnaryExprContext : ExprContext
    {
        public IToken op;
        [System.Diagnostics.DebuggerNonUserCode]
        public ExprContext expr()
        {
            return GetRuleContext<ExprContext>(0);
        }
        public UnaryExprContext(ExprContext context) { CopyFrom(context); }
        [System.Diagnostics.DebuggerNonUserCode]
        public override void EnterRule(IParseTreeListener listener)
        {
            ISimpletonListener typedListener = listener as ISimpletonListener;
            if (typedListener != null) typedListener.EnterUnaryExpr(this);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public override void ExitRule(IParseTreeListener listener)
        {
            ISimpletonListener typedListener = listener as ISimpletonListener;
            if (typedListener != null) typedListener.ExitUnaryExpr(this);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
        {
            ISimpletonVisitor<TResult> typedVisitor = visitor as ISimpletonVisitor<TResult>;
            if (typedVisitor != null) return typedVisitor.VisitUnaryExpr(this);
            else return visitor.VisitChildren(this);
        }
    }

    [RuleVersion(0)]
    public ExprContext expr()
    {
        return expr(0);
    }

    private ExprContext expr(int _p)
    {
        ParserRuleContext _parentctx = Context;
        int _parentState = State;
        ExprContext _localctx = new ExprContext(Context, _parentState);
        ExprContext _prevctx = _localctx;
        int _startState = 8;
        EnterRecursionRule(_localctx, 8, RULE_expr, _p);
        int _la;
        try
        {
            int _alt;
            EnterOuterAlt(_localctx, 1);
            {
                State = 122;
                ErrorHandler.Sync(this);
                switch (Interpreter.AdaptivePredict(TokenStream, 3, Context))
                {
                    case 1:
                        {
                            _localctx = new IdentifierCallContext(_localctx);
                            Context = _localctx;
                            _prevctx = _localctx;

                            State = 107;
                            id(0);
                        }
                        break;
                    case 2:
                        {
                            _localctx = new ConstantLiteralContext(_localctx);
                            Context = _localctx;
                            _prevctx = _localctx;
                            State = 108;
                            constant();
                        }
                        break;
                    case 3:
                        {
                            _localctx = new FuncCallContext(_localctx);
                            Context = _localctx;
                            _prevctx = _localctx;
                            State = 109;
                            func_call();
                        }
                        break;
                    case 4:
                        {
                            _localctx = new NaNExprContext(_localctx);
                            Context = _localctx;
                            _prevctx = _localctx;
                            State = 110;
                            ((NaNExprContext)_localctx).NaN = Match(NAN);
                        }
                        break;
                    case 5:
                        {
                            _localctx = new ParensExprContext(_localctx);
                            Context = _localctx;
                            _prevctx = _localctx;
                            State = 111;
                            Match(T__5);
                            State = 112;
                            expr(0);
                            State = 113;
                            Match(T__6);
                        }
                        break;
                    case 6:
                        {
                            _localctx = new UnaryExprContext(_localctx);
                            Context = _localctx;
                            _prevctx = _localctx;
                            State = 115;
                            Match(T__5);
                            State = 116;
                            ((UnaryExprContext)_localctx).op = Match(T__7);
                            State = 117;
                            expr(0);
                            State = 118;
                            Match(T__6);
                        }
                        break;
                    case 7:
                        {
                            _localctx = new UnaryExprContext(_localctx);
                            Context = _localctx;
                            _prevctx = _localctx;
                            State = 120;
                            ((UnaryExprContext)_localctx).op = Match(T__17);
                            State = 121;
                            expr(2);
                        }
                        break;
                }
                Context.Stop = TokenStream.LT(-1);
                State = 141;
                ErrorHandler.Sync(this);
                _alt = Interpreter.AdaptivePredict(TokenStream, 5, Context);
                while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER)
                {
                    if (_alt == 1)
                    {
                        if (ParseListeners != null)
                            TriggerExitRuleEvent();
                        _prevctx = _localctx;
                        {
                            State = 139;
                            ErrorHandler.Sync(this);
                            switch (Interpreter.AdaptivePredict(TokenStream, 4, Context))
                            {
                                case 1:
                                    {
                                        _localctx = new InfixExprContext(new ExprContext(_parentctx, _parentState));
                                        ((InfixExprContext)_localctx).left = _prevctx;
                                        PushNewRecursionContext(_localctx, _startState, RULE_expr);
                                        State = 124;
                                        if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
                                        State = 125;
                                        ((InfixExprContext)_localctx).op = Match(T__8);
                                        State = 126;
                                        ((InfixExprContext)_localctx).right = expr(7);
                                    }
                                    break;
                                case 2:
                                    {
                                        _localctx = new InfixExprContext(new ExprContext(_parentctx, _parentState));
                                        ((InfixExprContext)_localctx).left = _prevctx;
                                        PushNewRecursionContext(_localctx, _startState, RULE_expr);
                                        State = 127;
                                        if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
                                        State = 128;
                                        ((InfixExprContext)_localctx).op = TokenStream.LT(1);
                                        _la = TokenStream.LA(1);
                                        if (!((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__9) | (1L << T__10) | (1L << T__11))) != 0)))
                                        {
                                            ((InfixExprContext)_localctx).op = ErrorHandler.RecoverInline(this);
                                        }
                                        else
                                        {
                                            ErrorHandler.ReportMatch(this);
                                            Consume();
                                        }
                                        State = 129;
                                        ((InfixExprContext)_localctx).right = expr(6);
                                    }
                                    break;
                                case 3:
                                    {
                                        _localctx = new InfixExprContext(new ExprContext(_parentctx, _parentState));
                                        ((InfixExprContext)_localctx).left = _prevctx;
                                        PushNewRecursionContext(_localctx, _startState, RULE_expr);
                                        State = 130;
                                        if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
                                        State = 131;
                                        ((InfixExprContext)_localctx).op = TokenStream.LT(1);
                                        _la = TokenStream.LA(1);
                                        if (!(_la == T__7 || _la == T__12))
                                        {
                                            ((InfixExprContext)_localctx).op = ErrorHandler.RecoverInline(this);
                                        }
                                        else
                                        {
                                            ErrorHandler.ReportMatch(this);
                                            Consume();
                                        }
                                        State = 132;
                                        ((InfixExprContext)_localctx).right = expr(5);
                                    }
                                    break;
                                case 4:
                                    {
                                        _localctx = new InfixExprContext(new ExprContext(_parentctx, _parentState));
                                        ((InfixExprContext)_localctx).left = _prevctx;
                                        PushNewRecursionContext(_localctx, _startState, RULE_expr);
                                        State = 133;
                                        if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
                                        State = 134;
                                        ((InfixExprContext)_localctx).op = TokenStream.LT(1);
                                        _la = TokenStream.LA(1);
                                        if (!((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__3) | (1L << T__4) | (1L << T__13) | (1L << T__14) | (1L << T__15) | (1L << T__16))) != 0)))
                                        {
                                            ((InfixExprContext)_localctx).op = ErrorHandler.RecoverInline(this);
                                        }
                                        else
                                        {
                                            ErrorHandler.ReportMatch(this);
                                            Consume();
                                        }
                                        State = 135;
                                        ((InfixExprContext)_localctx).right = expr(4);
                                    }
                                    break;
                                case 5:
                                    {
                                        _localctx = new InfixExprContext(new ExprContext(_parentctx, _parentState));
                                        ((InfixExprContext)_localctx).left = _prevctx;
                                        PushNewRecursionContext(_localctx, _startState, RULE_expr);
                                        State = 136;
                                        if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
                                        State = 137;
                                        ((InfixExprContext)_localctx).op = TokenStream.LT(1);
                                        _la = TokenStream.LA(1);
                                        if (!(_la == T__18 || _la == T__19))
                                        {
                                            ((InfixExprContext)_localctx).op = ErrorHandler.RecoverInline(this);
                                        }
                                        else
                                        {
                                            ErrorHandler.ReportMatch(this);
                                            Consume();
                                        }
                                        State = 138;
                                        ((InfixExprContext)_localctx).right = expr(2);
                                    }
                                    break;
                            }
                        }
                    }
                    State = 143;
                    ErrorHandler.Sync(this);
                    _alt = Interpreter.AdaptivePredict(TokenStream, 5, Context);
                }
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            UnrollRecursionContexts(_parentctx);
        }
        return _localctx;
    }

    public partial class IdContext : ParserRuleContext
    {
        [System.Diagnostics.DebuggerNonUserCode]
        public IdsContext ids()
        {
            return GetRuleContext<IdsContext>(0);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public IdContext id()
        {
            return GetRuleContext<IdContext>(0);
        }
        public IdContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_id; } }
        [System.Diagnostics.DebuggerNonUserCode]
        public override void EnterRule(IParseTreeListener listener)
        {
            ISimpletonListener typedListener = listener as ISimpletonListener;
            if (typedListener != null) typedListener.EnterId(this);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public override void ExitRule(IParseTreeListener listener)
        {
            ISimpletonListener typedListener = listener as ISimpletonListener;
            if (typedListener != null) typedListener.ExitId(this);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
        {
            ISimpletonVisitor<TResult> typedVisitor = visitor as ISimpletonVisitor<TResult>;
            if (typedVisitor != null) return typedVisitor.VisitId(this);
            else return visitor.VisitChildren(this);
        }
    }

    [RuleVersion(0)]
    public IdContext id()
    {
        return id(0);
    }

    private IdContext id(int _p)
    {
        ParserRuleContext _parentctx = Context;
        int _parentState = State;
        IdContext _localctx = new IdContext(Context, _parentState);
        IdContext _prevctx = _localctx;
        int _startState = 10;
        EnterRecursionRule(_localctx, 10, RULE_id, _p);
        try
        {
            int _alt;
            EnterOuterAlt(_localctx, 1);
            {
                {
                    State = 145;
                    ids();
                }
                Context.Stop = TokenStream.LT(-1);
                State = 152;
                ErrorHandler.Sync(this);
                _alt = Interpreter.AdaptivePredict(TokenStream, 6, Context);
                while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER)
                {
                    if (_alt == 1)
                    {
                        if (ParseListeners != null)
                            TriggerExitRuleEvent();
                        _prevctx = _localctx;
                        {
                            {
                                _localctx = new IdContext(_parentctx, _parentState);
                                PushNewRecursionContext(_localctx, _startState, RULE_id);
                                State = 147;
                                if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
                                State = 148;
                                Match(T__20);
                                State = 149;
                                ids();
                            }
                        }
                    }
                    State = 154;
                    ErrorHandler.Sync(this);
                    _alt = Interpreter.AdaptivePredict(TokenStream, 6, Context);
                }
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            UnrollRecursionContexts(_parentctx);
        }
        return _localctx;
    }

    public partial class IdsContext : ParserRuleContext
    {
        [System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(SimpletonParser.IDENTIFIER, 0); }
        [System.Diagnostics.DebuggerNonUserCode]
        public Func_callContext func_call()
        {
            return GetRuleContext<Func_callContext>(0);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public SubscriptContext subscript()
        {
            return GetRuleContext<SubscriptContext>(0);
        }
        public IdsContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_ids; } }
        [System.Diagnostics.DebuggerNonUserCode]
        public override void EnterRule(IParseTreeListener listener)
        {
            ISimpletonListener typedListener = listener as ISimpletonListener;
            if (typedListener != null) typedListener.EnterIds(this);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public override void ExitRule(IParseTreeListener listener)
        {
            ISimpletonListener typedListener = listener as ISimpletonListener;
            if (typedListener != null) typedListener.ExitIds(this);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
        {
            ISimpletonVisitor<TResult> typedVisitor = visitor as ISimpletonVisitor<TResult>;
            if (typedVisitor != null) return typedVisitor.VisitIds(this);
            else return visitor.VisitChildren(this);
        }
    }

    [RuleVersion(0)]
    public IdsContext ids()
    {
        IdsContext _localctx = new IdsContext(Context, State);
        EnterRule(_localctx, 12, RULE_ids);
        try
        {
            State = 158;
            ErrorHandler.Sync(this);
            switch (Interpreter.AdaptivePredict(TokenStream, 7, Context))
            {
                case 1:
                    EnterOuterAlt(_localctx, 1);
                    {
                        State = 155;
                        Match(IDENTIFIER);
                    }
                    break;
                case 2:
                    EnterOuterAlt(_localctx, 2);
                    {
                        State = 156;
                        func_call();
                    }
                    break;
                case 3:
                    EnterOuterAlt(_localctx, 3);
                    {
                        State = 157;
                        subscript();
                    }
                    break;
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class SubscriptContext : ParserRuleContext
    {
        [System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(SimpletonParser.IDENTIFIER, 0); }
        [System.Diagnostics.DebuggerNonUserCode]
        public ExprContext expr()
        {
            return GetRuleContext<ExprContext>(0);
        }
        public SubscriptContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_subscript; } }
        [System.Diagnostics.DebuggerNonUserCode]
        public override void EnterRule(IParseTreeListener listener)
        {
            ISimpletonListener typedListener = listener as ISimpletonListener;
            if (typedListener != null) typedListener.EnterSubscript(this);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public override void ExitRule(IParseTreeListener listener)
        {
            ISimpletonListener typedListener = listener as ISimpletonListener;
            if (typedListener != null) typedListener.ExitSubscript(this);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
        {
            ISimpletonVisitor<TResult> typedVisitor = visitor as ISimpletonVisitor<TResult>;
            if (typedVisitor != null) return typedVisitor.VisitSubscript(this);
            else return visitor.VisitChildren(this);
        }
    }

    [RuleVersion(0)]
    public SubscriptContext subscript()
    {
        SubscriptContext _localctx = new SubscriptContext(Context, State);
        EnterRule(_localctx, 14, RULE_subscript);
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 160;
                Match(IDENTIFIER);
                State = 161;
                Match(T__21);
                State = 162;
                expr(0);
                State = 163;
                Match(T__22);
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class Func_callContext : ParserRuleContext
    {
        [System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(SimpletonParser.IDENTIFIER, 0); }
        [System.Diagnostics.DebuggerNonUserCode]
        public Actual_parameter_listContext actual_parameter_list()
        {
            return GetRuleContext<Actual_parameter_listContext>(0);
        }
        public Func_callContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_func_call; } }
        [System.Diagnostics.DebuggerNonUserCode]
        public override void EnterRule(IParseTreeListener listener)
        {
            ISimpletonListener typedListener = listener as ISimpletonListener;
            if (typedListener != null) typedListener.EnterFunc_call(this);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public override void ExitRule(IParseTreeListener listener)
        {
            ISimpletonListener typedListener = listener as ISimpletonListener;
            if (typedListener != null) typedListener.ExitFunc_call(this);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
        {
            ISimpletonVisitor<TResult> typedVisitor = visitor as ISimpletonVisitor<TResult>;
            if (typedVisitor != null) return typedVisitor.VisitFunc_call(this);
            else return visitor.VisitChildren(this);
        }
    }

    [RuleVersion(0)]
    public Func_callContext func_call()
    {
        Func_callContext _localctx = new Func_callContext(Context, State);
        EnterRule(_localctx, 16, RULE_func_call);
        int _la;
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 165;
                Match(IDENTIFIER);
                State = 166;
                Match(T__5);
                State = 168;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__5) | (1L << T__17) | (1L << NUMBER) | (1L << TEXT) | (1L << BOOlEAN) | (1L << NAN) | (1L << IDENTIFIER))) != 0))
                {
                    {
                        State = 167;
                        actual_parameter_list();
                    }
                }

                State = 170;
                Match(T__6);
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class Actual_parameter_listContext : ParserRuleContext
    {
        [System.Diagnostics.DebuggerNonUserCode]
        public ExprContext[] expr()
        {
            return GetRuleContexts<ExprContext>();
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public ExprContext expr(int i)
        {
            return GetRuleContext<ExprContext>(i);
        }
        public Actual_parameter_listContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_actual_parameter_list; } }
        [System.Diagnostics.DebuggerNonUserCode]
        public override void EnterRule(IParseTreeListener listener)
        {
            ISimpletonListener typedListener = listener as ISimpletonListener;
            if (typedListener != null) typedListener.EnterActual_parameter_list(this);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public override void ExitRule(IParseTreeListener listener)
        {
            ISimpletonListener typedListener = listener as ISimpletonListener;
            if (typedListener != null) typedListener.ExitActual_parameter_list(this);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
        {
            ISimpletonVisitor<TResult> typedVisitor = visitor as ISimpletonVisitor<TResult>;
            if (typedVisitor != null) return typedVisitor.VisitActual_parameter_list(this);
            else return visitor.VisitChildren(this);
        }
    }

    [RuleVersion(0)]
    public Actual_parameter_listContext actual_parameter_list()
    {
        Actual_parameter_listContext _localctx = new Actual_parameter_listContext(Context, State);
        EnterRule(_localctx, 18, RULE_actual_parameter_list);
        int _la;
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 172;
                expr(0);
                State = 177;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                while (_la == T__23)
                {
                    {
                        {
                            State = 173;
                            Match(T__23);
                            State = 174;
                            expr(0);
                        }
                    }
                    State = 179;
                    ErrorHandler.Sync(this);
                    _la = TokenStream.LA(1);
                }
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class ConstantContext : ParserRuleContext
    {
        [System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(SimpletonParser.NUMBER, 0); }
        [System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT() { return GetToken(SimpletonParser.TEXT, 0); }
        [System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOlEAN() { return GetToken(SimpletonParser.BOOlEAN, 0); }
        public ConstantContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_constant; } }
        [System.Diagnostics.DebuggerNonUserCode]
        public override void EnterRule(IParseTreeListener listener)
        {
            ISimpletonListener typedListener = listener as ISimpletonListener;
            if (typedListener != null) typedListener.EnterConstant(this);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public override void ExitRule(IParseTreeListener listener)
        {
            ISimpletonListener typedListener = listener as ISimpletonListener;
            if (typedListener != null) typedListener.ExitConstant(this);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
        {
            ISimpletonVisitor<TResult> typedVisitor = visitor as ISimpletonVisitor<TResult>;
            if (typedVisitor != null) return typedVisitor.VisitConstant(this);
            else return visitor.VisitChildren(this);
        }
    }

    [RuleVersion(0)]
    public ConstantContext constant()
    {
        ConstantContext _localctx = new ConstantContext(Context, State);
        EnterRule(_localctx, 20, RULE_constant);
        int _la;
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 180;
                _la = TokenStream.LA(1);
                if (!((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NUMBER) | (1L << TEXT) | (1L << BOOlEAN))) != 0)))
                {
                    ErrorHandler.RecoverInline(this);
                }
                else
                {
                    ErrorHandler.ReportMatch(this);
                    Consume();
                }
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class Variable_declContext : ParserRuleContext
    {
        public IToken userDefinedType;
        public IToken vName;
        [System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE() { return GetToken(SimpletonParser.NEWLINE, 0); }
        [System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(SimpletonParser.IDENTIFIER); }
        [System.Diagnostics.DebuggerNonUserCode]
        public ITerminalNode IDENTIFIER(int i)
        {
            return GetToken(SimpletonParser.IDENTIFIER, i);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public Primitiv_typeContext primitiv_type()
        {
            return GetRuleContext<Primitiv_typeContext>(0);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public ExprContext expr()
        {
            return GetRuleContext<ExprContext>(0);
        }
        public Variable_declContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_variable_decl; } }
        [System.Diagnostics.DebuggerNonUserCode]
        public override void EnterRule(IParseTreeListener listener)
        {
            ISimpletonListener typedListener = listener as ISimpletonListener;
            if (typedListener != null) typedListener.EnterVariable_decl(this);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public override void ExitRule(IParseTreeListener listener)
        {
            ISimpletonListener typedListener = listener as ISimpletonListener;
            if (typedListener != null) typedListener.ExitVariable_decl(this);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
        {
            ISimpletonVisitor<TResult> typedVisitor = visitor as ISimpletonVisitor<TResult>;
            if (typedVisitor != null) return typedVisitor.VisitVariable_decl(this);
            else return visitor.VisitChildren(this);
        }
    }

    [RuleVersion(0)]
    public Variable_declContext variable_decl()
    {
        Variable_declContext _localctx = new Variable_declContext(Context, State);
        EnterRule(_localctx, 22, RULE_variable_decl);
        int _la;
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 184;
                ErrorHandler.Sync(this);
                switch (TokenStream.LA(1))
                {
                    case T__0:
                    case T__1:
                    case T__2:
                        {
                            State = 182;
                            primitiv_type();
                        }
                        break;
                    case IDENTIFIER:
                        {
                            State = 183;
                            _localctx.userDefinedType = Match(IDENTIFIER);
                        }
                        break;
                    default:
                        throw new NoViableAltException(this);
                }
                State = 186;
                _localctx.vName = Match(IDENTIFIER);
                State = 189;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                if (_la == T__24)
                {
                    {
                        State = 187;
                        Match(T__24);
                        State = 188;
                        expr(0);
                    }
                }

                State = 191;
                Match(NEWLINE);
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class Const_variable_declContext : ParserRuleContext
    {
        [System.Diagnostics.DebuggerNonUserCode]
        public Variable_declContext variable_decl()
        {
            return GetRuleContext<Variable_declContext>(0);
        }
        public Const_variable_declContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_const_variable_decl; } }
        [System.Diagnostics.DebuggerNonUserCode]
        public override void EnterRule(IParseTreeListener listener)
        {
            ISimpletonListener typedListener = listener as ISimpletonListener;
            if (typedListener != null) typedListener.EnterConst_variable_decl(this);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public override void ExitRule(IParseTreeListener listener)
        {
            ISimpletonListener typedListener = listener as ISimpletonListener;
            if (typedListener != null) typedListener.ExitConst_variable_decl(this);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
        {
            ISimpletonVisitor<TResult> typedVisitor = visitor as ISimpletonVisitor<TResult>;
            if (typedVisitor != null) return typedVisitor.VisitConst_variable_decl(this);
            else return visitor.VisitChildren(this);
        }
    }

    [RuleVersion(0)]
    public Const_variable_declContext const_variable_decl()
    {
        Const_variable_declContext _localctx = new Const_variable_declContext(Context, State);
        EnterRule(_localctx, 24, RULE_const_variable_decl);
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 193;
                Match(T__25);
                State = 194;
                variable_decl();
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class List_declContext : ParserRuleContext
    {
        public IToken innerType;
        public IToken vName;
        [System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIST() { return GetToken(SimpletonParser.LIST, 0); }
        [System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE() { return GetToken(SimpletonParser.NEWLINE, 0); }
        [System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(SimpletonParser.IDENTIFIER); }
        [System.Diagnostics.DebuggerNonUserCode]
        public ITerminalNode IDENTIFIER(int i)
        {
            return GetToken(SimpletonParser.IDENTIFIER, i);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public Primitiv_typeContext primitiv_type()
        {
            return GetRuleContext<Primitiv_typeContext>(0);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public List_initializeContext list_initialize()
        {
            return GetRuleContext<List_initializeContext>(0);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public ExprContext expr()
        {
            return GetRuleContext<ExprContext>(0);
        }
        public List_declContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_list_decl; } }
        [System.Diagnostics.DebuggerNonUserCode]
        public override void EnterRule(IParseTreeListener listener)
        {
            ISimpletonListener typedListener = listener as ISimpletonListener;
            if (typedListener != null) typedListener.EnterList_decl(this);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public override void ExitRule(IParseTreeListener listener)
        {
            ISimpletonListener typedListener = listener as ISimpletonListener;
            if (typedListener != null) typedListener.ExitList_decl(this);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
        {
            ISimpletonVisitor<TResult> typedVisitor = visitor as ISimpletonVisitor<TResult>;
            if (typedVisitor != null) return typedVisitor.VisitList_decl(this);
            else return visitor.VisitChildren(this);
        }
    }

    [RuleVersion(0)]
    public List_declContext list_decl()
    {
        List_declContext _localctx = new List_declContext(Context, State);
        EnterRule(_localctx, 26, RULE_list_decl);
        int _la;
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 196;
                Match(LIST);
                State = 197;
                Match(T__3);
                State = 200;
                ErrorHandler.Sync(this);
                switch (TokenStream.LA(1))
                {
                    case T__0:
                    case T__1:
                    case T__2:
                        {
                            State = 198;
                            primitiv_type();
                        }
                        break;
                    case IDENTIFIER:
                        {
                            State = 199;
                            _localctx.innerType = Match(IDENTIFIER);
                        }
                        break;
                    default:
                        throw new NoViableAltException(this);
                }
                State = 202;
                Match(T__4);
                State = 203;
                _localctx.vName = Match(IDENTIFIER);
                State = 209;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                if (_la == T__24)
                {
                    {
                        State = 204;
                        Match(T__24);
                        State = 207;
                        ErrorHandler.Sync(this);
                        switch (TokenStream.LA(1))
                        {
                            case T__26:
                                {
                                    State = 205;
                                    list_initialize();
                                }
                                break;
                            case T__5:
                            case T__17:
                            case NUMBER:
                            case TEXT:
                            case BOOlEAN:
                            case NAN:
                            case IDENTIFIER:
                                {
                                    State = 206;
                                    expr(0);
                                }
                                break;
                            default:
                                throw new NoViableAltException(this);
                        }
                    }
                }

                State = 211;
                Match(NEWLINE);
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class List_initializeContext : ParserRuleContext
    {
        [System.Diagnostics.DebuggerNonUserCode]
        public ExprContext[] expr()
        {
            return GetRuleContexts<ExprContext>();
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public ExprContext expr(int i)
        {
            return GetRuleContext<ExprContext>(i);
        }
        public List_initializeContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_list_initialize; } }
        [System.Diagnostics.DebuggerNonUserCode]
        public override void EnterRule(IParseTreeListener listener)
        {
            ISimpletonListener typedListener = listener as ISimpletonListener;
            if (typedListener != null) typedListener.EnterList_initialize(this);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public override void ExitRule(IParseTreeListener listener)
        {
            ISimpletonListener typedListener = listener as ISimpletonListener;
            if (typedListener != null) typedListener.ExitList_initialize(this);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
        {
            ISimpletonVisitor<TResult> typedVisitor = visitor as ISimpletonVisitor<TResult>;
            if (typedVisitor != null) return typedVisitor.VisitList_initialize(this);
            else return visitor.VisitChildren(this);
        }
    }

    [RuleVersion(0)]
    public List_initializeContext list_initialize()
    {
        List_initializeContext _localctx = new List_initializeContext(Context, State);
        EnterRule(_localctx, 28, RULE_list_initialize);
        int _la;
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 213;
                Match(T__26);
                State = 222;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__5) | (1L << T__17) | (1L << NUMBER) | (1L << TEXT) | (1L << BOOlEAN) | (1L << NAN) | (1L << IDENTIFIER))) != 0))
                {
                    {
                        State = 214;
                        expr(0);
                        State = 219;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        while (_la == T__23)
                        {
                            {
                                {
                                    State = 215;
                                    Match(T__23);
                                    State = 216;
                                    expr(0);
                                }
                            }
                            State = 221;
                            ErrorHandler.Sync(this);
                            _la = TokenStream.LA(1);
                        }
                    }
                }

                State = 224;
                Match(T__27);
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class Struct_declContext : ParserRuleContext
    {
        [System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(SimpletonParser.IDENTIFIER, 0); }
        [System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NEWLINE() { return GetTokens(SimpletonParser.NEWLINE); }
        [System.Diagnostics.DebuggerNonUserCode]
        public ITerminalNode NEWLINE(int i)
        {
            return GetToken(SimpletonParser.NEWLINE, i);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public Struct_memberContext[] struct_member()
        {
            return GetRuleContexts<Struct_memberContext>();
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public Struct_memberContext struct_member(int i)
        {
            return GetRuleContext<Struct_memberContext>(i);
        }
        public Struct_declContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_struct_decl; } }
        [System.Diagnostics.DebuggerNonUserCode]
        public override void EnterRule(IParseTreeListener listener)
        {
            ISimpletonListener typedListener = listener as ISimpletonListener;
            if (typedListener != null) typedListener.EnterStruct_decl(this);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public override void ExitRule(IParseTreeListener listener)
        {
            ISimpletonListener typedListener = listener as ISimpletonListener;
            if (typedListener != null) typedListener.ExitStruct_decl(this);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
        {
            ISimpletonVisitor<TResult> typedVisitor = visitor as ISimpletonVisitor<TResult>;
            if (typedVisitor != null) return typedVisitor.VisitStruct_decl(this);
            else return visitor.VisitChildren(this);
        }
    }

    [RuleVersion(0)]
    public Struct_declContext struct_decl()
    {
        Struct_declContext _localctx = new Struct_declContext(Context, State);
        EnterRule(_localctx, 30, RULE_struct_decl);
        int _la;
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 226;
                Match(T__28);
                State = 227;
                Match(IDENTIFIER);
                State = 229;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                if (_la == NEWLINE)
                {
                    {
                        State = 228;
                        Match(NEWLINE);
                    }
                }

                State = 231;
                Match(T__26);
                State = 232;
                Match(NEWLINE);
                State = 234;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                do
                {
                    {
                        {
                            State = 233;
                            struct_member();
                        }
                    }
                    State = 236;
                    ErrorHandler.Sync(this);
                    _la = TokenStream.LA(1);
                } while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << T__2) | (1L << LIST))) != 0));
                State = 238;
                Match(T__27);
                State = 239;
                Match(NEWLINE);
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class Struct_memberContext : ParserRuleContext
    {
        [System.Diagnostics.DebuggerNonUserCode]
        public TypeContext type()
        {
            return GetRuleContext<TypeContext>(0);
        }
        [System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(SimpletonParser.IDENTIFIER, 0); }
        [System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE() { return GetToken(SimpletonParser.NEWLINE, 0); }
        public Struct_memberContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_struct_member; } }
        [System.Diagnostics.DebuggerNonUserCode]
        public override void EnterRule(IParseTreeListener listener)
        {
            ISimpletonListener typedListener = listener as ISimpletonListener;
            if (typedListener != null) typedListener.EnterStruct_member(this);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public override void ExitRule(IParseTreeListener listener)
        {
            ISimpletonListener typedListener = listener as ISimpletonListener;
            if (typedListener != null) typedListener.ExitStruct_member(this);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
        {
            ISimpletonVisitor<TResult> typedVisitor = visitor as ISimpletonVisitor<TResult>;
            if (typedVisitor != null) return typedVisitor.VisitStruct_member(this);
            else return visitor.VisitChildren(this);
        }
    }

    [RuleVersion(0)]
    public Struct_memberContext struct_member()
    {
        Struct_memberContext _localctx = new Struct_memberContext(Context, State);
        EnterRule(_localctx, 32, RULE_struct_member);
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 241;
                type();
                State = 242;
                Match(IDENTIFIER);
                State = 243;
                Match(NEWLINE);
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class Enum_declContext : ParserRuleContext
    {
        [System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(SimpletonParser.IDENTIFIER, 0); }
        [System.Diagnostics.DebuggerNonUserCode]
        public Enum_memberContext[] enum_member()
        {
            return GetRuleContexts<Enum_memberContext>();
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public Enum_memberContext enum_member(int i)
        {
            return GetRuleContext<Enum_memberContext>(i);
        }
        [System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NEWLINE() { return GetTokens(SimpletonParser.NEWLINE); }
        [System.Diagnostics.DebuggerNonUserCode]
        public ITerminalNode NEWLINE(int i)
        {
            return GetToken(SimpletonParser.NEWLINE, i);
        }
        public Enum_declContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_enum_decl; } }
        [System.Diagnostics.DebuggerNonUserCode]
        public override void EnterRule(IParseTreeListener listener)
        {
            ISimpletonListener typedListener = listener as ISimpletonListener;
            if (typedListener != null) typedListener.EnterEnum_decl(this);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public override void ExitRule(IParseTreeListener listener)
        {
            ISimpletonListener typedListener = listener as ISimpletonListener;
            if (typedListener != null) typedListener.ExitEnum_decl(this);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
        {
            ISimpletonVisitor<TResult> typedVisitor = visitor as ISimpletonVisitor<TResult>;
            if (typedVisitor != null) return typedVisitor.VisitEnum_decl(this);
            else return visitor.VisitChildren(this);
        }
    }

    [RuleVersion(0)]
    public Enum_declContext enum_decl()
    {
        Enum_declContext _localctx = new Enum_declContext(Context, State);
        EnterRule(_localctx, 34, RULE_enum_decl);
        int _la;
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 245;
                Match(T__29);
                State = 246;
                Match(IDENTIFIER);
                State = 248;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                if (_la == NEWLINE)
                {
                    {
                        State = 247;
                        Match(NEWLINE);
                    }
                }

                State = 250;
                Match(T__26);
                State = 252;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                if (_la == NEWLINE)
                {
                    {
                        State = 251;
                        Match(NEWLINE);
                    }
                }

                State = 254;
                enum_member();
                State = 259;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                while (_la == T__23)
                {
                    {
                        {
                            State = 255;
                            Match(T__23);
                            State = 256;
                            enum_member();
                        }
                    }
                    State = 261;
                    ErrorHandler.Sync(this);
                    _la = TokenStream.LA(1);
                }
                State = 262;
                Match(T__27);
                State = 263;
                Match(NEWLINE);
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class Enum_memberContext : ParserRuleContext
    {
        [System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(SimpletonParser.IDENTIFIER, 0); }
        [System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(SimpletonParser.NUMBER, 0); }
        [System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE() { return GetToken(SimpletonParser.NEWLINE, 0); }
        public Enum_memberContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_enum_member; } }
        [System.Diagnostics.DebuggerNonUserCode]
        public override void EnterRule(IParseTreeListener listener)
        {
            ISimpletonListener typedListener = listener as ISimpletonListener;
            if (typedListener != null) typedListener.EnterEnum_member(this);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public override void ExitRule(IParseTreeListener listener)
        {
            ISimpletonListener typedListener = listener as ISimpletonListener;
            if (typedListener != null) typedListener.ExitEnum_member(this);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
        {
            ISimpletonVisitor<TResult> typedVisitor = visitor as ISimpletonVisitor<TResult>;
            if (typedVisitor != null) return typedVisitor.VisitEnum_member(this);
            else return visitor.VisitChildren(this);
        }
    }

    [RuleVersion(0)]
    public Enum_memberContext enum_member()
    {
        Enum_memberContext _localctx = new Enum_memberContext(Context, State);
        EnterRule(_localctx, 36, RULE_enum_member);
        int _la;
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 265;
                Match(IDENTIFIER);
                State = 268;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                if (_la == T__24)
                {
                    {
                        State = 266;
                        Match(T__24);
                        State = 267;
                        Match(NUMBER);
                    }
                }

                State = 271;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                if (_la == NEWLINE)
                {
                    {
                        State = 270;
                        Match(NEWLINE);
                    }
                }

            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class Function_declContext : ParserRuleContext
    {
        public Return_typeContext returnType;
        public IToken name;
        [System.Diagnostics.DebuggerNonUserCode]
        public BlockContext block()
        {
            return GetRuleContext<BlockContext>(0);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public Return_typeContext return_type()
        {
            return GetRuleContext<Return_typeContext>(0);
        }
        [System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(SimpletonParser.IDENTIFIER, 0); }
        [System.Diagnostics.DebuggerNonUserCode]
        public Formal_parameterContext[] formal_parameter()
        {
            return GetRuleContexts<Formal_parameterContext>();
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public Formal_parameterContext formal_parameter(int i)
        {
            return GetRuleContext<Formal_parameterContext>(i);
        }
        public Function_declContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_function_decl; } }
        [System.Diagnostics.DebuggerNonUserCode]
        public override void EnterRule(IParseTreeListener listener)
        {
            ISimpletonListener typedListener = listener as ISimpletonListener;
            if (typedListener != null) typedListener.EnterFunction_decl(this);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public override void ExitRule(IParseTreeListener listener)
        {
            ISimpletonListener typedListener = listener as ISimpletonListener;
            if (typedListener != null) typedListener.ExitFunction_decl(this);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
        {
            ISimpletonVisitor<TResult> typedVisitor = visitor as ISimpletonVisitor<TResult>;
            if (typedVisitor != null) return typedVisitor.VisitFunction_decl(this);
            else return visitor.VisitChildren(this);
        }
    }

    [RuleVersion(0)]
    public Function_declContext function_decl()
    {
        Function_declContext _localctx = new Function_declContext(Context, State);
        EnterRule(_localctx, 38, RULE_function_decl);
        int _la;
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 273;
                Match(T__30);
                State = 274;
                _localctx.returnType = return_type();
                State = 275;
                _localctx.name = Match(IDENTIFIER);
                State = 276;
                Match(T__5);
                State = 285;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << T__2) | (1L << LIST))) != 0))
                {
                    {
                        State = 277;
                        formal_parameter();
                        State = 282;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        while (_la == T__23)
                        {
                            {
                                {
                                    State = 278;
                                    Match(T__23);
                                    State = 279;
                                    formal_parameter();
                                }
                            }
                            State = 284;
                            ErrorHandler.Sync(this);
                            _la = TokenStream.LA(1);
                        }
                    }
                }

                State = 287;
                Match(T__6);
                State = 288;
                block();
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class Return_typeContext : ParserRuleContext
    {
        [System.Diagnostics.DebuggerNonUserCode]
        public TypeContext type()
        {
            return GetRuleContext<TypeContext>(0);
        }
        [System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VOID() { return GetToken(SimpletonParser.VOID, 0); }
        [System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(SimpletonParser.IDENTIFIER, 0); }
        public Return_typeContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_return_type; } }
        [System.Diagnostics.DebuggerNonUserCode]
        public override void EnterRule(IParseTreeListener listener)
        {
            ISimpletonListener typedListener = listener as ISimpletonListener;
            if (typedListener != null) typedListener.EnterReturn_type(this);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public override void ExitRule(IParseTreeListener listener)
        {
            ISimpletonListener typedListener = listener as ISimpletonListener;
            if (typedListener != null) typedListener.ExitReturn_type(this);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
        {
            ISimpletonVisitor<TResult> typedVisitor = visitor as ISimpletonVisitor<TResult>;
            if (typedVisitor != null) return typedVisitor.VisitReturn_type(this);
            else return visitor.VisitChildren(this);
        }
    }

    [RuleVersion(0)]
    public Return_typeContext return_type()
    {
        Return_typeContext _localctx = new Return_typeContext(Context, State);
        EnterRule(_localctx, 40, RULE_return_type);
        try
        {
            State = 293;
            ErrorHandler.Sync(this);
            switch (TokenStream.LA(1))
            {
                case T__0:
                case T__1:
                case T__2:
                case LIST:
                    EnterOuterAlt(_localctx, 1);
                    {
                        State = 290;
                        type();
                    }
                    break;
                case VOID:
                    EnterOuterAlt(_localctx, 2);
                    {
                        State = 291;
                        Match(VOID);
                    }
                    break;
                case IDENTIFIER:
                    EnterOuterAlt(_localctx, 3);
                    {
                        State = 292;
                        Match(IDENTIFIER);
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class Formal_parameterContext : ParserRuleContext
    {
        [System.Diagnostics.DebuggerNonUserCode]
        public TypeContext type()
        {
            return GetRuleContext<TypeContext>(0);
        }
        [System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(SimpletonParser.IDENTIFIER, 0); }
        public Formal_parameterContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_formal_parameter; } }
        [System.Diagnostics.DebuggerNonUserCode]
        public override void EnterRule(IParseTreeListener listener)
        {
            ISimpletonListener typedListener = listener as ISimpletonListener;
            if (typedListener != null) typedListener.EnterFormal_parameter(this);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public override void ExitRule(IParseTreeListener listener)
        {
            ISimpletonListener typedListener = listener as ISimpletonListener;
            if (typedListener != null) typedListener.ExitFormal_parameter(this);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
        {
            ISimpletonVisitor<TResult> typedVisitor = visitor as ISimpletonVisitor<TResult>;
            if (typedVisitor != null) return typedVisitor.VisitFormal_parameter(this);
            else return visitor.VisitChildren(this);
        }
    }

    [RuleVersion(0)]
    public Formal_parameterContext formal_parameter()
    {
        Formal_parameterContext _localctx = new Formal_parameterContext(Context, State);
        EnterRule(_localctx, 42, RULE_formal_parameter);
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 295;
                type();
                State = 296;
                Match(IDENTIFIER);
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class StmtContext : ParserRuleContext
    {
        [System.Diagnostics.DebuggerNonUserCode]
        public If_else_stmtContext if_else_stmt()
        {
            return GetRuleContext<If_else_stmtContext>(0);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public Switch_stmtContext switch_stmt()
        {
            return GetRuleContext<Switch_stmtContext>(0);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public While_stmtContext while_stmt()
        {
            return GetRuleContext<While_stmtContext>(0);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public Foreach_stmtContext foreach_stmt()
        {
            return GetRuleContext<Foreach_stmtContext>(0);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public Variable_declContext variable_decl()
        {
            return GetRuleContext<Variable_declContext>(0);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public List_declContext list_decl()
        {
            return GetRuleContext<List_declContext>(0);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public Const_variable_declContext const_variable_decl()
        {
            return GetRuleContext<Const_variable_declContext>(0);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public Jump_stmtContext jump_stmt()
        {
            return GetRuleContext<Jump_stmtContext>(0);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public ExprContext expr()
        {
            return GetRuleContext<ExprContext>(0);
        }
        [System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE() { return GetToken(SimpletonParser.NEWLINE, 0); }
        [System.Diagnostics.DebuggerNonUserCode]
        public Assign_stmtContext assign_stmt()
        {
            return GetRuleContext<Assign_stmtContext>(0);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public Compound_assign_stmtContext compound_assign_stmt()
        {
            return GetRuleContext<Compound_assign_stmtContext>(0);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public Ternary_stmtContext ternary_stmt()
        {
            return GetRuleContext<Ternary_stmtContext>(0);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public BlockContext block()
        {
            return GetRuleContext<BlockContext>(0);
        }
        public StmtContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_stmt; } }
        [System.Diagnostics.DebuggerNonUserCode]
        public override void EnterRule(IParseTreeListener listener)
        {
            ISimpletonListener typedListener = listener as ISimpletonListener;
            if (typedListener != null) typedListener.EnterStmt(this);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public override void ExitRule(IParseTreeListener listener)
        {
            ISimpletonListener typedListener = listener as ISimpletonListener;
            if (typedListener != null) typedListener.ExitStmt(this);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
        {
            ISimpletonVisitor<TResult> typedVisitor = visitor as ISimpletonVisitor<TResult>;
            if (typedVisitor != null) return typedVisitor.VisitStmt(this);
            else return visitor.VisitChildren(this);
        }
    }

    [RuleVersion(0)]
    public StmtContext stmt()
    {
        StmtContext _localctx = new StmtContext(Context, State);
        EnterRule(_localctx, 44, RULE_stmt);
        try
        {
            State = 313;
            ErrorHandler.Sync(this);
            switch (Interpreter.AdaptivePredict(TokenStream, 27, Context))
            {
                case 1:
                    EnterOuterAlt(_localctx, 1);
                    {
                        State = 298;
                        if_else_stmt();
                    }
                    break;
                case 2:
                    EnterOuterAlt(_localctx, 2);
                    {
                        State = 299;
                        switch_stmt();
                    }
                    break;
                case 3:
                    EnterOuterAlt(_localctx, 3);
                    {
                        State = 300;
                        while_stmt();
                    }
                    break;
                case 4:
                    EnterOuterAlt(_localctx, 4);
                    {
                        State = 301;
                        foreach_stmt();
                    }
                    break;
                case 5:
                    EnterOuterAlt(_localctx, 5);
                    {
                        State = 302;
                        variable_decl();
                    }
                    break;
                case 6:
                    EnterOuterAlt(_localctx, 6);
                    {
                        State = 303;
                        list_decl();
                    }
                    break;
                case 7:
                    EnterOuterAlt(_localctx, 7);
                    {
                        State = 304;
                        const_variable_decl();
                    }
                    break;
                case 8:
                    EnterOuterAlt(_localctx, 8);
                    {
                        State = 305;
                        jump_stmt();
                    }
                    break;
                case 9:
                    EnterOuterAlt(_localctx, 9);
                    {
                        State = 306;
                        expr(0);
                        State = 307;
                        Match(NEWLINE);
                    }
                    break;
                case 10:
                    EnterOuterAlt(_localctx, 10);
                    {
                        State = 309;
                        assign_stmt();
                    }
                    break;
                case 11:
                    EnterOuterAlt(_localctx, 11);
                    {
                        State = 310;
                        compound_assign_stmt();
                    }
                    break;
                case 12:
                    EnterOuterAlt(_localctx, 12);
                    {
                        State = 311;
                        ternary_stmt();
                    }
                    break;
                case 13:
                    EnterOuterAlt(_localctx, 13);
                    {
                        State = 312;
                        block();
                    }
                    break;
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class Jump_stmtContext : ParserRuleContext
    {
        public IToken jump;
        [System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE() { return GetToken(SimpletonParser.NEWLINE, 0); }
        [System.Diagnostics.DebuggerNonUserCode]
        public Return_stmtContext return_stmt()
        {
            return GetRuleContext<Return_stmtContext>(0);
        }
        public Jump_stmtContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_jump_stmt; } }
        [System.Diagnostics.DebuggerNonUserCode]
        public override void EnterRule(IParseTreeListener listener)
        {
            ISimpletonListener typedListener = listener as ISimpletonListener;
            if (typedListener != null) typedListener.EnterJump_stmt(this);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public override void ExitRule(IParseTreeListener listener)
        {
            ISimpletonListener typedListener = listener as ISimpletonListener;
            if (typedListener != null) typedListener.ExitJump_stmt(this);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
        {
            ISimpletonVisitor<TResult> typedVisitor = visitor as ISimpletonVisitor<TResult>;
            if (typedVisitor != null) return typedVisitor.VisitJump_stmt(this);
            else return visitor.VisitChildren(this);
        }
    }

    [RuleVersion(0)]
    public Jump_stmtContext jump_stmt()
    {
        Jump_stmtContext _localctx = new Jump_stmtContext(Context, State);
        EnterRule(_localctx, 46, RULE_jump_stmt);
        int _la;
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 317;
                ErrorHandler.Sync(this);
                switch (TokenStream.LA(1))
                {
                    case T__33:
                        {
                            State = 315;
                            return_stmt();
                        }
                        break;
                    case T__31:
                    case T__32:
                        {
                            State = 316;
                            _localctx.jump = TokenStream.LT(1);
                            _la = TokenStream.LA(1);
                            if (!(_la == T__31 || _la == T__32))
                            {
                                _localctx.jump = ErrorHandler.RecoverInline(this);
                            }
                            else
                            {
                                ErrorHandler.ReportMatch(this);
                                Consume();
                            }
                        }
                        break;
                    default:
                        throw new NoViableAltException(this);
                }
                State = 319;
                Match(NEWLINE);
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class Return_stmtContext : ParserRuleContext
    {
        [System.Diagnostics.DebuggerNonUserCode]
        public ExprContext expr()
        {
            return GetRuleContext<ExprContext>(0);
        }
        public Return_stmtContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_return_stmt; } }
        [System.Diagnostics.DebuggerNonUserCode]
        public override void EnterRule(IParseTreeListener listener)
        {
            ISimpletonListener typedListener = listener as ISimpletonListener;
            if (typedListener != null) typedListener.EnterReturn_stmt(this);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public override void ExitRule(IParseTreeListener listener)
        {
            ISimpletonListener typedListener = listener as ISimpletonListener;
            if (typedListener != null) typedListener.ExitReturn_stmt(this);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
        {
            ISimpletonVisitor<TResult> typedVisitor = visitor as ISimpletonVisitor<TResult>;
            if (typedVisitor != null) return typedVisitor.VisitReturn_stmt(this);
            else return visitor.VisitChildren(this);
        }
    }

    [RuleVersion(0)]
    public Return_stmtContext return_stmt()
    {
        Return_stmtContext _localctx = new Return_stmtContext(Context, State);
        EnterRule(_localctx, 48, RULE_return_stmt);
        int _la;
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 321;
                Match(T__33);
                State = 323;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__5) | (1L << T__17) | (1L << NUMBER) | (1L << TEXT) | (1L << BOOlEAN) | (1L << NAN) | (1L << IDENTIFIER))) != 0))
                {
                    {
                        State = 322;
                        expr(0);
                    }
                }

            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class Switch_stmtContext : ParserRuleContext
    {
        [System.Diagnostics.DebuggerNonUserCode]
        public ExprContext expr()
        {
            return GetRuleContext<ExprContext>(0);
        }
        [System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NEWLINE() { return GetTokens(SimpletonParser.NEWLINE); }
        [System.Diagnostics.DebuggerNonUserCode]
        public ITerminalNode NEWLINE(int i)
        {
            return GetToken(SimpletonParser.NEWLINE, i);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public Switch_caseContext[] switch_case()
        {
            return GetRuleContexts<Switch_caseContext>();
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public Switch_caseContext switch_case(int i)
        {
            return GetRuleContext<Switch_caseContext>(i);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public Switch_case_defaultContext switch_case_default()
        {
            return GetRuleContext<Switch_case_defaultContext>(0);
        }
        public Switch_stmtContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_switch_stmt; } }
        [System.Diagnostics.DebuggerNonUserCode]
        public override void EnterRule(IParseTreeListener listener)
        {
            ISimpletonListener typedListener = listener as ISimpletonListener;
            if (typedListener != null) typedListener.EnterSwitch_stmt(this);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public override void ExitRule(IParseTreeListener listener)
        {
            ISimpletonListener typedListener = listener as ISimpletonListener;
            if (typedListener != null) typedListener.ExitSwitch_stmt(this);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
        {
            ISimpletonVisitor<TResult> typedVisitor = visitor as ISimpletonVisitor<TResult>;
            if (typedVisitor != null) return typedVisitor.VisitSwitch_stmt(this);
            else return visitor.VisitChildren(this);
        }
    }

    [RuleVersion(0)]
    public Switch_stmtContext switch_stmt()
    {
        Switch_stmtContext _localctx = new Switch_stmtContext(Context, State);
        EnterRule(_localctx, 50, RULE_switch_stmt);
        int _la;
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 325;
                Match(T__34);
                State = 326;
                expr(0);
                State = 328;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                if (_la == NEWLINE)
                {
                    {
                        State = 327;
                        Match(NEWLINE);
                    }
                }

                State = 330;
                Match(T__26);
                State = 331;
                Match(NEWLINE);
                State = 335;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                while (_la == T__35)
                {
                    {
                        {
                            State = 332;
                            switch_case();
                        }
                    }
                    State = 337;
                    ErrorHandler.Sync(this);
                    _la = TokenStream.LA(1);
                }
                State = 339;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                if (_la == T__37)
                {
                    {
                        State = 338;
                        switch_case_default();
                    }
                }

                State = 341;
                Match(T__27);
                State = 342;
                Match(NEWLINE);
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class Switch_caseContext : ParserRuleContext
    {
        [System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NEWLINE() { return GetTokens(SimpletonParser.NEWLINE); }
        [System.Diagnostics.DebuggerNonUserCode]
        public ITerminalNode NEWLINE(int i)
        {
            return GetToken(SimpletonParser.NEWLINE, i);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public ExprContext[] expr()
        {
            return GetRuleContexts<ExprContext>();
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public ExprContext expr(int i)
        {
            return GetRuleContext<ExprContext>(i);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public StmtContext[] stmt()
        {
            return GetRuleContexts<StmtContext>();
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public StmtContext stmt(int i)
        {
            return GetRuleContext<StmtContext>(i);
        }
        public Switch_caseContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_switch_case; } }
        [System.Diagnostics.DebuggerNonUserCode]
        public override void EnterRule(IParseTreeListener listener)
        {
            ISimpletonListener typedListener = listener as ISimpletonListener;
            if (typedListener != null) typedListener.EnterSwitch_case(this);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public override void ExitRule(IParseTreeListener listener)
        {
            ISimpletonListener typedListener = listener as ISimpletonListener;
            if (typedListener != null) typedListener.ExitSwitch_case(this);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
        {
            ISimpletonVisitor<TResult> typedVisitor = visitor as ISimpletonVisitor<TResult>;
            if (typedVisitor != null) return typedVisitor.VisitSwitch_case(this);
            else return visitor.VisitChildren(this);
        }
    }

    [RuleVersion(0)]
    public Switch_caseContext switch_case()
    {
        Switch_caseContext _localctx = new Switch_caseContext(Context, State);
        EnterRule(_localctx, 52, RULE_switch_case);
        int _la;
        try
        {
            int _alt;
            EnterOuterAlt(_localctx, 1);
            {
                State = 348;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                do
                {
                    {
                        {
                            State = 344;
                            Match(T__35);
                            State = 345;
                            expr(0);
                            State = 346;
                            Match(T__36);
                        }
                    }
                    State = 350;
                    ErrorHandler.Sync(this);
                    _la = TokenStream.LA(1);
                } while (_la == T__35);
                State = 352;
                Match(NEWLINE);
                State = 356;
                ErrorHandler.Sync(this);
                _alt = Interpreter.AdaptivePredict(TokenStream, 34, Context);
                while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER)
                {
                    if (_alt == 1)
                    {
                        {
                            {
                                State = 353;
                                stmt();
                            }
                        }
                    }
                    State = 358;
                    ErrorHandler.Sync(this);
                    _alt = Interpreter.AdaptivePredict(TokenStream, 34, Context);
                }
                State = 359;
                Match(T__31);
                State = 360;
                Match(NEWLINE);
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class Switch_case_defaultContext : ParserRuleContext
    {
        [System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NEWLINE() { return GetTokens(SimpletonParser.NEWLINE); }
        [System.Diagnostics.DebuggerNonUserCode]
        public ITerminalNode NEWLINE(int i)
        {
            return GetToken(SimpletonParser.NEWLINE, i);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public StmtContext[] stmt()
        {
            return GetRuleContexts<StmtContext>();
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public StmtContext stmt(int i)
        {
            return GetRuleContext<StmtContext>(i);
        }
        public Switch_case_defaultContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_switch_case_default; } }
        [System.Diagnostics.DebuggerNonUserCode]
        public override void EnterRule(IParseTreeListener listener)
        {
            ISimpletonListener typedListener = listener as ISimpletonListener;
            if (typedListener != null) typedListener.EnterSwitch_case_default(this);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public override void ExitRule(IParseTreeListener listener)
        {
            ISimpletonListener typedListener = listener as ISimpletonListener;
            if (typedListener != null) typedListener.ExitSwitch_case_default(this);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
        {
            ISimpletonVisitor<TResult> typedVisitor = visitor as ISimpletonVisitor<TResult>;
            if (typedVisitor != null) return typedVisitor.VisitSwitch_case_default(this);
            else return visitor.VisitChildren(this);
        }
    }

    [RuleVersion(0)]
    public Switch_case_defaultContext switch_case_default()
    {
        Switch_case_defaultContext _localctx = new Switch_case_defaultContext(Context, State);
        EnterRule(_localctx, 54, RULE_switch_case_default);
        try
        {
            int _alt;
            EnterOuterAlt(_localctx, 1);
            {
                State = 362;
                Match(T__37);
                State = 363;
                Match(NEWLINE);
                State = 367;
                ErrorHandler.Sync(this);
                _alt = Interpreter.AdaptivePredict(TokenStream, 35, Context);
                while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER)
                {
                    if (_alt == 1)
                    {
                        {
                            {
                                State = 364;
                                stmt();
                            }
                        }
                    }
                    State = 369;
                    ErrorHandler.Sync(this);
                    _alt = Interpreter.AdaptivePredict(TokenStream, 35, Context);
                }
                State = 370;
                Match(T__31);
                State = 371;
                Match(NEWLINE);
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class If_else_stmtContext : ParserRuleContext
    {
        [System.Diagnostics.DebuggerNonUserCode]
        public ExprContext expr()
        {
            return GetRuleContext<ExprContext>(0);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public BlockContext block()
        {
            return GetRuleContext<BlockContext>(0);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public Else_if_stmtContext[] else_if_stmt()
        {
            return GetRuleContexts<Else_if_stmtContext>();
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public Else_if_stmtContext else_if_stmt(int i)
        {
            return GetRuleContext<Else_if_stmtContext>(i);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public Else_stmtContext else_stmt()
        {
            return GetRuleContext<Else_stmtContext>(0);
        }
        public If_else_stmtContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_if_else_stmt; } }
        [System.Diagnostics.DebuggerNonUserCode]
        public override void EnterRule(IParseTreeListener listener)
        {
            ISimpletonListener typedListener = listener as ISimpletonListener;
            if (typedListener != null) typedListener.EnterIf_else_stmt(this);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public override void ExitRule(IParseTreeListener listener)
        {
            ISimpletonListener typedListener = listener as ISimpletonListener;
            if (typedListener != null) typedListener.ExitIf_else_stmt(this);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
        {
            ISimpletonVisitor<TResult> typedVisitor = visitor as ISimpletonVisitor<TResult>;
            if (typedVisitor != null) return typedVisitor.VisitIf_else_stmt(this);
            else return visitor.VisitChildren(this);
        }
    }

    [RuleVersion(0)]
    public If_else_stmtContext if_else_stmt()
    {
        If_else_stmtContext _localctx = new If_else_stmtContext(Context, State);
        EnterRule(_localctx, 56, RULE_if_else_stmt);
        int _la;
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 373;
                Match(T__38);
                State = 374;
                expr(0);
                State = 375;
                block();
                State = 379;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                while (_la == T__39)
                {
                    {
                        {
                            State = 376;
                            else_if_stmt();
                        }
                    }
                    State = 381;
                    ErrorHandler.Sync(this);
                    _la = TokenStream.LA(1);
                }
                State = 383;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                if (_la == T__40)
                {
                    {
                        State = 382;
                        else_stmt();
                    }
                }

            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class Else_if_stmtContext : ParserRuleContext
    {
        [System.Diagnostics.DebuggerNonUserCode]
        public ExprContext expr()
        {
            return GetRuleContext<ExprContext>(0);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public BlockContext block()
        {
            return GetRuleContext<BlockContext>(0);
        }
        public Else_if_stmtContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_else_if_stmt; } }
        [System.Diagnostics.DebuggerNonUserCode]
        public override void EnterRule(IParseTreeListener listener)
        {
            ISimpletonListener typedListener = listener as ISimpletonListener;
            if (typedListener != null) typedListener.EnterElse_if_stmt(this);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public override void ExitRule(IParseTreeListener listener)
        {
            ISimpletonListener typedListener = listener as ISimpletonListener;
            if (typedListener != null) typedListener.ExitElse_if_stmt(this);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
        {
            ISimpletonVisitor<TResult> typedVisitor = visitor as ISimpletonVisitor<TResult>;
            if (typedVisitor != null) return typedVisitor.VisitElse_if_stmt(this);
            else return visitor.VisitChildren(this);
        }
    }

    [RuleVersion(0)]
    public Else_if_stmtContext else_if_stmt()
    {
        Else_if_stmtContext _localctx = new Else_if_stmtContext(Context, State);
        EnterRule(_localctx, 58, RULE_else_if_stmt);
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 385;
                Match(T__39);
                State = 386;
                expr(0);
                State = 387;
                block();
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class Else_stmtContext : ParserRuleContext
    {
        [System.Diagnostics.DebuggerNonUserCode]
        public BlockContext block()
        {
            return GetRuleContext<BlockContext>(0);
        }
        public Else_stmtContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_else_stmt; } }
        [System.Diagnostics.DebuggerNonUserCode]
        public override void EnterRule(IParseTreeListener listener)
        {
            ISimpletonListener typedListener = listener as ISimpletonListener;
            if (typedListener != null) typedListener.EnterElse_stmt(this);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public override void ExitRule(IParseTreeListener listener)
        {
            ISimpletonListener typedListener = listener as ISimpletonListener;
            if (typedListener != null) typedListener.ExitElse_stmt(this);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
        {
            ISimpletonVisitor<TResult> typedVisitor = visitor as ISimpletonVisitor<TResult>;
            if (typedVisitor != null) return typedVisitor.VisitElse_stmt(this);
            else return visitor.VisitChildren(this);
        }
    }

    [RuleVersion(0)]
    public Else_stmtContext else_stmt()
    {
        Else_stmtContext _localctx = new Else_stmtContext(Context, State);
        EnterRule(_localctx, 60, RULE_else_stmt);
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 389;
                Match(T__40);
                State = 390;
                block();
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class While_stmtContext : ParserRuleContext
    {
        [System.Diagnostics.DebuggerNonUserCode]
        public ExprContext expr()
        {
            return GetRuleContext<ExprContext>(0);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public BlockContext block()
        {
            return GetRuleContext<BlockContext>(0);
        }
        public While_stmtContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_while_stmt; } }
        [System.Diagnostics.DebuggerNonUserCode]
        public override void EnterRule(IParseTreeListener listener)
        {
            ISimpletonListener typedListener = listener as ISimpletonListener;
            if (typedListener != null) typedListener.EnterWhile_stmt(this);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public override void ExitRule(IParseTreeListener listener)
        {
            ISimpletonListener typedListener = listener as ISimpletonListener;
            if (typedListener != null) typedListener.ExitWhile_stmt(this);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
        {
            ISimpletonVisitor<TResult> typedVisitor = visitor as ISimpletonVisitor<TResult>;
            if (typedVisitor != null) return typedVisitor.VisitWhile_stmt(this);
            else return visitor.VisitChildren(this);
        }
    }

    [RuleVersion(0)]
    public While_stmtContext while_stmt()
    {
        While_stmtContext _localctx = new While_stmtContext(Context, State);
        EnterRule(_localctx, 62, RULE_while_stmt);
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 392;
                Match(T__41);
                State = 393;
                expr(0);
                State = 394;
                block();
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class Foreach_stmtContext : ParserRuleContext
    {
        public IToken element;
        [System.Diagnostics.DebuggerNonUserCode]
        public TypeContext type()
        {
            return GetRuleContext<TypeContext>(0);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public IdContext id()
        {
            return GetRuleContext<IdContext>(0);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public BlockContext block()
        {
            return GetRuleContext<BlockContext>(0);
        }
        [System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(SimpletonParser.IDENTIFIER, 0); }
        public Foreach_stmtContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_foreach_stmt; } }
        [System.Diagnostics.DebuggerNonUserCode]
        public override void EnterRule(IParseTreeListener listener)
        {
            ISimpletonListener typedListener = listener as ISimpletonListener;
            if (typedListener != null) typedListener.EnterForeach_stmt(this);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public override void ExitRule(IParseTreeListener listener)
        {
            ISimpletonListener typedListener = listener as ISimpletonListener;
            if (typedListener != null) typedListener.ExitForeach_stmt(this);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
        {
            ISimpletonVisitor<TResult> typedVisitor = visitor as ISimpletonVisitor<TResult>;
            if (typedVisitor != null) return typedVisitor.VisitForeach_stmt(this);
            else return visitor.VisitChildren(this);
        }
    }

    [RuleVersion(0)]
    public Foreach_stmtContext foreach_stmt()
    {
        Foreach_stmtContext _localctx = new Foreach_stmtContext(Context, State);
        EnterRule(_localctx, 64, RULE_foreach_stmt);
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 396;
                Match(T__42);
                State = 397;
                type();
                State = 398;
                _localctx.element = Match(IDENTIFIER);
                State = 399;
                Match(T__43);
                State = 400;
                id(0);
                State = 401;
                block();
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class BlockContext : ParserRuleContext
    {
        [System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NEWLINE() { return GetTokens(SimpletonParser.NEWLINE); }
        [System.Diagnostics.DebuggerNonUserCode]
        public ITerminalNode NEWLINE(int i)
        {
            return GetToken(SimpletonParser.NEWLINE, i);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public StmtContext[] stmt()
        {
            return GetRuleContexts<StmtContext>();
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public StmtContext stmt(int i)
        {
            return GetRuleContext<StmtContext>(i);
        }
        public BlockContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_block; } }
        [System.Diagnostics.DebuggerNonUserCode]
        public override void EnterRule(IParseTreeListener listener)
        {
            ISimpletonListener typedListener = listener as ISimpletonListener;
            if (typedListener != null) typedListener.EnterBlock(this);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public override void ExitRule(IParseTreeListener listener)
        {
            ISimpletonListener typedListener = listener as ISimpletonListener;
            if (typedListener != null) typedListener.ExitBlock(this);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
        {
            ISimpletonVisitor<TResult> typedVisitor = visitor as ISimpletonVisitor<TResult>;
            if (typedVisitor != null) return typedVisitor.VisitBlock(this);
            else return visitor.VisitChildren(this);
        }
    }

    [RuleVersion(0)]
    public BlockContext block()
    {
        BlockContext _localctx = new BlockContext(Context, State);
        EnterRule(_localctx, 66, RULE_block);
        int _la;
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 404;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                if (_la == NEWLINE)
                {
                    {
                        State = 403;
                        Match(NEWLINE);
                    }
                }

                State = 406;
                Match(T__26);
                State = 407;
                Match(NEWLINE);
                State = 411;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << T__2) | (1L << T__5) | (1L << T__17) | (1L << T__25) | (1L << T__26) | (1L << T__31) | (1L << T__32) | (1L << T__33) | (1L << T__34) | (1L << T__38) | (1L << T__41) | (1L << T__42) | (1L << LIST) | (1L << NEWLINE) | (1L << NUMBER) | (1L << TEXT) | (1L << BOOlEAN) | (1L << NAN) | (1L << IDENTIFIER))) != 0))
                {
                    {
                        {
                            State = 408;
                            stmt();
                        }
                    }
                    State = 413;
                    ErrorHandler.Sync(this);
                    _la = TokenStream.LA(1);
                }
                State = 414;
                Match(T__27);
                State = 416;
                ErrorHandler.Sync(this);
                switch (Interpreter.AdaptivePredict(TokenStream, 40, Context))
                {
                    case 1:
                        {
                            State = 415;
                            Match(NEWLINE);
                        }
                        break;
                }
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class Assign_stmtContext : ParserRuleContext
    {
        [System.Diagnostics.DebuggerNonUserCode]
        public Id_assignContext id_assign()
        {
            return GetRuleContext<Id_assignContext>(0);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public ExprContext expr()
        {
            return GetRuleContext<ExprContext>(0);
        }
        [System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE() { return GetToken(SimpletonParser.NEWLINE, 0); }
        public Assign_stmtContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_assign_stmt; } }
        [System.Diagnostics.DebuggerNonUserCode]
        public override void EnterRule(IParseTreeListener listener)
        {
            ISimpletonListener typedListener = listener as ISimpletonListener;
            if (typedListener != null) typedListener.EnterAssign_stmt(this);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public override void ExitRule(IParseTreeListener listener)
        {
            ISimpletonListener typedListener = listener as ISimpletonListener;
            if (typedListener != null) typedListener.ExitAssign_stmt(this);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
        {
            ISimpletonVisitor<TResult> typedVisitor = visitor as ISimpletonVisitor<TResult>;
            if (typedVisitor != null) return typedVisitor.VisitAssign_stmt(this);
            else return visitor.VisitChildren(this);
        }
    }

    [RuleVersion(0)]
    public Assign_stmtContext assign_stmt()
    {
        Assign_stmtContext _localctx = new Assign_stmtContext(Context, State);
        EnterRule(_localctx, 68, RULE_assign_stmt);
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 418;
                id_assign(0);
                State = 419;
                Match(T__24);
                State = 420;
                expr(0);
                State = 421;
                Match(NEWLINE);
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class Ternary_stmtContext : ParserRuleContext
    {
        public ExprContext ifExpr;
        public ExprContext cond;
        public ExprContext elseExpr;
        [System.Diagnostics.DebuggerNonUserCode]
        public Id_assignContext id_assign()
        {
            return GetRuleContext<Id_assignContext>(0);
        }
        [System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE() { return GetToken(SimpletonParser.NEWLINE, 0); }
        [System.Diagnostics.DebuggerNonUserCode]
        public ExprContext[] expr()
        {
            return GetRuleContexts<ExprContext>();
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public ExprContext expr(int i)
        {
            return GetRuleContext<ExprContext>(i);
        }
        public Ternary_stmtContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_ternary_stmt; } }
        [System.Diagnostics.DebuggerNonUserCode]
        public override void EnterRule(IParseTreeListener listener)
        {
            ISimpletonListener typedListener = listener as ISimpletonListener;
            if (typedListener != null) typedListener.EnterTernary_stmt(this);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public override void ExitRule(IParseTreeListener listener)
        {
            ISimpletonListener typedListener = listener as ISimpletonListener;
            if (typedListener != null) typedListener.ExitTernary_stmt(this);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
        {
            ISimpletonVisitor<TResult> typedVisitor = visitor as ISimpletonVisitor<TResult>;
            if (typedVisitor != null) return typedVisitor.VisitTernary_stmt(this);
            else return visitor.VisitChildren(this);
        }
    }

    [RuleVersion(0)]
    public Ternary_stmtContext ternary_stmt()
    {
        Ternary_stmtContext _localctx = new Ternary_stmtContext(Context, State);
        EnterRule(_localctx, 70, RULE_ternary_stmt);
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 423;
                id_assign(0);
                State = 424;
                Match(T__24);
                State = 425;
                _localctx.ifExpr = expr(0);
                State = 426;
                Match(T__38);
                State = 427;
                _localctx.cond = expr(0);
                State = 428;
                Match(T__40);
                State = 429;
                _localctx.elseExpr = expr(0);
                State = 430;
                Match(NEWLINE);
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class Compound_assign_stmtContext : ParserRuleContext
    {
        public IToken compoundOP;
        [System.Diagnostics.DebuggerNonUserCode]
        public Id_assignContext id_assign()
        {
            return GetRuleContext<Id_assignContext>(0);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public ExprContext expr()
        {
            return GetRuleContext<ExprContext>(0);
        }
        [System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE() { return GetToken(SimpletonParser.NEWLINE, 0); }
        public Compound_assign_stmtContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_compound_assign_stmt; } }
        [System.Diagnostics.DebuggerNonUserCode]
        public override void EnterRule(IParseTreeListener listener)
        {
            ISimpletonListener typedListener = listener as ISimpletonListener;
            if (typedListener != null) typedListener.EnterCompound_assign_stmt(this);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public override void ExitRule(IParseTreeListener listener)
        {
            ISimpletonListener typedListener = listener as ISimpletonListener;
            if (typedListener != null) typedListener.ExitCompound_assign_stmt(this);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
        {
            ISimpletonVisitor<TResult> typedVisitor = visitor as ISimpletonVisitor<TResult>;
            if (typedVisitor != null) return typedVisitor.VisitCompound_assign_stmt(this);
            else return visitor.VisitChildren(this);
        }
    }

    [RuleVersion(0)]
    public Compound_assign_stmtContext compound_assign_stmt()
    {
        Compound_assign_stmtContext _localctx = new Compound_assign_stmtContext(Context, State);
        EnterRule(_localctx, 72, RULE_compound_assign_stmt);
        int _la;
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 432;
                id_assign(0);
                State = 433;
                _localctx.compoundOP = TokenStream.LT(1);
                _la = TokenStream.LA(1);
                if (!((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__44) | (1L << T__45) | (1L << T__46) | (1L << T__47))) != 0)))
                {
                    _localctx.compoundOP = ErrorHandler.RecoverInline(this);
                }
                else
                {
                    ErrorHandler.ReportMatch(this);
                    Consume();
                }
                State = 434;
                expr(0);
                State = 435;
                Match(NEWLINE);
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class Id_assignContext : ParserRuleContext
    {
        [System.Diagnostics.DebuggerNonUserCode]
        public Ids_assignContext ids_assign()
        {
            return GetRuleContext<Ids_assignContext>(0);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public Id_assignContext id_assign()
        {
            return GetRuleContext<Id_assignContext>(0);
        }
        public Id_assignContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_id_assign; } }
        [System.Diagnostics.DebuggerNonUserCode]
        public override void EnterRule(IParseTreeListener listener)
        {
            ISimpletonListener typedListener = listener as ISimpletonListener;
            if (typedListener != null) typedListener.EnterId_assign(this);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public override void ExitRule(IParseTreeListener listener)
        {
            ISimpletonListener typedListener = listener as ISimpletonListener;
            if (typedListener != null) typedListener.ExitId_assign(this);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
        {
            ISimpletonVisitor<TResult> typedVisitor = visitor as ISimpletonVisitor<TResult>;
            if (typedVisitor != null) return typedVisitor.VisitId_assign(this);
            else return visitor.VisitChildren(this);
        }
    }

    [RuleVersion(0)]
    public Id_assignContext id_assign()
    {
        return id_assign(0);
    }

    private Id_assignContext id_assign(int _p)
    {
        ParserRuleContext _parentctx = Context;
        int _parentState = State;
        Id_assignContext _localctx = new Id_assignContext(Context, _parentState);
        Id_assignContext _prevctx = _localctx;
        int _startState = 74;
        EnterRecursionRule(_localctx, 74, RULE_id_assign, _p);
        try
        {
            int _alt;
            EnterOuterAlt(_localctx, 1);
            {
                {
                    State = 438;
                    ids_assign();
                }
                Context.Stop = TokenStream.LT(-1);
                State = 445;
                ErrorHandler.Sync(this);
                _alt = Interpreter.AdaptivePredict(TokenStream, 41, Context);
                while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER)
                {
                    if (_alt == 1)
                    {
                        if (ParseListeners != null)
                            TriggerExitRuleEvent();
                        _prevctx = _localctx;
                        {
                            {
                                _localctx = new Id_assignContext(_parentctx, _parentState);
                                PushNewRecursionContext(_localctx, _startState, RULE_id_assign);
                                State = 440;
                                if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
                                State = 441;
                                Match(T__20);
                                State = 442;
                                ids_assign();
                            }
                        }
                    }
                    State = 447;
                    ErrorHandler.Sync(this);
                    _alt = Interpreter.AdaptivePredict(TokenStream, 41, Context);
                }
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            UnrollRecursionContexts(_parentctx);
        }
        return _localctx;
    }

    public partial class Ids_assignContext : ParserRuleContext
    {
        [System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(SimpletonParser.IDENTIFIER, 0); }
        [System.Diagnostics.DebuggerNonUserCode]
        public SubscriptContext subscript()
        {
            return GetRuleContext<SubscriptContext>(0);
        }
        public Ids_assignContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_ids_assign; } }
        [System.Diagnostics.DebuggerNonUserCode]
        public override void EnterRule(IParseTreeListener listener)
        {
            ISimpletonListener typedListener = listener as ISimpletonListener;
            if (typedListener != null) typedListener.EnterIds_assign(this);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public override void ExitRule(IParseTreeListener listener)
        {
            ISimpletonListener typedListener = listener as ISimpletonListener;
            if (typedListener != null) typedListener.ExitIds_assign(this);
        }
        [System.Diagnostics.DebuggerNonUserCode]
        public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
        {
            ISimpletonVisitor<TResult> typedVisitor = visitor as ISimpletonVisitor<TResult>;
            if (typedVisitor != null) return typedVisitor.VisitIds_assign(this);
            else return visitor.VisitChildren(this);
        }
    }

    [RuleVersion(0)]
    public Ids_assignContext ids_assign()
    {
        Ids_assignContext _localctx = new Ids_assignContext(Context, State);
        EnterRule(_localctx, 76, RULE_ids_assign);
        try
        {
            State = 450;
            ErrorHandler.Sync(this);
            switch (Interpreter.AdaptivePredict(TokenStream, 42, Context))
            {
                case 1:
                    EnterOuterAlt(_localctx, 1);
                    {
                        State = 448;
                        Match(IDENTIFIER);
                    }
                    break;
                case 2:
                    EnterOuterAlt(_localctx, 2);
                    {
                        State = 449;
                        subscript();
                    }
                    break;
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex)
    {
        switch (ruleIndex)
        {
            case 4: return expr_sempred((ExprContext)_localctx, predIndex);
            case 5: return id_sempred((IdContext)_localctx, predIndex);
            case 37: return id_assign_sempred((Id_assignContext)_localctx, predIndex);
        }
        return true;
    }
    private bool expr_sempred(ExprContext _localctx, int predIndex)
    {
        switch (predIndex)
        {
            case 0: return Precpred(Context, 6);
            case 1: return Precpred(Context, 5);
            case 2: return Precpred(Context, 4);
            case 3: return Precpred(Context, 3);
            case 4: return Precpred(Context, 1);
        }
        return true;
    }
    private bool id_sempred(IdContext _localctx, int predIndex)
    {
        switch (predIndex)
        {
            case 5: return Precpred(Context, 2);
        }
        return true;
    }
    private bool id_assign_sempred(Id_assignContext _localctx, int predIndex)
    {
        switch (predIndex)
        {
            case 6: return Precpred(Context, 2);
        }
        return true;
    }

    private static char[] _serializedATN = {
        '\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786',
        '\x5964', '\x3', '>', '\x1C7', '\x4', '\x2', '\t', '\x2', '\x4', '\x3',
        '\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4',
        '\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b',
        '\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v',
        '\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t',
        '\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4',
        '\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t',
        '\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4',
        '\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t',
        '\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4',
        '\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t',
        '\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', '\x1F', '\x4',
        ' ', '\t', ' ', '\x4', '!', '\t', '!', '\x4', '\"', '\t', '\"', '\x4',
        '#', '\t', '#', '\x4', '$', '\t', '$', '\x4', '%', '\t', '%', '\x4', '&',
        '\t', '&', '\x4', '\'', '\t', '\'', '\x4', '(', '\t', '(', '\x3', '\x2',
        '\a', '\x2', 'R', '\n', '\x2', '\f', '\x2', '\xE', '\x2', 'U', '\v', '\x2',
        '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3',
        '\x3', '\x3', '\x5', '\x3', ']', '\n', '\x3', '\x3', '\x4', '\x3', '\x4',
        '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5',
        '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5',
        '\x5', '\x5', 'k', '\n', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6',
        '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6',
        '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6',
        '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x5', '\x6', '}', '\n', '\x6',
        '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6',
        '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6',
        '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6',
        '\a', '\x6', '\x8E', '\n', '\x6', '\f', '\x6', '\xE', '\x6', '\x91', '\v',
        '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a',
        '\x3', '\a', '\a', '\a', '\x99', '\n', '\a', '\f', '\a', '\xE', '\a',
        '\x9C', '\v', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x5', '\b',
        '\xA1', '\n', '\b', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t',
        '\x3', '\t', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x5', '\n', '\xAB',
        '\n', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\v', '\x3', '\v', '\x3',
        '\v', '\a', '\v', '\xB2', '\n', '\v', '\f', '\v', '\xE', '\v', '\xB5',
        '\v', '\v', '\x3', '\f', '\x3', '\f', '\x3', '\r', '\x3', '\r', '\x5',
        '\r', '\xBB', '\n', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x5',
        '\r', '\xC0', '\n', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\xE', '\x3',
        '\xE', '\x3', '\xE', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3',
        '\xF', '\x5', '\xF', '\xCB', '\n', '\xF', '\x3', '\xF', '\x3', '\xF',
        '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x5', '\xF', '\xD2', '\n',
        '\xF', '\x5', '\xF', '\xD4', '\n', '\xF', '\x3', '\xF', '\x3', '\xF',
        '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\a', '\x10',
        '\xDC', '\n', '\x10', '\f', '\x10', '\xE', '\x10', '\xDF', '\v', '\x10',
        '\x5', '\x10', '\xE1', '\n', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3',
        '\x11', '\x3', '\x11', '\x3', '\x11', '\x5', '\x11', '\xE8', '\n', '\x11',
        '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x6', '\x11', '\xED', '\n',
        '\x11', '\r', '\x11', '\xE', '\x11', '\xEE', '\x3', '\x11', '\x3', '\x11',
        '\x3', '\x11', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12',
        '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x5', '\x13', '\xFB', '\n',
        '\x13', '\x3', '\x13', '\x3', '\x13', '\x5', '\x13', '\xFF', '\n', '\x13',
        '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\a', '\x13', '\x104', '\n',
        '\x13', '\f', '\x13', '\xE', '\x13', '\x107', '\v', '\x13', '\x3', '\x13',
        '\x3', '\x13', '\x3', '\x13', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14',
        '\x5', '\x14', '\x10F', '\n', '\x14', '\x3', '\x14', '\x5', '\x14', '\x112',
        '\n', '\x14', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15',
        '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\a', '\x15', '\x11B', '\n',
        '\x15', '\f', '\x15', '\xE', '\x15', '\x11E', '\v', '\x15', '\x5', '\x15',
        '\x120', '\n', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3',
        '\x16', '\x3', '\x16', '\x3', '\x16', '\x5', '\x16', '\x128', '\n', '\x16',
        '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x18', '\x3', '\x18',
        '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18',
        '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18',
        '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x5', '\x18', '\x13C', '\n',
        '\x18', '\x3', '\x19', '\x3', '\x19', '\x5', '\x19', '\x140', '\n', '\x19',
        '\x3', '\x19', '\x3', '\x19', '\x3', '\x1A', '\x3', '\x1A', '\x5', '\x1A',
        '\x146', '\n', '\x1A', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x5',
        '\x1B', '\x14B', '\n', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B',
        '\a', '\x1B', '\x150', '\n', '\x1B', '\f', '\x1B', '\xE', '\x1B', '\x153',
        '\v', '\x1B', '\x3', '\x1B', '\x5', '\x1B', '\x156', '\n', '\x1B', '\x3',
        '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1C', '\x3', '\x1C', '\x3',
        '\x1C', '\x3', '\x1C', '\x6', '\x1C', '\x15F', '\n', '\x1C', '\r', '\x1C',
        '\xE', '\x1C', '\x160', '\x3', '\x1C', '\x3', '\x1C', '\a', '\x1C', '\x165',
        '\n', '\x1C', '\f', '\x1C', '\xE', '\x1C', '\x168', '\v', '\x1C', '\x3',
        '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1D', '\x3', '\x1D', '\x3',
        '\x1D', '\a', '\x1D', '\x170', '\n', '\x1D', '\f', '\x1D', '\xE', '\x1D',
        '\x173', '\v', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3',
        '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\a', '\x1E', '\x17C',
        '\n', '\x1E', '\f', '\x1E', '\xE', '\x1E', '\x17F', '\v', '\x1E', '\x3',
        '\x1E', '\x5', '\x1E', '\x182', '\n', '\x1E', '\x3', '\x1F', '\x3', '\x1F',
        '\x3', '\x1F', '\x3', '\x1F', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3',
        '!', '\x3', '!', '\x3', '!', '\x3', '!', '\x3', '\"', '\x3', '\"', '\x3',
        '\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', '#',
        '\x5', '#', '\x197', '\n', '#', '\x3', '#', '\x3', '#', '\x3', '#', '\a',
        '#', '\x19C', '\n', '#', '\f', '#', '\xE', '#', '\x19F', '\v', '#', '\x3',
        '#', '\x3', '#', '\x5', '#', '\x1A3', '\n', '#', '\x3', '$', '\x3', '$',
        '\x3', '$', '\x3', '$', '\x3', '$', '\x3', '%', '\x3', '%', '\x3', '%',
        '\x3', '%', '\x3', '%', '\x3', '%', '\x3', '%', '\x3', '%', '\x3', '%',
        '\x3', '&', '\x3', '&', '\x3', '&', '\x3', '&', '\x3', '&', '\x3', '\'',
        '\x3', '\'', '\x3', '\'', '\x3', '\'', '\x3', '\'', '\x3', '\'', '\a',
        '\'', '\x1BE', '\n', '\'', '\f', '\'', '\xE', '\'', '\x1C1', '\v', '\'',
        '\x3', '(', '\x3', '(', '\x5', '(', '\x1C5', '\n', '(', '\x3', '(', '\x2',
        '\x5', '\n', '\f', 'L', ')', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE',
        '\x10', '\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', ' ', '\"',
        '$', '&', '(', '*', ',', '.', '\x30', '\x32', '\x34', '\x36', '\x38',
        ':', '<', '>', '@', '\x42', '\x44', '\x46', 'H', 'J', 'L', 'N', '\x2',
        '\n', '\x3', '\x2', '\x3', '\x5', '\x3', '\x2', '\f', '\xE', '\x4', '\x2',
        '\n', '\n', '\xF', '\xF', '\x4', '\x2', '\x6', '\a', '\x10', '\x13', '\x3',
        '\x2', '\x15', '\x16', '\x3', '\x2', ':', '<', '\x3', '\x2', '\"', '#',
        '\x3', '\x2', '/', '\x32', '\x2', '\x1E2', '\x2', 'S', '\x3', '\x2', '\x2',
        '\x2', '\x4', '\\', '\x3', '\x2', '\x2', '\x2', '\x6', '^', '\x3', '\x2',
        '\x2', '\x2', '\b', 'j', '\x3', '\x2', '\x2', '\x2', '\n', '|', '\x3',
        '\x2', '\x2', '\x2', '\f', '\x92', '\x3', '\x2', '\x2', '\x2', '\xE',
        '\xA0', '\x3', '\x2', '\x2', '\x2', '\x10', '\xA2', '\x3', '\x2', '\x2',
        '\x2', '\x12', '\xA7', '\x3', '\x2', '\x2', '\x2', '\x14', '\xAE', '\x3',
        '\x2', '\x2', '\x2', '\x16', '\xB6', '\x3', '\x2', '\x2', '\x2', '\x18',
        '\xBA', '\x3', '\x2', '\x2', '\x2', '\x1A', '\xC3', '\x3', '\x2', '\x2',
        '\x2', '\x1C', '\xC6', '\x3', '\x2', '\x2', '\x2', '\x1E', '\xD7', '\x3',
        '\x2', '\x2', '\x2', ' ', '\xE4', '\x3', '\x2', '\x2', '\x2', '\"', '\xF3',
        '\x3', '\x2', '\x2', '\x2', '$', '\xF7', '\x3', '\x2', '\x2', '\x2', '&',
        '\x10B', '\x3', '\x2', '\x2', '\x2', '(', '\x113', '\x3', '\x2', '\x2',
        '\x2', '*', '\x127', '\x3', '\x2', '\x2', '\x2', ',', '\x129', '\x3',
        '\x2', '\x2', '\x2', '.', '\x13B', '\x3', '\x2', '\x2', '\x2', '\x30',
        '\x13F', '\x3', '\x2', '\x2', '\x2', '\x32', '\x143', '\x3', '\x2', '\x2',
        '\x2', '\x34', '\x147', '\x3', '\x2', '\x2', '\x2', '\x36', '\x15E', '\x3',
        '\x2', '\x2', '\x2', '\x38', '\x16C', '\x3', '\x2', '\x2', '\x2', ':',
        '\x177', '\x3', '\x2', '\x2', '\x2', '<', '\x183', '\x3', '\x2', '\x2',
        '\x2', '>', '\x187', '\x3', '\x2', '\x2', '\x2', '@', '\x18A', '\x3',
        '\x2', '\x2', '\x2', '\x42', '\x18E', '\x3', '\x2', '\x2', '\x2', '\x44',
        '\x196', '\x3', '\x2', '\x2', '\x2', '\x46', '\x1A4', '\x3', '\x2', '\x2',
        '\x2', 'H', '\x1A9', '\x3', '\x2', '\x2', '\x2', 'J', '\x1B2', '\x3',
        '\x2', '\x2', '\x2', 'L', '\x1B7', '\x3', '\x2', '\x2', '\x2', 'N', '\x1C4',
        '\x3', '\x2', '\x2', '\x2', 'P', 'R', '\x5', '\x4', '\x3', '\x2', 'Q',
        'P', '\x3', '\x2', '\x2', '\x2', 'R', 'U', '\x3', '\x2', '\x2', '\x2',
        'S', 'Q', '\x3', '\x2', '\x2', '\x2', 'S', 'T', '\x3', '\x2', '\x2', '\x2',
        'T', 'V', '\x3', '\x2', '\x2', '\x2', 'U', 'S', '\x3', '\x2', '\x2', '\x2',
        'V', 'W', '\a', '\x2', '\x2', '\x3', 'W', '\x3', '\x3', '\x2', '\x2',
        '\x2', 'X', ']', '\x5', '(', '\x15', '\x2', 'Y', ']', '\x5', ' ', '\x11',
        '\x2', 'Z', ']', '\x5', '$', '\x13', '\x2', '[', ']', '\x5', '\x1A', '\xE',
        '\x2', '\\', 'X', '\x3', '\x2', '\x2', '\x2', '\\', 'Y', '\x3', '\x2',
        '\x2', '\x2', '\\', 'Z', '\x3', '\x2', '\x2', '\x2', '\\', '[', '\x3',
        '\x2', '\x2', '\x2', ']', '\x5', '\x3', '\x2', '\x2', '\x2', '^', '_',
        '\t', '\x2', '\x2', '\x2', '_', '\a', '\x3', '\x2', '\x2', '\x2', '`',
        'k', '\x5', '\x6', '\x4', '\x2', '\x61', '\x62', '\a', '\x33', '\x2',
        '\x2', '\x62', '\x63', '\a', '\x6', '\x2', '\x2', '\x63', '\x64', '\x5',
        '\x6', '\x4', '\x2', '\x64', '\x65', '\a', '\a', '\x2', '\x2', '\x65',
        'k', '\x3', '\x2', '\x2', '\x2', '\x66', 'g', '\a', '\x33', '\x2', '\x2',
        'g', 'h', '\a', '\x6', '\x2', '\x2', 'h', 'i', '\a', '>', '\x2', '\x2',
        'i', 'k', '\a', '\a', '\x2', '\x2', 'j', '`', '\x3', '\x2', '\x2', '\x2',
        'j', '\x61', '\x3', '\x2', '\x2', '\x2', 'j', '\x66', '\x3', '\x2', '\x2',
        '\x2', 'k', '\t', '\x3', '\x2', '\x2', '\x2', 'l', 'm', '\b', '\x6', '\x1',
        '\x2', 'm', '}', '\x5', '\f', '\a', '\x2', 'n', '}', '\x5', '\x16', '\f',
        '\x2', 'o', '}', '\x5', '\x12', '\n', '\x2', 'p', '}', '\a', '=', '\x2',
        '\x2', 'q', 'r', '\a', '\b', '\x2', '\x2', 'r', 's', '\x5', '\n', '\x6',
        '\x2', 's', 't', '\a', '\t', '\x2', '\x2', 't', '}', '\x3', '\x2', '\x2',
        '\x2', 'u', 'v', '\a', '\b', '\x2', '\x2', 'v', 'w', '\a', '\n', '\x2',
        '\x2', 'w', 'x', '\x5', '\n', '\x6', '\x2', 'x', 'y', '\a', '\t', '\x2',
        '\x2', 'y', '}', '\x3', '\x2', '\x2', '\x2', 'z', '{', '\a', '\x14', '\x2',
        '\x2', '{', '}', '\x5', '\n', '\x6', '\x4', '|', 'l', '\x3', '\x2', '\x2',
        '\x2', '|', 'n', '\x3', '\x2', '\x2', '\x2', '|', 'o', '\x3', '\x2', '\x2',
        '\x2', '|', 'p', '\x3', '\x2', '\x2', '\x2', '|', 'q', '\x3', '\x2', '\x2',
        '\x2', '|', 'u', '\x3', '\x2', '\x2', '\x2', '|', 'z', '\x3', '\x2', '\x2',
        '\x2', '}', '\x8F', '\x3', '\x2', '\x2', '\x2', '~', '\x7F', '\f', '\b',
        '\x2', '\x2', '\x7F', '\x80', '\a', '\v', '\x2', '\x2', '\x80', '\x8E',
        '\x5', '\n', '\x6', '\t', '\x81', '\x82', '\f', '\a', '\x2', '\x2', '\x82',
        '\x83', '\t', '\x3', '\x2', '\x2', '\x83', '\x8E', '\x5', '\n', '\x6',
        '\b', '\x84', '\x85', '\f', '\x6', '\x2', '\x2', '\x85', '\x86', '\t',
        '\x4', '\x2', '\x2', '\x86', '\x8E', '\x5', '\n', '\x6', '\a', '\x87',
        '\x88', '\f', '\x5', '\x2', '\x2', '\x88', '\x89', '\t', '\x5', '\x2',
        '\x2', '\x89', '\x8E', '\x5', '\n', '\x6', '\x6', '\x8A', '\x8B', '\f',
        '\x3', '\x2', '\x2', '\x8B', '\x8C', '\t', '\x6', '\x2', '\x2', '\x8C',
        '\x8E', '\x5', '\n', '\x6', '\x4', '\x8D', '~', '\x3', '\x2', '\x2', '\x2',
        '\x8D', '\x81', '\x3', '\x2', '\x2', '\x2', '\x8D', '\x84', '\x3', '\x2',
        '\x2', '\x2', '\x8D', '\x87', '\x3', '\x2', '\x2', '\x2', '\x8D', '\x8A',
        '\x3', '\x2', '\x2', '\x2', '\x8E', '\x91', '\x3', '\x2', '\x2', '\x2',
        '\x8F', '\x8D', '\x3', '\x2', '\x2', '\x2', '\x8F', '\x90', '\x3', '\x2',
        '\x2', '\x2', '\x90', '\v', '\x3', '\x2', '\x2', '\x2', '\x91', '\x8F',
        '\x3', '\x2', '\x2', '\x2', '\x92', '\x93', '\b', '\a', '\x1', '\x2',
        '\x93', '\x94', '\x5', '\xE', '\b', '\x2', '\x94', '\x9A', '\x3', '\x2',
        '\x2', '\x2', '\x95', '\x96', '\f', '\x4', '\x2', '\x2', '\x96', '\x97',
        '\a', '\x17', '\x2', '\x2', '\x97', '\x99', '\x5', '\xE', '\b', '\x2',
        '\x98', '\x95', '\x3', '\x2', '\x2', '\x2', '\x99', '\x9C', '\x3', '\x2',
        '\x2', '\x2', '\x9A', '\x98', '\x3', '\x2', '\x2', '\x2', '\x9A', '\x9B',
        '\x3', '\x2', '\x2', '\x2', '\x9B', '\r', '\x3', '\x2', '\x2', '\x2',
        '\x9C', '\x9A', '\x3', '\x2', '\x2', '\x2', '\x9D', '\xA1', '\a', '>',
        '\x2', '\x2', '\x9E', '\xA1', '\x5', '\x12', '\n', '\x2', '\x9F', '\xA1',
        '\x5', '\x10', '\t', '\x2', '\xA0', '\x9D', '\x3', '\x2', '\x2', '\x2',
        '\xA0', '\x9E', '\x3', '\x2', '\x2', '\x2', '\xA0', '\x9F', '\x3', '\x2',
        '\x2', '\x2', '\xA1', '\xF', '\x3', '\x2', '\x2', '\x2', '\xA2', '\xA3',
        '\a', '>', '\x2', '\x2', '\xA3', '\xA4', '\a', '\x18', '\x2', '\x2', '\xA4',
        '\xA5', '\x5', '\n', '\x6', '\x2', '\xA5', '\xA6', '\a', '\x19', '\x2',
        '\x2', '\xA6', '\x11', '\x3', '\x2', '\x2', '\x2', '\xA7', '\xA8', '\a',
        '>', '\x2', '\x2', '\xA8', '\xAA', '\a', '\b', '\x2', '\x2', '\xA9', '\xAB',
        '\x5', '\x14', '\v', '\x2', '\xAA', '\xA9', '\x3', '\x2', '\x2', '\x2',
        '\xAA', '\xAB', '\x3', '\x2', '\x2', '\x2', '\xAB', '\xAC', '\x3', '\x2',
        '\x2', '\x2', '\xAC', '\xAD', '\a', '\t', '\x2', '\x2', '\xAD', '\x13',
        '\x3', '\x2', '\x2', '\x2', '\xAE', '\xB3', '\x5', '\n', '\x6', '\x2',
        '\xAF', '\xB0', '\a', '\x1A', '\x2', '\x2', '\xB0', '\xB2', '\x5', '\n',
        '\x6', '\x2', '\xB1', '\xAF', '\x3', '\x2', '\x2', '\x2', '\xB2', '\xB5',
        '\x3', '\x2', '\x2', '\x2', '\xB3', '\xB1', '\x3', '\x2', '\x2', '\x2',
        '\xB3', '\xB4', '\x3', '\x2', '\x2', '\x2', '\xB4', '\x15', '\x3', '\x2',
        '\x2', '\x2', '\xB5', '\xB3', '\x3', '\x2', '\x2', '\x2', '\xB6', '\xB7',
        '\t', '\a', '\x2', '\x2', '\xB7', '\x17', '\x3', '\x2', '\x2', '\x2',
        '\xB8', '\xBB', '\x5', '\x6', '\x4', '\x2', '\xB9', '\xBB', '\a', '>',
        '\x2', '\x2', '\xBA', '\xB8', '\x3', '\x2', '\x2', '\x2', '\xBA', '\xB9',
        '\x3', '\x2', '\x2', '\x2', '\xBB', '\xBC', '\x3', '\x2', '\x2', '\x2',
        '\xBC', '\xBF', '\a', '>', '\x2', '\x2', '\xBD', '\xBE', '\a', '\x1B',
        '\x2', '\x2', '\xBE', '\xC0', '\x5', '\n', '\x6', '\x2', '\xBF', '\xBD',
        '\x3', '\x2', '\x2', '\x2', '\xBF', '\xC0', '\x3', '\x2', '\x2', '\x2',
        '\xC0', '\xC1', '\x3', '\x2', '\x2', '\x2', '\xC1', '\xC2', '\a', '\x36',
        '\x2', '\x2', '\xC2', '\x19', '\x3', '\x2', '\x2', '\x2', '\xC3', '\xC4',
        '\a', '\x1C', '\x2', '\x2', '\xC4', '\xC5', '\x5', '\x18', '\r', '\x2',
        '\xC5', '\x1B', '\x3', '\x2', '\x2', '\x2', '\xC6', '\xC7', '\a', '\x33',
        '\x2', '\x2', '\xC7', '\xCA', '\a', '\x6', '\x2', '\x2', '\xC8', '\xCB',
        '\x5', '\x6', '\x4', '\x2', '\xC9', '\xCB', '\a', '>', '\x2', '\x2', '\xCA',
        '\xC8', '\x3', '\x2', '\x2', '\x2', '\xCA', '\xC9', '\x3', '\x2', '\x2',
        '\x2', '\xCB', '\xCC', '\x3', '\x2', '\x2', '\x2', '\xCC', '\xCD', '\a',
        '\a', '\x2', '\x2', '\xCD', '\xD3', '\a', '>', '\x2', '\x2', '\xCE', '\xD1',
        '\a', '\x1B', '\x2', '\x2', '\xCF', '\xD2', '\x5', '\x1E', '\x10', '\x2',
        '\xD0', '\xD2', '\x5', '\n', '\x6', '\x2', '\xD1', '\xCF', '\x3', '\x2',
        '\x2', '\x2', '\xD1', '\xD0', '\x3', '\x2', '\x2', '\x2', '\xD2', '\xD4',
        '\x3', '\x2', '\x2', '\x2', '\xD3', '\xCE', '\x3', '\x2', '\x2', '\x2',
        '\xD3', '\xD4', '\x3', '\x2', '\x2', '\x2', '\xD4', '\xD5', '\x3', '\x2',
        '\x2', '\x2', '\xD5', '\xD6', '\a', '\x36', '\x2', '\x2', '\xD6', '\x1D',
        '\x3', '\x2', '\x2', '\x2', '\xD7', '\xE0', '\a', '\x1D', '\x2', '\x2',
        '\xD8', '\xDD', '\x5', '\n', '\x6', '\x2', '\xD9', '\xDA', '\a', '\x1A',
        '\x2', '\x2', '\xDA', '\xDC', '\x5', '\n', '\x6', '\x2', '\xDB', '\xD9',
        '\x3', '\x2', '\x2', '\x2', '\xDC', '\xDF', '\x3', '\x2', '\x2', '\x2',
        '\xDD', '\xDB', '\x3', '\x2', '\x2', '\x2', '\xDD', '\xDE', '\x3', '\x2',
        '\x2', '\x2', '\xDE', '\xE1', '\x3', '\x2', '\x2', '\x2', '\xDF', '\xDD',
        '\x3', '\x2', '\x2', '\x2', '\xE0', '\xD8', '\x3', '\x2', '\x2', '\x2',
        '\xE0', '\xE1', '\x3', '\x2', '\x2', '\x2', '\xE1', '\xE2', '\x3', '\x2',
        '\x2', '\x2', '\xE2', '\xE3', '\a', '\x1E', '\x2', '\x2', '\xE3', '\x1F',
        '\x3', '\x2', '\x2', '\x2', '\xE4', '\xE5', '\a', '\x1F', '\x2', '\x2',
        '\xE5', '\xE7', '\a', '>', '\x2', '\x2', '\xE6', '\xE8', '\a', '\x36',
        '\x2', '\x2', '\xE7', '\xE6', '\x3', '\x2', '\x2', '\x2', '\xE7', '\xE8',
        '\x3', '\x2', '\x2', '\x2', '\xE8', '\xE9', '\x3', '\x2', '\x2', '\x2',
        '\xE9', '\xEA', '\a', '\x1D', '\x2', '\x2', '\xEA', '\xEC', '\a', '\x36',
        '\x2', '\x2', '\xEB', '\xED', '\x5', '\"', '\x12', '\x2', '\xEC', '\xEB',
        '\x3', '\x2', '\x2', '\x2', '\xED', '\xEE', '\x3', '\x2', '\x2', '\x2',
        '\xEE', '\xEC', '\x3', '\x2', '\x2', '\x2', '\xEE', '\xEF', '\x3', '\x2',
        '\x2', '\x2', '\xEF', '\xF0', '\x3', '\x2', '\x2', '\x2', '\xF0', '\xF1',
        '\a', '\x1E', '\x2', '\x2', '\xF1', '\xF2', '\a', '\x36', '\x2', '\x2',
        '\xF2', '!', '\x3', '\x2', '\x2', '\x2', '\xF3', '\xF4', '\x5', '\b',
        '\x5', '\x2', '\xF4', '\xF5', '\a', '>', '\x2', '\x2', '\xF5', '\xF6',
        '\a', '\x36', '\x2', '\x2', '\xF6', '#', '\x3', '\x2', '\x2', '\x2', '\xF7',
        '\xF8', '\a', ' ', '\x2', '\x2', '\xF8', '\xFA', '\a', '>', '\x2', '\x2',
        '\xF9', '\xFB', '\a', '\x36', '\x2', '\x2', '\xFA', '\xF9', '\x3', '\x2',
        '\x2', '\x2', '\xFA', '\xFB', '\x3', '\x2', '\x2', '\x2', '\xFB', '\xFC',
        '\x3', '\x2', '\x2', '\x2', '\xFC', '\xFE', '\a', '\x1D', '\x2', '\x2',
        '\xFD', '\xFF', '\a', '\x36', '\x2', '\x2', '\xFE', '\xFD', '\x3', '\x2',
        '\x2', '\x2', '\xFE', '\xFF', '\x3', '\x2', '\x2', '\x2', '\xFF', '\x100',
        '\x3', '\x2', '\x2', '\x2', '\x100', '\x105', '\x5', '&', '\x14', '\x2',
        '\x101', '\x102', '\a', '\x1A', '\x2', '\x2', '\x102', '\x104', '\x5',
        '&', '\x14', '\x2', '\x103', '\x101', '\x3', '\x2', '\x2', '\x2', '\x104',
        '\x107', '\x3', '\x2', '\x2', '\x2', '\x105', '\x103', '\x3', '\x2', '\x2',
        '\x2', '\x105', '\x106', '\x3', '\x2', '\x2', '\x2', '\x106', '\x108',
        '\x3', '\x2', '\x2', '\x2', '\x107', '\x105', '\x3', '\x2', '\x2', '\x2',
        '\x108', '\x109', '\a', '\x1E', '\x2', '\x2', '\x109', '\x10A', '\a',
        '\x36', '\x2', '\x2', '\x10A', '%', '\x3', '\x2', '\x2', '\x2', '\x10B',
        '\x10E', '\a', '>', '\x2', '\x2', '\x10C', '\x10D', '\a', '\x1B', '\x2',
        '\x2', '\x10D', '\x10F', '\a', ':', '\x2', '\x2', '\x10E', '\x10C', '\x3',
        '\x2', '\x2', '\x2', '\x10E', '\x10F', '\x3', '\x2', '\x2', '\x2', '\x10F',
        '\x111', '\x3', '\x2', '\x2', '\x2', '\x110', '\x112', '\a', '\x36', '\x2',
        '\x2', '\x111', '\x110', '\x3', '\x2', '\x2', '\x2', '\x111', '\x112',
        '\x3', '\x2', '\x2', '\x2', '\x112', '\'', '\x3', '\x2', '\x2', '\x2',
        '\x113', '\x114', '\a', '!', '\x2', '\x2', '\x114', '\x115', '\x5', '*',
        '\x16', '\x2', '\x115', '\x116', '\a', '>', '\x2', '\x2', '\x116', '\x11F',
        '\a', '\b', '\x2', '\x2', '\x117', '\x11C', '\x5', ',', '\x17', '\x2',
        '\x118', '\x119', '\a', '\x1A', '\x2', '\x2', '\x119', '\x11B', '\x5',
        ',', '\x17', '\x2', '\x11A', '\x118', '\x3', '\x2', '\x2', '\x2', '\x11B',
        '\x11E', '\x3', '\x2', '\x2', '\x2', '\x11C', '\x11A', '\x3', '\x2', '\x2',
        '\x2', '\x11C', '\x11D', '\x3', '\x2', '\x2', '\x2', '\x11D', '\x120',
        '\x3', '\x2', '\x2', '\x2', '\x11E', '\x11C', '\x3', '\x2', '\x2', '\x2',
        '\x11F', '\x117', '\x3', '\x2', '\x2', '\x2', '\x11F', '\x120', '\x3',
        '\x2', '\x2', '\x2', '\x120', '\x121', '\x3', '\x2', '\x2', '\x2', '\x121',
        '\x122', '\a', '\t', '\x2', '\x2', '\x122', '\x123', '\x5', '\x44', '#',
        '\x2', '\x123', ')', '\x3', '\x2', '\x2', '\x2', '\x124', '\x128', '\x5',
        '\b', '\x5', '\x2', '\x125', '\x128', '\a', '\x34', '\x2', '\x2', '\x126',
        '\x128', '\a', '>', '\x2', '\x2', '\x127', '\x124', '\x3', '\x2', '\x2',
        '\x2', '\x127', '\x125', '\x3', '\x2', '\x2', '\x2', '\x127', '\x126',
        '\x3', '\x2', '\x2', '\x2', '\x128', '+', '\x3', '\x2', '\x2', '\x2',
        '\x129', '\x12A', '\x5', '\b', '\x5', '\x2', '\x12A', '\x12B', '\a', '>',
        '\x2', '\x2', '\x12B', '-', '\x3', '\x2', '\x2', '\x2', '\x12C', '\x13C',
        '\x5', ':', '\x1E', '\x2', '\x12D', '\x13C', '\x5', '\x34', '\x1B', '\x2',
        '\x12E', '\x13C', '\x5', '@', '!', '\x2', '\x12F', '\x13C', '\x5', '\x42',
        '\"', '\x2', '\x130', '\x13C', '\x5', '\x18', '\r', '\x2', '\x131', '\x13C',
        '\x5', '\x1C', '\xF', '\x2', '\x132', '\x13C', '\x5', '\x1A', '\xE', '\x2',
        '\x133', '\x13C', '\x5', '\x30', '\x19', '\x2', '\x134', '\x135', '\x5',
        '\n', '\x6', '\x2', '\x135', '\x136', '\a', '\x36', '\x2', '\x2', '\x136',
        '\x13C', '\x3', '\x2', '\x2', '\x2', '\x137', '\x13C', '\x5', '\x46',
        '$', '\x2', '\x138', '\x13C', '\x5', 'J', '&', '\x2', '\x139', '\x13C',
        '\x5', 'H', '%', '\x2', '\x13A', '\x13C', '\x5', '\x44', '#', '\x2', '\x13B',
        '\x12C', '\x3', '\x2', '\x2', '\x2', '\x13B', '\x12D', '\x3', '\x2', '\x2',
        '\x2', '\x13B', '\x12E', '\x3', '\x2', '\x2', '\x2', '\x13B', '\x12F',
        '\x3', '\x2', '\x2', '\x2', '\x13B', '\x130', '\x3', '\x2', '\x2', '\x2',
        '\x13B', '\x131', '\x3', '\x2', '\x2', '\x2', '\x13B', '\x132', '\x3',
        '\x2', '\x2', '\x2', '\x13B', '\x133', '\x3', '\x2', '\x2', '\x2', '\x13B',
        '\x134', '\x3', '\x2', '\x2', '\x2', '\x13B', '\x137', '\x3', '\x2', '\x2',
        '\x2', '\x13B', '\x138', '\x3', '\x2', '\x2', '\x2', '\x13B', '\x139',
        '\x3', '\x2', '\x2', '\x2', '\x13B', '\x13A', '\x3', '\x2', '\x2', '\x2',
        '\x13C', '/', '\x3', '\x2', '\x2', '\x2', '\x13D', '\x140', '\x5', '\x32',
        '\x1A', '\x2', '\x13E', '\x140', '\t', '\b', '\x2', '\x2', '\x13F', '\x13D',
        '\x3', '\x2', '\x2', '\x2', '\x13F', '\x13E', '\x3', '\x2', '\x2', '\x2',
        '\x140', '\x141', '\x3', '\x2', '\x2', '\x2', '\x141', '\x142', '\a',
        '\x36', '\x2', '\x2', '\x142', '\x31', '\x3', '\x2', '\x2', '\x2', '\x143',
        '\x145', '\a', '$', '\x2', '\x2', '\x144', '\x146', '\x5', '\n', '\x6',
        '\x2', '\x145', '\x144', '\x3', '\x2', '\x2', '\x2', '\x145', '\x146',
        '\x3', '\x2', '\x2', '\x2', '\x146', '\x33', '\x3', '\x2', '\x2', '\x2',
        '\x147', '\x148', '\a', '%', '\x2', '\x2', '\x148', '\x14A', '\x5', '\n',
        '\x6', '\x2', '\x149', '\x14B', '\a', '\x36', '\x2', '\x2', '\x14A', '\x149',
        '\x3', '\x2', '\x2', '\x2', '\x14A', '\x14B', '\x3', '\x2', '\x2', '\x2',
        '\x14B', '\x14C', '\x3', '\x2', '\x2', '\x2', '\x14C', '\x14D', '\a',
        '\x1D', '\x2', '\x2', '\x14D', '\x151', '\a', '\x36', '\x2', '\x2', '\x14E',
        '\x150', '\x5', '\x36', '\x1C', '\x2', '\x14F', '\x14E', '\x3', '\x2',
        '\x2', '\x2', '\x150', '\x153', '\x3', '\x2', '\x2', '\x2', '\x151', '\x14F',
        '\x3', '\x2', '\x2', '\x2', '\x151', '\x152', '\x3', '\x2', '\x2', '\x2',
        '\x152', '\x155', '\x3', '\x2', '\x2', '\x2', '\x153', '\x151', '\x3',
        '\x2', '\x2', '\x2', '\x154', '\x156', '\x5', '\x38', '\x1D', '\x2', '\x155',
        '\x154', '\x3', '\x2', '\x2', '\x2', '\x155', '\x156', '\x3', '\x2', '\x2',
        '\x2', '\x156', '\x157', '\x3', '\x2', '\x2', '\x2', '\x157', '\x158',
        '\a', '\x1E', '\x2', '\x2', '\x158', '\x159', '\a', '\x36', '\x2', '\x2',
        '\x159', '\x35', '\x3', '\x2', '\x2', '\x2', '\x15A', '\x15B', '\a', '&',
        '\x2', '\x2', '\x15B', '\x15C', '\x5', '\n', '\x6', '\x2', '\x15C', '\x15D',
        '\a', '\'', '\x2', '\x2', '\x15D', '\x15F', '\x3', '\x2', '\x2', '\x2',
        '\x15E', '\x15A', '\x3', '\x2', '\x2', '\x2', '\x15F', '\x160', '\x3',
        '\x2', '\x2', '\x2', '\x160', '\x15E', '\x3', '\x2', '\x2', '\x2', '\x160',
        '\x161', '\x3', '\x2', '\x2', '\x2', '\x161', '\x162', '\x3', '\x2', '\x2',
        '\x2', '\x162', '\x166', '\a', '\x36', '\x2', '\x2', '\x163', '\x165',
        '\x5', '.', '\x18', '\x2', '\x164', '\x163', '\x3', '\x2', '\x2', '\x2',
        '\x165', '\x168', '\x3', '\x2', '\x2', '\x2', '\x166', '\x164', '\x3',
        '\x2', '\x2', '\x2', '\x166', '\x167', '\x3', '\x2', '\x2', '\x2', '\x167',
        '\x169', '\x3', '\x2', '\x2', '\x2', '\x168', '\x166', '\x3', '\x2', '\x2',
        '\x2', '\x169', '\x16A', '\a', '\"', '\x2', '\x2', '\x16A', '\x16B', '\a',
        '\x36', '\x2', '\x2', '\x16B', '\x37', '\x3', '\x2', '\x2', '\x2', '\x16C',
        '\x16D', '\a', '(', '\x2', '\x2', '\x16D', '\x171', '\a', '\x36', '\x2',
        '\x2', '\x16E', '\x170', '\x5', '.', '\x18', '\x2', '\x16F', '\x16E',
        '\x3', '\x2', '\x2', '\x2', '\x170', '\x173', '\x3', '\x2', '\x2', '\x2',
        '\x171', '\x16F', '\x3', '\x2', '\x2', '\x2', '\x171', '\x172', '\x3',
        '\x2', '\x2', '\x2', '\x172', '\x174', '\x3', '\x2', '\x2', '\x2', '\x173',
        '\x171', '\x3', '\x2', '\x2', '\x2', '\x174', '\x175', '\a', '\"', '\x2',
        '\x2', '\x175', '\x176', '\a', '\x36', '\x2', '\x2', '\x176', '\x39',
        '\x3', '\x2', '\x2', '\x2', '\x177', '\x178', '\a', ')', '\x2', '\x2',
        '\x178', '\x179', '\x5', '\n', '\x6', '\x2', '\x179', '\x17D', '\x5',
        '\x44', '#', '\x2', '\x17A', '\x17C', '\x5', '<', '\x1F', '\x2', '\x17B',
        '\x17A', '\x3', '\x2', '\x2', '\x2', '\x17C', '\x17F', '\x3', '\x2', '\x2',
        '\x2', '\x17D', '\x17B', '\x3', '\x2', '\x2', '\x2', '\x17D', '\x17E',
        '\x3', '\x2', '\x2', '\x2', '\x17E', '\x181', '\x3', '\x2', '\x2', '\x2',
        '\x17F', '\x17D', '\x3', '\x2', '\x2', '\x2', '\x180', '\x182', '\x5',
        '>', ' ', '\x2', '\x181', '\x180', '\x3', '\x2', '\x2', '\x2', '\x181',
        '\x182', '\x3', '\x2', '\x2', '\x2', '\x182', ';', '\x3', '\x2', '\x2',
        '\x2', '\x183', '\x184', '\a', '*', '\x2', '\x2', '\x184', '\x185', '\x5',
        '\n', '\x6', '\x2', '\x185', '\x186', '\x5', '\x44', '#', '\x2', '\x186',
        '=', '\x3', '\x2', '\x2', '\x2', '\x187', '\x188', '\a', '+', '\x2', '\x2',
        '\x188', '\x189', '\x5', '\x44', '#', '\x2', '\x189', '?', '\x3', '\x2',
        '\x2', '\x2', '\x18A', '\x18B', '\a', ',', '\x2', '\x2', '\x18B', '\x18C',
        '\x5', '\n', '\x6', '\x2', '\x18C', '\x18D', '\x5', '\x44', '#', '\x2',
        '\x18D', '\x41', '\x3', '\x2', '\x2', '\x2', '\x18E', '\x18F', '\a', '-',
        '\x2', '\x2', '\x18F', '\x190', '\x5', '\b', '\x5', '\x2', '\x190', '\x191',
        '\a', '>', '\x2', '\x2', '\x191', '\x192', '\a', '.', '\x2', '\x2', '\x192',
        '\x193', '\x5', '\f', '\a', '\x2', '\x193', '\x194', '\x5', '\x44', '#',
        '\x2', '\x194', '\x43', '\x3', '\x2', '\x2', '\x2', '\x195', '\x197',
        '\a', '\x36', '\x2', '\x2', '\x196', '\x195', '\x3', '\x2', '\x2', '\x2',
        '\x196', '\x197', '\x3', '\x2', '\x2', '\x2', '\x197', '\x198', '\x3',
        '\x2', '\x2', '\x2', '\x198', '\x199', '\a', '\x1D', '\x2', '\x2', '\x199',
        '\x19D', '\a', '\x36', '\x2', '\x2', '\x19A', '\x19C', '\x5', '.', '\x18',
        '\x2', '\x19B', '\x19A', '\x3', '\x2', '\x2', '\x2', '\x19C', '\x19F',
        '\x3', '\x2', '\x2', '\x2', '\x19D', '\x19B', '\x3', '\x2', '\x2', '\x2',
        '\x19D', '\x19E', '\x3', '\x2', '\x2', '\x2', '\x19E', '\x1A0', '\x3',
        '\x2', '\x2', '\x2', '\x19F', '\x19D', '\x3', '\x2', '\x2', '\x2', '\x1A0',
        '\x1A2', '\a', '\x1E', '\x2', '\x2', '\x1A1', '\x1A3', '\a', '\x36', '\x2',
        '\x2', '\x1A2', '\x1A1', '\x3', '\x2', '\x2', '\x2', '\x1A2', '\x1A3',
        '\x3', '\x2', '\x2', '\x2', '\x1A3', '\x45', '\x3', '\x2', '\x2', '\x2',
        '\x1A4', '\x1A5', '\x5', 'L', '\'', '\x2', '\x1A5', '\x1A6', '\a', '\x1B',
        '\x2', '\x2', '\x1A6', '\x1A7', '\x5', '\n', '\x6', '\x2', '\x1A7', '\x1A8',
        '\a', '\x36', '\x2', '\x2', '\x1A8', 'G', '\x3', '\x2', '\x2', '\x2',
        '\x1A9', '\x1AA', '\x5', 'L', '\'', '\x2', '\x1AA', '\x1AB', '\a', '\x1B',
        '\x2', '\x2', '\x1AB', '\x1AC', '\x5', '\n', '\x6', '\x2', '\x1AC', '\x1AD',
        '\a', ')', '\x2', '\x2', '\x1AD', '\x1AE', '\x5', '\n', '\x6', '\x2',
        '\x1AE', '\x1AF', '\a', '+', '\x2', '\x2', '\x1AF', '\x1B0', '\x5', '\n',
        '\x6', '\x2', '\x1B0', '\x1B1', '\a', '\x36', '\x2', '\x2', '\x1B1', 'I',
        '\x3', '\x2', '\x2', '\x2', '\x1B2', '\x1B3', '\x5', 'L', '\'', '\x2',
        '\x1B3', '\x1B4', '\t', '\t', '\x2', '\x2', '\x1B4', '\x1B5', '\x5', '\n',
        '\x6', '\x2', '\x1B5', '\x1B6', '\a', '\x36', '\x2', '\x2', '\x1B6', 'K',
        '\x3', '\x2', '\x2', '\x2', '\x1B7', '\x1B8', '\b', '\'', '\x1', '\x2',
        '\x1B8', '\x1B9', '\x5', 'N', '(', '\x2', '\x1B9', '\x1BF', '\x3', '\x2',
        '\x2', '\x2', '\x1BA', '\x1BB', '\f', '\x4', '\x2', '\x2', '\x1BB', '\x1BC',
        '\a', '\x17', '\x2', '\x2', '\x1BC', '\x1BE', '\x5', 'N', '(', '\x2',
        '\x1BD', '\x1BA', '\x3', '\x2', '\x2', '\x2', '\x1BE', '\x1C1', '\x3',
        '\x2', '\x2', '\x2', '\x1BF', '\x1BD', '\x3', '\x2', '\x2', '\x2', '\x1BF',
        '\x1C0', '\x3', '\x2', '\x2', '\x2', '\x1C0', 'M', '\x3', '\x2', '\x2',
        '\x2', '\x1C1', '\x1BF', '\x3', '\x2', '\x2', '\x2', '\x1C2', '\x1C5',
        '\a', '>', '\x2', '\x2', '\x1C3', '\x1C5', '\x5', '\x10', '\t', '\x2',
        '\x1C4', '\x1C2', '\x3', '\x2', '\x2', '\x2', '\x1C4', '\x1C3', '\x3',
        '\x2', '\x2', '\x2', '\x1C5', 'O', '\x3', '\x2', '\x2', '\x2', '-', 'S',
        '\\', 'j', '|', '\x8D', '\x8F', '\x9A', '\xA0', '\xAA', '\xB3', '\xBA',
        '\xBF', '\xCA', '\xD1', '\xD3', '\xDD', '\xE0', '\xE7', '\xEE', '\xFA',
        '\xFE', '\x105', '\x10E', '\x111', '\x11C', '\x11F', '\x127', '\x13B',
        '\x13F', '\x145', '\x14A', '\x151', '\x155', '\x160', '\x166', '\x171',
        '\x17D', '\x181', '\x196', '\x19D', '\x1A2', '\x1BF', '\x1C4',
    };

    public static readonly ATN _ATN =
        new ATNDeserializer().Deserialize(_serializedATN);


}
